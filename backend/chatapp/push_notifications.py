import logging
import time
import requests
from typing import List, Optional
from django.conf import settings
import firebase_admin
from firebase_admin import credentials, messaging

logger = logging.getLogger('chatapp.push_notifications')

logger.info("üîî [PUSH] === PUSH NOTIFICATIONS MODULE LOADED (FIREBASE) ===")

class PushNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Firebase Cloud Messaging"""

    _firebase_app = None

    @classmethod
    def _initialize_firebase(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK"""
        if cls._firebase_app is None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ Firebase
                firebase_admin.get_app()
                logger.info("üî• [FCM] Firebase app already initialized")
            except ValueError:
                # Firebase –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                logger.info("üî• [FCM] Initializing Firebase Admin SDK...")

                try:
                    if hasattr(settings, 'FIREBASE_CREDENTIALS_PATH') and settings.FIREBASE_CREDENTIALS_PATH:
                        logger.info("üî• [FCM] Using Firebase credentials from file path")
                        cred = credentials.Certificate(settings.FIREBASE_CREDENTIALS_PATH)
                        cls._firebase_app = firebase_admin.initialize_app(cred)
                        logger.info("üî• [FCM] ‚úÖ Firebase initialized with credentials file")
                    elif hasattr(settings, 'FIREBASE_CREDENTIALS') and settings.FIREBASE_CREDENTIALS:
                        logger.info("üî• [FCM] Using Firebase credentials from settings dict")
                        cred = credentials.Certificate(settings.FIREBASE_CREDENTIALS)
                        cls._firebase_app = firebase_admin.initialize_app(cred)
                        logger.info("üî• [FCM] ‚úÖ Firebase initialized with credentials dict")
                    else:
                        logger.error("üî• [FCM] ‚ùå Firebase credentials not found in settings")
                        logger.error("üî• [FCM] ‚ùå Expected FIREBASE_CREDENTIALS or FIREBASE_CREDENTIALS_PATH in settings")
                        raise ValueError("Firebase credentials not configured")

                except Exception as init_error:
                    logger.error(f"üî• [FCM] ‚ùå Error during Firebase initialization: {str(init_error)}")
                    raise ValueError(f"Failed to initialize Firebase: {str(init_error)}")

    @classmethod
    def send_message_notification(cls, fcm_tokens: List[str], sender_name: str, message_text: str,
                                  chat_id: Optional[int] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Firebase FCM
        """
        logger.info(f"üîî [PUSH] === STARTING FIREBASE FCM PUSH NOTIFICATION ===")
        logger.info(f"üîî [PUSH] Tokens count: {len(fcm_tokens)}")
        logger.info(f"üîî [PUSH] Sender: {sender_name}")
        logger.info(f"üîî [PUSH] Message: {message_text[:50]}...")
        logger.info(f"üîî [PUSH] Chat ID: {chat_id}")

        if not fcm_tokens:
            logger.warning("üî• [FCM] ‚ùå No FCM tokens provided")
            cls._suggest_token_migration()
            return False

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º Expo —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        expo_tokens = [token for token in fcm_tokens if token.startswith('ExponentPushToken')]
        fcm_tokens_only = [token for token in fcm_tokens if not token.startswith('ExponentPushToken')]

        # –ú–∞—Å—Å–æ–≤–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ Expo —Ç–æ–∫–µ–Ω—ã
        if expo_tokens:
            logger.warning(f"üî• [FCM] üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(expo_tokens)} Expo —Ç–æ–∫–µ–Ω–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏–∑ –ë–î")
            cls._cleanup_expo_tokens(expo_tokens)

            # –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö Expo —Ç–æ–∫–µ–Ω–æ–≤
            cls._cleanup_all_expo_tokens()

        if not fcm_tokens_only:
            logger.warning("üî• [FCM] ‚ùå No valid FCM tokens found after filtering")
            if expo_tokens:
                logger.warning("üî• [FCM] ‚ùå All tokens were Expo tokens - they have been removed")
                logger.warning("üî• [FCM] üí° Users need to restart app to get new FCM tokens")

            cls._suggest_token_migration()
            return False

        logger.info(f"üî• [FCM] ‚úÖ Proceeding with {len(fcm_tokens_only)} valid FCM tokens")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Firebase FCM
        fcm_success = cls._send_firebase_notification(fcm_tokens_only, sender_name, message_text, chat_id)

        logger.info(f"üîî [PUSH] === FCM PUSH RESULT: {fcm_success} ===")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
        if not fcm_success:
            cls.get_token_statistics()

        return fcm_success

    # –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Firebase FCM
    # Expo —Ç–æ–∫–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è

    @classmethod
    def _send_firebase_notification(cls, fcm_tokens: List[str], sender_name: str, message_text: str, chat_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firebase FCM"""
        logger.info(f"üî• [FCM] Starting Firebase push notification to {len(fcm_tokens)} tokens")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
        try:
            cls._initialize_firebase()
        except Exception as e:
            logger.error(f"Failed to initialize Firebase: {str(e)}")
            return False

        logger.info(f"Attempting to send push notification to {len(fcm_tokens)} tokens")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        truncated_text = message_text[:100] + "..." if len(message_text) > 100 else message_text

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Firebase
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            data_payload = {
                "type": "message_notification",
                "chatId": str(chat_id) if chat_id else "",
                "timestamp": str(int(time.time())),
                "sender_name": sender_name,
            }

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = messaging.Notification(
                title=f"üí¨ {sender_name}",
                body=truncated_text
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
            android_config = messaging.AndroidConfig(
                ttl=2419200,  # 28 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                priority='high',
                notification=messaging.AndroidNotification(
                    title=f"üí¨ {sender_name}",
                    body=truncated_text,
                    sound='default',
                    color='#222222',
                    channel_id='messages'
                ),
                data=data_payload
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
            apns_config = messaging.APNSConfig(
                headers={'apns-priority': '10'},
                payload=messaging.APNSPayload(
                    aps=messaging.Aps(
                        alert=messaging.ApsAlert(
                            title=f"üí¨ {sender_name}",
                            body=truncated_text
                        ),
                        badge=1,
                        sound='default',
                        content_available=True
                    ),
                    custom_data=data_payload
                )
            )

            success_count = 0
            failed_tokens = []

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –ø–æ 500 —à—Ç—É–∫ (–ª–∏–º–∏—Ç Firebase)
            batch_size = 500

            for i in range(0, len(fcm_tokens), batch_size):
                batch_tokens = fcm_tokens[i:i + batch_size]

                logger.info(f"Sending batch {i // batch_size + 1} with {len(batch_tokens)} notifications")

                # –°–æ–∑–¥–∞–µ–º multicast —Å–æ–æ–±—â–µ–Ω–∏–µ
                multicast_message = messaging.MulticastMessage(
                    notification=notification,
                    android=android_config,
                    apns=apns_config,
                    data=data_payload,
                    tokens=batch_tokens
                )

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
                    response = messaging.send_multicast(multicast_message)

                    logger.info(f"Firebase batch response: {response.success_count}/{len(batch_tokens)} successful")

                    success_count += response.success_count

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                    if response.failure_count > 0:
                        for idx, resp in enumerate(response.responses):
                            if not resp.success:
                                token = batch_tokens[idx]
                                error = resp.exception
                                logger.error(f"Failed to send to token {token[:20]}...: {error}")

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
                                if hasattr(error, 'code'):
                                    if error.code in ['UNREGISTERED', 'INVALID_ARGUMENT']:
                                        failed_tokens.append(token)
                                        logger.warning(f"Invalid token detected: {token[:20]}...")

                except Exception as e:
                    logger.error(f"Error sending Firebase batch: {str(e)}")
                    continue

            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            for token in failed_tokens:
                cls._handle_invalid_token(token)

            logger.info(f"üîî [PUSH] === FIREBASE PUSH COMPLETED: {success_count} successful ===")
            return success_count > 0

        except Exception as e:
            logger.error(f"Error creating Firebase message: {str(e)}")
            return False

    @classmethod
    def _handle_invalid_token(cls, token: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ FCM —Ç–æ–∫–µ–Ω—ã"""
        try:
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from authapp.models import CustomUser

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ fcm_token
            users = CustomUser.objects.filter(fcm_token=token)
            for user in users:
                logger.info(f"Removing invalid FCM token for user {user.username}")
                user.fcm_token = None
                user.save()

        except Exception as e:
            logger.error(f"Error handling invalid FCM token {token}: {str(e)}")

    @classmethod
    def _handle_invalid_expo_token(cls, token: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ Expo —Ç–æ–∫–µ–Ω—ã"""
        try:
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from authapp.models import CustomUser

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Expo —Ç–æ–∫–µ–Ω—ã —Ç–∞–∫–∂–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ fcm_token –ø–æ–ª–µ
            users = CustomUser.objects.filter(fcm_token=token)
            for user in users:
                logger.info(f"üö® [CLEANUP] –£–¥–∞–ª–µ–Ω–∏–µ Expo —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                user.fcm_token = None
                user.save()

        except Exception as e:
            logger.error(f"üö® [CLEANUP] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Expo —Ç–æ–∫–µ–Ω–∞ {token}: {str(e)}")

    @classmethod
    def _cleanup_expo_tokens(cls, expo_tokens: List[str]):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö Expo —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from authapp.models import CustomUser

            for token in expo_tokens:
                users = CustomUser.objects.filter(fcm_token=token)
                for user in users:
                    logger.warning(f"üö® [CLEANUP] –£–¥–∞–ª–µ–Ω–∏–µ Expo —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                    user.fcm_token = None
                    user.save()

            logger.info(f"üö® [CLEANUP] –û—á–∏—â–µ–Ω–æ {len(expo_tokens)} –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö Expo —Ç–æ–∫–µ–Ω–æ–≤")

        except Exception as e:
            logger.error(f"üö® [CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Expo —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")

    @classmethod
    def _cleanup_all_expo_tokens(cls):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö Expo —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from authapp.models import CustomUser

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Expo —Ç–æ–∫–µ–Ω–∞–º–∏
            users_with_expo_tokens = CustomUser.objects.filter(
                fcm_token__startswith='ExponentPushToken['
            )

            count = users_with_expo_tokens.count()
            if count > 0:
                logger.warning(f"üö® [CLEANUP] –ù–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Expo —Ç–æ–∫–µ–Ω–∞–º–∏ - –Ω–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É")

                # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ—á–∏—â–∞–µ–º –≤—Å–µ Expo —Ç–æ–∫–µ–Ω—ã
                updated_count = users_with_expo_tokens.update(fcm_token=None)

                logger.info(f"üö® [CLEANUP] ‚úÖ –û—á–∏—â–µ–Ω–æ {updated_count} Expo —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                logger.info(f"üö® [CLEANUP] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö FCM —Ç–æ–∫–µ–Ω–æ–≤")
                logger.info(f"üö® [CLEANUP] üí° Expo —Ç–æ–∫–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è - —Ç–æ–ª—å–∫–æ Firebase FCM")
            else:
                logger.info("üö® [CLEANUP] ‚úÖ Expo —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            logger.error(f"üö® [CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ Expo —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")

    @classmethod
    def _suggest_token_migration(cls):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ FCM —Ç–æ–∫–µ–Ω—ã"""
        logger.warning("üî• [FCM] üìã –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê FIREBASE FCM –¢–û–ö–ï–ù–´")
        logger.warning("üî• [FCM] üì± –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        logger.warning("üî• [FCM]   1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        logger.warning("üî• [FCM]   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        logger.warning("üî• [FCM]   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ")
        logger.warning("üî• [FCM]   4. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–π FCM —Ç–æ–∫–µ–Ω")
        logger.warning("üî• [FCM] üîß –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
        logger.warning("üî• [FCM]   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Firebase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        logger.warning("üî• [FCM]   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ google-services.json –≤ –ø—Ä–æ–µ–∫—Ç–µ")
        logger.warning("üî• [FCM]   - Firebase credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Django settings")

    @classmethod
    def get_token_statistics(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from authapp.models import CustomUser

            total_users = CustomUser.objects.count()
            users_with_tokens = CustomUser.objects.exclude(fcm_token__isnull=True).exclude(fcm_token='').count()
            users_with_expo_tokens = CustomUser.objects.filter(fcm_token__startswith='ExponentPushToken').count()
            users_with_fcm_tokens = CustomUser.objects.exclude(fcm_token__isnull=True).exclude(fcm_token='').exclude(fcm_token__startswith='ExponentPushToken').count()

            stats = {
                'total_users': total_users,
                'users_with_tokens': users_with_tokens,
                'users_with_expo_tokens': users_with_expo_tokens,
                'users_with_fcm_tokens': users_with_fcm_tokens,
                'migration_progress': round((users_with_fcm_tokens / total_users * 100) if total_users > 0 else 0, 1)
            }

            logger.info(f"üî• [FCM] üìä TOKEN STATISTICS:")
            logger.info(f"üî• [FCM]   Total Users: {stats['total_users']}")
            logger.info(f"üî• [FCM]   Users with Tokens: {stats['users_with_tokens']}")
            logger.info(f"üî• [FCM]   Users with Expo Tokens: {stats['users_with_expo_tokens']} ‚ùå")
            logger.info(f"üî• [FCM]   Users with FCM Tokens: {stats['users_with_fcm_tokens']} ‚úÖ")
            logger.info(f"üî• [FCM]   Migration Progress: {stats['migration_progress']}%")

            return stats

        except Exception as e:
            logger.error(f"üî• [FCM] Error getting token statistics: {str(e)}")
            return None