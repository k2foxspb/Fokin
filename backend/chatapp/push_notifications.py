import requests
import json
import logging
from django.conf import settings
from typing import List, Optional

logger = logging.getLogger(__name__)

class PushNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Expo"""

    EXPO_PUSH_URL = "https://exp.host/--/api/v2/push/send"

    @classmethod
    def send_message_notification(cls, expo_tokens: List[str], sender_name: str, message_text: str, chat_id: Optional[int] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

        Args:
            expo_tokens: –°–ø–∏—Å–æ–∫ Expo Push —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            sender_name: –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id: ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not expo_tokens:
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        truncated_text = message_text[:100] + "..." if len(message_text) > 100 else message_text

        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        messages = []
        for token in expo_tokens:
            if not token or not token.startswith('ExponentPushToken'):
                continue

            message = {
                "to": token,
                "title": f"üí¨ {sender_name}",
                "body": truncated_text,
                "data": {
                    "type": "message_notification",
                    "chatId": chat_id,
                    "timestamp": int(time.time())
                },
                "sound": "default",
                "priority": "high",
                "channelId": "messages"
            }
            messages.append(message)

        if not messages:
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –ø–æ 100 —à—Ç—É–∫
            batch_size = 100
            for i in range(0, len(messages), batch_size):
                batch = messages[i:i + batch_size]

                response = requests.post(
                    cls.EXPO_PUSH_URL,
                    json=batch,
                    headers={
                        'Accept': 'application/json',
                        'Accept-Encoding': 'gzip, deflate',
                        'Content-Type': 'application/json',
                    },
                    timeout=10
                )

                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"Push notifications sent successfully: {len(batch)} messages")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                    for i, receipt in enumerate(result.get('data', [])):
                        if receipt.get('status') == 'error':
                            error_type = receipt.get('details', {}).get('error')
                            logger.warning(f"Push notification error for token {batch[i]['to']}: {error_type}")

                            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –º–æ–∂–Ω–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã
                            if error_type in ['DeviceNotRegistered', 'InvalidCredentials']:
                                cls._handle_invalid_token(batch[i]['to'])
                else:
                    logger.error(f"Failed to send push notifications: {response.status_code} - {response.text}")

        except requests.exceptions.RequestException as e:
            logger.error(f"Network error sending push notifications: {str(e)}")
        except Exception as e:
            logger.error(f"Error sending push notifications: {str(e)}")

    @classmethod
    def _handle_invalid_token(cls, token: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"""
        try:
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from authapp.models import CustomUser

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            users = CustomUser.objects.filter(expo_push_token=token)
            for user in users:
                user.expo_push_token = None
                user.save()
                logger.info(f"Removed invalid push token for user {user.username}")

        except Exception as e:
            logger.error(f"Error handling invalid token {token}: {str(e)}")

import time
