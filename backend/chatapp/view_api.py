import logging

from django.db.models.functions import Coalesce
from django.http import JsonResponse
from rest_framework import viewsets, status, mixins
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.db.models import Q, F, IntegerField, Case, When, Subquery, OuterRef, Count
from .models import PrivateChatRoom, PrivateMessage, CustomUser
from .serializers import ChatRoomSerializer, MessageSerializer, ChatPreviewSerializer

logger = logging.getLogger(__name__)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def test_push_notification(request):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        user = request.user
        if not user.expo_push_token:
            return JsonResponse({'error': 'No push token'}, status=400)

        logger.info(f"üß™ [TEST] Sending test push to {user.username}")
        logger.info(f"üß™ [TEST] Token: {user.expo_push_token}")

        from .push_notifications import PushNotificationService

        result = PushNotificationService.send_message_notification(
            expo_tokens=[user.expo_push_token],
            sender_name="Test System",
            message_text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ push notifications",
            chat_id=999
        )

        logger.info(f"üß™ [TEST] Push notification result: {result}")

        return JsonResponse({
            'success': True,
            'message': 'Test notification sent',
            'token_preview': user.expo_push_token[:30] + '...'
        })

    except Exception as e:
        logger.error(f"‚ùå [TEST] Error sending test push: {e}")
        return JsonResponse({'error': str(e)}, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def debug_push_tokens(request):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ push —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        user = request.user
        logger.info(f"üîç [DEBUG] Checking push token for user {user.username}")

        user_data = {
            'user_id': user.id,
            'username': user.username,
            'has_push_token': bool(user.expo_push_token),
            'token_preview': user.expo_push_token,
            'is_active': user.is_active,
        }

        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        users_with_tokens = CustomUser.objects.filter(
            expo_push_token__isnull=False
        ).exclude(expo_push_token='').count()

        logger.info(f"üîç [DEBUG] Total users with push tokens: {users_with_tokens}")

        return JsonResponse({
            'current_user': user_data,
            'total_users_with_tokens': users_with_tokens,
        })

    except Exception as e:
        logger.error(f"‚ùå [DEBUG] Error in debug_push_tokens: {e}")
        return JsonResponse({'error': str(e)}, status=500)


class ChatViewSet(viewsets.GenericViewSet,
                  mixins.RetrieveModelMixin,
                  mixins.ListModelMixin):
    permission_classes = [IsAuthenticated]
    serializer_class = ChatRoomSerializer

    def get_queryset(self):
        user = self.request.user
        return PrivateChatRoom.objects.filter(
            Q(user1=user) | Q(user2=user)
        )

    @action(detail=False, methods=['get'])
    def list_preview(self, request):
        user = self.request.user

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_subquery = Subquery(
            PrivateMessage.objects.filter(
                room=OuterRef('pk')
            ).order_by('-timestamp')[:1].values('message')
        )

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time_subquery = Subquery(
            PrivateMessage.objects.filter(
                room=OuterRef('pk')
            ).order_by('-timestamp')[:1].values('timestamp')
        )

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        unread_count_subquery = Subquery(
            PrivateMessage.objects.filter(
                room=OuterRef('pk'),
                recipient=user,
                read=False
            ).values('room')
            .annotate(count=Count('id'))
            .values('count')
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        chats = PrivateChatRoom.objects.filter(
            Q(user1=user) | Q(user2=user)
        ).annotate(
            other_user=Case(
                When(user1=user, then=F('user2')),
                When(user2=user, then=F('user1')),
                output_field=IntegerField(),
            ),
            last_message=last_message_subquery,
            last_message_time=last_message_time_subquery,
            unread_count=Coalesce(unread_count_subquery, 0)
        ).select_related('user1', 'user2')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        chat_previews = []
        for chat in chats:
            if chat.last_message:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç—ã –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                chat_preview = {
                    'room': chat.id,
                    'other_user': chat.user2 if chat.user1 == user else chat.user1,
                    'last_message': chat.last_message,
                    'last_message_time': chat.last_message_time,
                    'unread_count': chat.unread_count
                }
                chat_previews.append(chat_preview)

        serializer = ChatPreviewSerializer(chat_previews, many=True)
        return Response(serializer.data)

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def save_push_token(request):
    try:
        expo_push_token = request.data.get('expo_push_token')
        if expo_push_token:
            request.user.expo_push_token = expo_push_token
            request.user.save()
            return Response({'success': True})
        return Response({'error': 'No token provided'}, status=400)
    except Exception as e:
        return Response({'error': str(e)}, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_room_info(request, room_id):
    try:
        room = PrivateChatRoom.objects.get(id=room_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_user = room.user2 if room.user1 == request.user else room.user1

        return Response({
            'user1_id': room.user1.id,
            'user2_id': room.user2.id,
            'other_user': {
                'id': other_user.id,
                'username': other_user.username,
                'avatar': other_user.avatar.url if other_user.avatar else None,
                'is_online': other_user.is_online
            }
        })
    except PrivateChatRoom.DoesNotExist:
        return Response({'error': 'Room not found'}, status=404)
