import logging

from django.contrib.auth import get_user_model
from django.db.models.functions import Coalesce
from django.views.decorators.csrf import csrf_exempt
from rest_framework import viewsets, status, mixins
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.db.models import Q, F, IntegerField, Case, When, Subquery, OuterRef, Count, CharField, Value
from .models import PrivateChatRoom, PrivateMessage
from .serializers import ChatRoomSerializer, ChatPreviewSerializer

logger = logging.getLogger(__name__)



class ChatViewSet(viewsets.GenericViewSet,
                  mixins.RetrieveModelMixin,
                  mixins.ListModelMixin):
    permission_classes = [IsAuthenticated]
    serializer_class = ChatRoomSerializer

    def get_queryset(self):
        user = self.request.user
        return PrivateChatRoom.objects.filter(
            Q(user1=user) | Q(user2=user)
        )

    @action(detail=False, methods=['get'],url_path='list-preview')
    def list_preview(self, request):
        user = self.request.user

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        last_message_subquery = Subquery(
            PrivateMessage.objects.filter(
                room=OuterRef('pk')
            ).order_by('-timestamp')[:1].annotate(
                formatted_message=Case(
                    When(media_type='image', then=Value('üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')),
                    When(media_type='video', then=Value('üé• –í–∏–¥–µ–æ')),
                    When(media_type='document', then=Value('üìÑ –î–æ–∫—É–º–µ–Ω—Ç')),
                    When(media_type='other', then=Value('üìé –§–∞–π–ª')),
                    default=F('message'),
                    output_field=CharField(),
                )
            ).values('formatted_message')
        )

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_time_subquery = Subquery(
            PrivateMessage.objects.filter(
                room=OuterRef('pk')
            ).order_by('-timestamp')[:1].values('timestamp')
        )

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        unread_count_subquery = Subquery(
            PrivateMessage.objects.filter(
                room=OuterRef('pk'),
                recipient=user,
                read=False
            ).values('room')
            .annotate(count=Count('id'))
            .values('count')
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        chats = PrivateChatRoom.objects.filter(
            Q(user1=user) | Q(user2=user)
        ).annotate(
            other_user=Case(
                When(user1=user, then=F('user2')),
                When(user2=user, then=F('user1')),
                output_field=IntegerField(),
            ),
            last_message=last_message_subquery,
            last_message_time=last_message_time_subquery,
            unread_count=Coalesce(unread_count_subquery, 0)
        ).select_related('user1', 'user2')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        chat_previews = []
        for chat in chats:
            # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º —á–∞—Ç—ã –¥–∞–∂–µ –µ—Å–ª–∏ last_message –ø—É—Å—Ç–æ–µ –∏–ª–∏ None
            # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –¥–ª—è —Å–æ–≤—Å–µ–º –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            if chat.last_message_time:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –≤—Ä–µ–º–µ–Ω–∏
                chat_preview = {
                    'id': chat.id,
                    'other_user': chat.user2 if chat.user1 == user else chat.user1,
                    'last_message': chat.last_message or 'üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª',  # Fallback –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    'last_message_time': chat.last_message_time,
                    'unread_count': chat.unread_count
                }
                chat_previews.append(chat_preview)

        serializer = ChatPreviewSerializer(chat_previews, many=True)
        return Response(serializer.data)




User = get_user_model()


@api_view(['POST'])
@permission_classes([IsAuthenticated])
@csrf_exempt
def save_push_token(request):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FCM –∏–ª–∏ Expo)
    """
    try:
        user = request.user
        data = request.data

        fcm_token = data.get('fcm_token')
        expo_token = data.get('expo_push_token')

        if fcm_token:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º FCM —Ç–æ–∫–µ–Ω
            logger.info(f"Saving FCM token for user {user.username}")
            user.fcm_token = fcm_token
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π expo —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(user, 'expo_push_token'):
                user.expo_push_token = None
            user.save()

            return Response({
                'success': True,
                'message': 'FCM token saved successfully',
                'token_type': 'fcm'
            })

        elif expo_token:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Expo —Ç–æ–∫–µ–Ω (fallback)
            logger.info(f"Saving Expo token for user {user.username}")
            if hasattr(user, 'expo_push_token'):
                user.expo_push_token = expo_token
            # –û—á–∏—â–∞–µ–º FCM —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(user, 'fcm_token'):
                user.fcm_token = None
            user.save()

            return Response({
                'success': True,
                'message': 'Expo token saved successfully',
                'token_type': 'expo'
            })
        else:
            return Response({
                'success': False,
                'error': 'No token provided'
            }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        logger.error(f"Error saving push token: {str(e)}")
        return Response({
            'success': False,
            'error': 'Internal server error'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_room_info(request, room_id):
    try:
        room = PrivateChatRoom.objects.get(id=room_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_user = room.user2 if room.user1 == request.user else room.user1

        return Response({
            'user1_id': room.user1.id,
            'user2_id': room.user2.id,
            'other_user': {
                'id': other_user.id,
                'username': other_user.username,
                'avatar': other_user.avatar.url if other_user.avatar else None,
                'is_online': other_user.is_online
            }
        })
    except PrivateChatRoom.DoesNotExist:
        return Response({'error': 'Room not found'}, status=404)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
@csrf_exempt
def delete_messages(request):
    """
    –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    """
    try:
        user = request.user
        data = request.data

        message_ids = data.get('message_ids', [])
        room_id = data.get('room_id')

        if not message_ids:
            return Response({
                'success': False,
                'error': 'No message IDs provided'
            }, status=status.HTTP_400_BAD_REQUEST)

        if not room_id:
            return Response({
                'success': False,
                'error': 'Room ID is required'
            }, status=status.HTTP_400_BAD_REQUEST)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞
        try:
            room = PrivateChatRoom.objects.get(
                Q(id=room_id) & (Q(user1=user) | Q(user2=user))
            )
        except PrivateChatRoom.DoesNotExist:
            return Response({
                'success': False,
                'error': 'Chat room not found or access denied'
            }, status=status.HTTP_403_FORBIDDEN)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω—ã
        messages_to_delete = PrivateMessage.objects.filter(
            id__in=message_ids,
            room=room,
            sender=user,  # –¢–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
            is_deleted=False
        )

        if not messages_to_delete.exists():
            return Response({
                'success': False,
                'error': 'No messages found or you can only delete your own messages'
            }, status=status.HTTP_404_NOT_FOUND)

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        from django.utils import timezone
        updated_count = messages_to_delete.update(
            is_deleted=True,
            deleted_at=timezone.now(),
            deleted_by=user
        )

        logger.info(f"User {user.username} deleted {updated_count} messages in room {room_id}")

        return Response({
            'success': True,
            'message': f'{updated_count} messages marked as deleted',
            'deleted_count': updated_count,
            'deleted_message_ids': list(messages_to_delete.values_list('id', flat=True))
        })

    except Exception as e:
        logger.error(f"Error deleting messages: {str(e)}")
        return Response({
            'success': False,
            'error': 'Internal server error'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
