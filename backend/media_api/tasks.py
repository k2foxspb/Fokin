from celery import shared_task
from django.core.cache import cache
from django.core.files.base import ContentFile
from PIL import Image
import subprocess
import os
import logging
from .models import VideoFile, ImageFile, UploadedFile

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3)
def compress_video_task(self, video_file_id):
    """
    –§–æ–Ω–æ–≤–æ–µ —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç H.264 –∫–æ–¥–µ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è web-—Å—Ç—Ä–∏–º–∏–Ω–≥–∞.
    """
    try:
        video = VideoFile.objects.get(id=video_file_id)

        logger.info(f'üöÄ [CELERY] Starting turbo video compression for file {video_file_id}')

        input_path = video.file.path
        output_filename = f'compressed_{os.path.basename(input_path)}'
        output_path = os.path.join(os.path.dirname(input_path), output_filename)

        # –¢—É—Ä–±–æ-—Å–∂–∞—Ç–∏–µ —Å H.264 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        compress_cmd = [
            'ffmpeg',
            '-i', input_path,
            '-c:v', 'libx264',  # H.264 –∫–æ–¥–µ–∫
            '-preset', 'veryfast',  # –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            '-crf', '23',  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ/—Ä–∞–∑–º–µ—Ä
            '-c:a', 'aac',  # AAC –∞—É–¥–∏–æ –∫–æ–¥–µ–∫
            '-b:a', '128k',  # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
            '-movflags', '+faststart',  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            '-pix_fmt', 'yuv420p',  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –ø–ª–µ–µ—Ä–æ–≤
            '-max_muxing_queue_size', '1024',  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            output_path
        ]

        result = subprocess.run(
            compress_cmd,
            capture_output=True,
            text=True,
            timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )

        if result.returncode == 0 and os.path.exists(output_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            original_size = os.path.getsize(input_path)
            compressed_size = os.path.getsize(output_path)
            compression_ratio = (1 - compressed_size / original_size) * 100

            logger.info(f'üöÄ [CELERY] Video compressed: {compression_ratio:.1f}% reduction')

            # –ï—Å–ª–∏ —Å–∂–∞—Ç–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ (–±–æ–ª—å—à–µ 10% —ç–∫–æ–Ω–æ–º–∏–∏), –∑–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
            if compression_ratio > 10:
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–∂–∞—Ç—ã–π
                os.remove(input_path)
                os.rename(output_path, input_path)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –ë–î
                video.file_size = compressed_size
                video.save(update_fields=['file_size'])

                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                cache_key = f'media_url_{video_file_id}'
                cache.delete(cache_key)

                logger.info(f'üöÄ [CELERY] ‚úÖ Video compression completed successfully')
            else:
                # –°–∂–∞—Ç–∏–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                os.remove(output_path)
                logger.info(f'üöÄ [CELERY] Compression ratio too low, keeping original')
        else:
            logger.error(f'üöÄ [CELERY] FFmpeg compression failed: {result.stderr}')
            raise Exception(f'FFmpeg failed: {result.stderr}')

    except VideoFile.DoesNotExist:
        logger.error(f'üöÄ [CELERY] Video file {video_file_id} not found')
    except subprocess.TimeoutExpired:
        logger.error(f'üöÄ [CELERY] Video compression timeout for {video_file_id}')
        raise self.retry(countdown=60)
    except Exception as e:
        logger.error(f'üöÄ [CELERY] Error compressing video: {e}')
        raise self.retry(exc=e, countdown=60)


@shared_task
def generate_video_thumbnail_task(video_file_id):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ.
    """
    try:
        video = VideoFile.objects.get(id=video_file_id)

        logger.info(f'üé¨ [CELERY] Generating thumbnail for video {video_file_id}')

        input_path = video.file.path
        thumbnail_filename = f'thumb_{video_file_id}.jpg'
        thumbnail_path = os.path.join(os.path.dirname(input_path), thumbnail_filename)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –Ω–∞ 1 —Å–µ–∫—É–Ω–¥–µ –≤–∏–¥–µ–æ
        thumbnail_cmd = [
            'ffmpeg',
            '-i', input_path,
            '-ss', '00:00:01.000',  # 1 —Å–µ–∫—É–Ω–¥–∞
            '-vframes', '1',  # –û–¥–∏–Ω –∫–∞–¥—Ä
            '-vf', 'scale=640:-1',  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 640px —à–∏—Ä–∏–Ω—ã
            '-y',
            thumbnail_path
        ]

        result = subprocess.run(
            thumbnail_cmd,
            capture_output=True,
            text=True,
            timeout=30
        )

        if result.returncode == 0 and os.path.exists(thumbnail_path):
            logger.info(f'üé¨ [CELERY] ‚úÖ Thumbnail generated successfully')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–µ–≤—å—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏)
            if hasattr(video, 'thumbnail'):
                with open(thumbnail_path, 'rb') as f:
                    video.thumbnail.save(thumbnail_filename, ContentFile(f.read()), save=True)
                os.remove(thumbnail_path)
        else:
            logger.error(f'üé¨ [CELERY] Thumbnail generation failed: {result.stderr}')

    except Exception as e:
        logger.error(f'üé¨ [CELERY] Error generating thumbnail: {e}')


@shared_task
def optimize_image_task(image_file_id):
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    try:
        image_file = ImageFile.objects.get(id=image_file_id)

        logger.info(f'üñºÔ∏è [CELERY] Optimizing image {image_file_id}')

        img_path = image_file.file.path

        with Image.open(img_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ
            max_dimension = 2048
            if img.width > max_dimension or img.height > max_dimension:
                img.thumbnail((max_dimension, max_dimension), Image.Resampling.LANCZOS)
                logger.info(f'üñºÔ∏è [CELERY] Image resized to fit {max_dimension}px')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            img.save(img_path, 'JPEG', quality=85, optimize=True, progressive=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        new_size = os.path.getsize(img_path)
        original_size = image_file.file_size
        reduction = (1 - new_size / original_size) * 100 if original_size > 0 else 0

        image_file.file_size = new_size
        image_file.save(update_fields=['file_size'])

        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
        cache_key = f'media_url_{image_file_id}'
        cache.delete(cache_key)

        logger.info(f'üñºÔ∏è [CELERY] ‚úÖ Image optimized: {reduction:.1f}% size reduction')

    except Exception as e:
        logger.error(f'üñºÔ∏è [CELERY] Error optimizing image: {e}')


@shared_task
def prefetch_media_urls_task(message_ids):
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    """
    try:
        from chatapp.models import Message, PrivateMessage

        logger.info(f'‚ö° [CELERY] Prefetching media URLs for {len(message_ids)} messages')

        cached_count = 0

        for message_id in message_ids:
            try:
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = None
                try:
                    message = Message.objects.get(id=message_id)
                except Message.DoesNotExist:
                    try:
                        message = PrivateMessage.objects.get(id=message_id)
                    except PrivateMessage.DoesNotExist:
                        continue

                if not message:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
                uploaded_file = None
                if hasattr(message, 'media_file') and message.media_file:
                    uploaded_file = message.media_file

                if uploaded_file:
                    # –ö—ç—à–∏—Ä—É–µ–º URL –Ω–∞ 1 —á–∞—Å
                    cache_key = f'media_url_{message_id}'
                    file_data = {
                        'file_id': uploaded_file.id,
                        'file_type': uploaded_file.file_type,
                        'file_url': uploaded_file.file.url,
                        'original_name': uploaded_file.original_name,
                        'size': uploaded_file.file_size,
                        'mime_type': uploaded_file.mime_type,
                    }

                    cache.set(cache_key, file_data, timeout=3600)  # 1 —á–∞—Å
                    cached_count += 1

            except Exception as msg_error:
                logger.error(f'‚ö° [CELERY] Error prefetching message {message_id}: {msg_error}')
                continue

        logger.info(f'‚ö° [CELERY] ‚úÖ Prefetched {cached_count} media URLs')

    except Exception as e:
        logger.error(f'‚ö° [CELERY] Error in prefetch task: {e}')


@shared_task
def cleanup_old_cache_task():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞.
    –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ Celery Beat –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.
    """
    try:
        logger.info('üßπ [CELERY] Starting cache cleanup')

        # Redis –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ - TTL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á–∏
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        logger.info('üßπ [CELERY] ‚úÖ Cache cleanup completed')

    except Exception as e:
        logger.error(f'üßπ [CELERY] Error during cache cleanup: {e}')
