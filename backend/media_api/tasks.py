# backend/media_api/tasks.py
import os
import subprocess
import logging
import tempfile

from celery import shared_task
from django.core.cache import cache
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from PIL import Image

from .models import VideoFile, ImageFile, UploadedFile

logger = logging.getLogger(__name__)


# -------------------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# -------------------------------------------------------------------------
def _download_to_temp(field_file):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç Django FieldFile –≤ —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    –§–∞–π–ª –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è ‚Äì —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥.
    """
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ–º –∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã ffmpeg / PIL "–ø–æ–Ω—è–ª–∏" —Ç–∏–ø
    suffix = os.path.splitext(field_file.name)[1] or ''
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    try:
        for chunk in field_file.chunks():
            tmp.write(chunk)
        tmp.flush()
        return tmp.name
    finally:
        tmp.close()


def _save_back_to_field(field_file, local_path, original_name=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ Django FieldFile.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω original_name ‚Äì –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    with open(local_path, 'rb') as f:
        content = ContentFile(f.read())
        # –ï—Å–ª–∏ –∏–º—è –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äì –ø—Ä–æ—Å—Ç–æ .save() –∑–∞–º–µ–Ω–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if original_name:
            field_file.save(original_name, content, save=True)
        else:
            field_file.save(field_file.name, content, save=True)


# -------------------------------------------------------------------------
# 1Ô∏è‚É£ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –≤–∏–¥–µ–æ
# -------------------------------------------------------------------------
@shared_task(bind=True, max_retries=3)
def compress_video_task(self, video_file_id):
    """
    –§–æ–Ω–æ–≤–æ–µ —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ back‚Äëends (S3, GCS, –ª–æ–∫–∞–ª—å–Ω–æ–µ FS –∏ —Ç.–ø.).
    """
    try:
        video = VideoFile.objects.get(id=video_file_id)
        logger.info(f'üöÄ [CELERY] Starting turbo video compression for file {video_file_id}')

        # ---- —Å–∫–∞—á–∏–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ----
        input_path = _download_to_temp(video.file)

        # ---- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ----
        base_dir, base_name = os.path.split(input_path)
        output_filename = f'compressed_{base_name}'
        output_path = os.path.join(base_dir, output_filename)
        vf = (
            # 1) –ü—Ä–∏–≤–æ–¥–∏–º –∫ –º–∞–∫—Å–∏–º—É–º—É 1280√ó720, —Å–æ—Ö—Ä–∞–Ω—è–µ–º aspect‚Äëratio
            "scale='if(gt(iw,1280),1280,iw)':'if(gt(ih,720),720,ih)',"
            # 2) –î–µ–ª–∞–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã —á—ë—Ç–Ω—ã–º–∏
            "scale=trunc(iw/2)*2:trunc(ih/2)*2"
        )
        # ---- –∫–æ–º–∞–Ω–¥–∞ ffmpeg ----
        compress_cmd = [
            'ffmpeg',
            '-y',
            '-i', input_path,
            '-c:v', 'libx264',
            '-profile:v', 'baseline',
            '-level', '3.0',
            '-preset', 'veryfast',
            '-crf', '23',
            '-vf', vf,
            '-c:a', 'aac',
            '-b:a', '128k',
            '-ar', '44100',
            '-movflags', '+faststart',
            '-pix_fmt', 'yuv420p',
            '-max_muxing_queue_size', '1024',
            '-y',
            output_path
        ]

        result = subprocess.run(
            compress_cmd,
            capture_output=True,
            text=True,
            timeout=600  # 10‚ÄØ–º–∏–Ω ‚Äì –º–∞–∫—Å–∏–º—É–º –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
        )

        # ---- –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ----
        if result.returncode == 0 and os.path.exists(output_path):
            original_size = os.path.getsize(input_path)
            compressed_size = os.path.getsize(output_path)
            compression_ratio = (1 - compressed_size / original_size) * 100

            logger.info(f'üöÄ [CELERY] Video compressed: {compression_ratio:.1f}% reduction')

            if compression_ratio > 10:  # —ç–∫–æ–Ω–æ–º–∏—è –±–æ–ª–µ–µ 10‚ÄØ%
                # –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
                _save_back_to_field(video.file, output_path, original_name=video.file.name)
                video.file_size = compressed_size
                video.save(update_fields=['file_size'])

                # –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
                cache_key = f'media_url_{video_file_id}'
                cache.delete(cache_key)

                logger.info('üöÄ [CELERY] ‚úÖ Video compression completed successfully')
            else:
                logger.info('üöÄ [CELERY] Compression ratio too low ‚Äì original file kept')
        else:
            logger.error(f'üöÄ [CELERY] FFmpeg failed: {result.stderr}')
            raise Exception(f'FFmpeg failed: {result.stderr}')

    except VideoFile.DoesNotExist:
        logger.error(f'üöÄ [CELERY] Video file {video_file_id} not found')
    except subprocess.TimeoutExpired:
        logger.error(f'üöÄ [CELERY] Video compression timeout for {video_file_id}')
        raise self.retry(countdown=60)
    except Exception as exc:
        logger.error(f'üöÄ [CELERY] Error compressing video {video_file_id}: {exc}')
        raise self.retry(exc=exc, countdown=60)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏
        for p in (locals().get('input_path'), locals().get('output_path')):
            if p and os.path.exists(p):
                try:
                    os.remove(p)
                except OSError:
                    pass


# -------------------------------------------------------------------------
# 2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã –≤–∏–¥–µ–æ
# -------------------------------------------------------------------------
@shared_task
def generate_video_thumbnail_task(video_file_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é‚Äë–∫–∞–¥—Ä (1‚Äë–π —Å–µ–∫—É–Ω–¥—ã) –∏–∑ –≤–∏–¥–µ–æ.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º –±–µ–∫–µ–Ω–¥–æ–º —Ñ–∞–π–ª–æ–≤.
    """
    try:
        video = VideoFile.objects.get(id=video_file_id)
        logger.info(f'üé¨ [CELERY] Generating thumbnail for video {video_file_id}')

        input_path = _download_to_temp(video.file)

        # –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä–µ
        thumb_path = os.path.join(
            os.path.dirname(input_path),
            f'thumb_{video_file_id}.jpg'
        )

        thumb_cmd = [
            'ffmpeg',
            '-i', input_path,
            '-ss', '00:00:01.000',
            '-vframes', '1',
            '-vf', 'scale=640:-1',
            '-y',
            thumb_path
        ]

        result = subprocess.run(
            thumb_cmd,
            capture_output=True,
            text=True,
            timeout=30
        )

        if result.returncode == 0 and os.path.exists(thumb_path):
            logger.info('üé¨ [CELERY] ‚úÖ Thumbnail generated')

            # –ï—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ VideoFile –µ—Å—Ç—å –ø–æ–ª–µ `thumbnail`
            if hasattr(video, 'thumbnail'):
                with open(thumb_path, 'rb') as f:
                    video.thumbnail.save(
                        os.path.basename(thumb_path),
                        ContentFile(f.read()),
                        save=True
                    )
        else:
            logger.error(f'üé¨ [CELERY] Thumbnail generation failed: {result.stderr}')

    except VideoFile.DoesNotExist:
        logger.error(f'üé¨ [CELERY] Video file {video_file_id} not found')
    except subprocess.TimeoutExpired:
        logger.error(f'üé¨ [CELERY] Thumbnail generation timeout for {video_file_id}')
    except Exception as exc:
        logger.error(f'üé¨ [CELERY] Error generating thumbnail: {exc}')
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for p in (locals().get('input_path'), locals().get('thumb_path')):
            if p and os.path.exists(p):
                try:
                    os.remove(p)
                except OSError:
                    pass


# -------------------------------------------------------------------------
# 3Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# -------------------------------------------------------------------------
@shared_task
def optimize_image_task(image_file_id):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –±–µ–∫–µ–Ω–¥—ã.
    """
    try:
        image_file = ImageFile.objects.get(id=image_file_id)
        logger.info(f'üñºÔ∏è [CELERY] Optimizing image {image_file_id}')

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        img_path = _download_to_temp(image_file.file)

        with Image.open(img_path) as img:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ RGB (–¥–ª—è JPEG)
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            max_dimension = 2048
            if img.width > max_dimension or img.height > max_dimension:
                img.thumbnail((max_dimension, max_dimension), Image.Resampling.LANCZOS)
                logger.info(f'üñºÔ∏è [CELERY] Image resized to ‚â§{max_dimension}px')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π JPEG
            img.save(img_path, 'JPEG', quality=85, optimize=True, progressive=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –±–∞–∑–µ
        new_size = os.path.getsize(img_path)
        image_file.file_size = new_size
        image_file.save(update_fields=['file_size'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º) —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        _save_back_to_field(image_file.file, img_path)

        # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞
        cache_key = f'media_url_{image_file_id}'
        cache.delete(cache_key)

        reduction = (1 - new_size / image_file.file_size) * 100 if image_file.file_size else 0
        logger.info(f'üñºÔ∏è [CELERY] ‚úÖ Image optimized, size reduced by {reduction:.1f}%')

    except ImageFile.DoesNotExist:
        logger.error(f'üñºÔ∏è [CELERY] Image file {image_file_id} not found')
    except Exception as exc:
        logger.error(f'üñºÔ∏è [CELERY] Error optimizing image: {exc}')
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if locals().get('img_path') and os.path.exists(img_path):
            try:
                os.remove(img_path)
            except OSError:
                pass


# -------------------------------------------------------------------------
# 4Ô∏è‚É£ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ URL‚Äë–æ–≤ –º–µ–¥–∏–∞
# -------------------------------------------------------------------------
@shared_task
def prefetch_media_urls_task(message_ids):
    """
    –ö–µ—à–∏—Ä—É–µ—Ç URL‚Äë—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ UI).
    """
    try:
        from chatapp.models import Message, PrivateMessage

        logger.info(f'‚ö° [CELERY] Prefetching media URLs for {len(message_ids)} messages')
        cached = 0

        for msg_id in message_ids:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—É–±–ª–∏—á–Ω–æ–µ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ)
                try:
                    message = Message.objects.get(id=msg_id)
                except Message.DoesNotExist:
                    message = PrivateMessage.objects.get(id=msg_id)
            except Exception:
                continue

            uploaded = getattr(message, 'media_file', None)
            if not uploaded:
                continue

            cache_key = f'media_url_{msg_id}'
            cache.set(
                cache_key,
                {
                    'file_id': uploaded.id,
                    'file_type': uploaded.file_type,
                    'file_url': uploaded.file.url,
                    'original_name': uploaded.original_name,
                    'size': uploaded.file_size,
                    'mime_type': uploaded.mime_type,
                },
                timeout=3600  # 1‚ÄØ—á–∞—Å
            )
            cached += 1

        logger.info(f'‚ö° [CELERY] ‚úÖ Prefetched {cached} media URLs')
    except Exception as exc:
        logger.error(f'‚ö° [CELERY] Error in prefetch task: {exc}')


# -------------------------------------------------------------------------
# 5Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è)
# -------------------------------------------------------------------------
@shared_task
def cleanup_old_cache_task():
    """
    –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Redis‚Äë–∫–µ—à, TTL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á–∏.
    –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ ¬´–∑–∞—Ç—ã—á–∫–∞¬ª, –µ—Å–ª–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ ¬´–∑–∞–≤–∏—Å—à–∏—Ö¬ª –∫–ª—é—á–µ–π).
    """
    try:
        logger.info('üßπ [CELERY] Starting cache cleanup')
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
        logger.info('üßπ [CELERY] ‚úÖ Cache cleanup completed')
    except Exception as exc:
        logger.error(f'üßπ [CELERY] Error during cache cleanup: {exc}')
