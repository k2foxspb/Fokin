# Generated by Django 4.2.6 on 2025-06-05 10:40

import authapp.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    replaces = [
        ("authapp", "0001_initial"),
        ("authapp", "0002_alter_customuser_email_alter_customuser_username"),
        ("authapp", "0003_customuser_gender"),
        ("authapp", "0004_customuser_is_online"),
        ("authapp", "0005_customuser_last_joined"),
        ("authapp", "0006_alter_customuser_is_online"),
    ]

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "error": "Пользователь с таким именем уже существует"
                        },
                        help_text="не более 35 символов. Только буквы, цифры и @/./+/-/_.",
                        max_length=35,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.ASCIIUsernameValidator()
                        ],
                        verbose_name="Логин",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="Имя"),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Фамилия"
                    ),
                ),
                (
                    "age",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Возраст"
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=authapp.models.users_avatars_path,
                        verbose_name="Ваше фото",
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        error_messages={
                            "error": "Пользователь с таким адресом электронной почты уже существует."
                        },
                        max_length=256,
                        unique=True,
                        verbose_name="адрес электронной почты",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Определяет, может ли пользователь войти в панель администратора.",
                        verbose_name="статус администратора",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Определяет, следует ли считать этого пользователя активным.             Снимите этот флажок вместо удаления учетных записей.",
                        verbose_name="Активен",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата регистрации"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "Мужчина"), ("female", "Женщина")],
                        default="male",
                        max_length=20,
                    ),
                ),
                (
                    "is_online",
                    models.CharField(
                        choices=[("online", "в сети"), ("offline", "не в сети")],
                        default="offline",
                        max_length=20,
                    ),
                ),
                (
                    "last_joined",
                    models.DateTimeField(auto_now=True, verbose_name="<UNK> <UNK>"),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
