import React, {createContext, useContext, useEffect, useState, useRef} from 'react';
import {useWebSocket} from '../hooks/useWebSocket';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import {router} from 'expo-router';
import {AppState, Platform} from 'react-native';
import axios from 'axios';
import {API_CONFIG} from '../config';

import {
    requestNotificationPermissions,
    registerForPushNotifications,
    sendHighPriorityNotification,
    addNotificationListener,
    addNotificationResponseListener,
    checkNotificationSettings
} from '../services/notificationService';

interface NotificationContextType {
    unreadCount: number;
    messages: MessageType[];
    senderCounts: Map<number, number>;
    userStatuses: Map<number, string>;
    connect: () => Promise<void>;
    disconnect: () => void;
    refreshNotifications: () => void;
    requestPermissions: () => Promise<boolean>;
    testNotification: () => Promise<void>;
    debugInfo: {
        isWebSocketConnected: boolean;
        hasPermission: boolean;
        pushToken: string | null;
    };
}

interface MessageType {
    sender_id: number;
    sender_name?: string;
    count: number;
    last_message?: string;
    timestamp?: string;
    chat_id?: number;
    message_id?: number;

}

interface NotificationData {
    type: string;
    unique_sender_count: number;
    messages: [{ user: string }, MessageType[]];
}

interface UserStatusUpdate {
    type: 'user_status_update';
    user_id: number;
    status: string;
}

const savePushTokenToServer = async (token: string) => {
    try {
        const userToken = await AsyncStorage.getItem('userToken');
        if (!userToken) return;
        console.log('üîî [PRODUCTION] Saving token to server:', token.substring(0, 20) + '...');
        const response = await axios.post(
            `${API_CONFIG.BASE_URL}/chat/api/save-push-token/`,
            {expo_push_token: token},
            {headers: {'Authorization': `Token ${userToken}`}}
        );

        console.log('‚úÖ [Notification] Push token saved to server');
    } catch (error) {
        console.error('‚ùå [Notification] Failed to save push token:', error);
    }
};

const NotificationContext = createContext<NotificationContextType>({
    unreadCount: 0,
    messages: [],
    senderCounts: new Map(),
    userStatuses: new Map(),
    connect: async () => Promise.resolve(),
    disconnect: () => {
    },
    refreshNotifications: () => {
    },
    requestPermissions: async () => false,
    testNotification: async () => Promise.resolve(),
    debugInfo: {
        isWebSocketConnected: false,
        hasPermission: false,
        pushToken: null,
    },
});


export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {
    const [unreadCount, setUnreadCount] = useState<number>(0);
    const [messages, setMessages] = useState<MessageType[]>([]);
    const [senderCounts, setSenderCounts] = useState<Map<number, number>>(new Map());
    const [userStatuses, setUserStatuses] = useState<Map<number, string>>(new Map());
    const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
    const [hasNotificationPermission, setHasNotificationPermission] = useState<boolean>(false);
    const [pushToken, setPushToken] = useState<string | null>(null);
    const [wsConnected, setWsConnected] = useState<boolean>(false);
    const [isInitialized, setIsInitialized] = useState<boolean>(false);
    const [lastMessageTimestamp, setLastMessageTimestamp] = useState<number>(0);
    const [reconnectAttempts, setReconnectAttempts] = useState<number>(0);

    const appState = useRef(AppState.currentState);
    const notificationListener = useRef<Notifications.Subscription | null>(null);
    const responseListener = useRef<Notifications.Subscription | null>(null);
    const previousMessagesRef = useRef<MessageType[]>([]);
    const checkConnectionIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const lastPingTimeRef = useRef<number>(Date.now());
    const sentNotificationsCache = useRef<Set<string>>(new Set()); // –ö–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const checkNotificationChannels = async () => {
            try {
                if (Platform.OS === 'android') {
                    const channels = await Notifications.getNotificationChannelsAsync();
                    console.log('üîî [Notification] Available channels:', channels);

                    const messagesChannel = channels.find(ch => ch.id === 'messages');
                    console.log('üîî [Notification] Messages channel:', messagesChannel);

                    if (!messagesChannel) {
                        console.log('‚ö†Ô∏è [Notification] Messages channel not found, creating...');
                        await Notifications.setNotificationChannelAsync('messages', {
                            name: '–°–æ–æ–±—â–µ–Ω–∏—è',
                            importance: Notifications.AndroidImportance.HIGH,
                            sound: 'default',
                            enableVibrate: true,
                            showBadge: true,
                        });
                    }
                }
            } catch (error) {
                console.error('‚ùå [Notification] Error checking channels:', error);
            }
        };

        if (isAuthenticated && hasNotificationPermission) {
            checkNotificationChannels();
        }
    }, [isAuthenticated, hasNotificationPermission]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const checkAuth = async () => {
            try {
                const token = await AsyncStorage.getItem('userToken');
                setIsAuthenticated(!!token);

                if (token) {
                    console.log('üîë [Notification] User is authenticated');
                } else {
                    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –¥–ª—è –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                }
            } catch (error) {
                console.error('‚ùå [Notification] Error checking auth:', error);
                setIsAuthenticated(false);
            }
        };

        checkAuth();
    }, []);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const requestPermissions = async (): Promise<boolean> => {
        try {
            console.log('üîî [Notification] Requesting notification permissions...');

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            const currentPermissions = await Notifications.getPermissionsAsync();
            console.log('üîî [Notification] Current permissions:', currentPermissions);

            let hasPermission = currentPermissions.status === 'granted';
            console.log('üîî [Notification] Current permission status:', hasPermission);

            if (!hasPermission) {
                console.log('üîî [Notification] Requesting new permissions...');
                hasPermission = await requestNotificationPermissions();
                console.log('üîî [Notification] Permission request result:', hasPermission);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setHasNotificationPermission(hasPermission);

            // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º push token
            if (hasPermission) {
                const token = await registerForPushNotifications();
                if (token) {
                    setPushToken(token);
                    await savePushTokenToServer(token);
                    console.log('üì± [Notification] Push token registered and saved');
                }
                setIsInitialized(true);
            }

            console.log('üîî [Notification] Final permission state:', hasPermission);
            return hasPermission;
        } catch (error) {
            console.error('‚ùå [Notification] Error requesting permissions:', error);
            setHasNotificationPermission(false);
            return false;
        }
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const initNotifications = async () => {
            try {
                console.log('üîÑ [Notification] Initializing notifications...');

                await checkNotificationSettings();

                const currentPermissions = await Notifications.getPermissionsAsync();
                const permissionGranted = currentPermissions.status === 'granted';

                console.log('üîî [Notification] Permission check:', {
                    status: currentPermissions.status,
                    granted: permissionGranted,
                    canAskAgain: currentPermissions.canAskAgain
                });

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                setHasNotificationPermission(permissionGranted);
                console.log('üîî [Notification] Setting hasNotificationPermission to:', permissionGranted);

                if (permissionGranted) {
                    console.log('‚úÖ [Notification] Permissions already granted');

                    if (!pushToken) {
                        const token = await registerForPushNotifications();
                        if (token) {
                            setPushToken(token);
                            await savePushTokenToServer(token);
                        }
                        console.log('üì± [Notification] Push token:', token ? token.substring(0, 10) + '...' : 'None');
                    }

                    setIsInitialized(true);
                    console.log('‚úÖ [Notification] Setting initialized to true (permissions exist)');

                } else if (currentPermissions.canAskAgain) {
                    console.log('üîî [Notification] Can ask for permissions, requesting...');
                    await requestPermissions();
                    console.log('üîî [Notification] Permission request completed');
                } else {
                    console.log('‚ö†Ô∏è [Notification] Cannot ask for permissions again');
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if (notificationListener.current) {
                    notificationListener.current.remove();
                }

                notificationListener.current = addNotificationListener((notification: Notifications.Notification) => {
                    console.log('üì¨ [Notification] Received while app running:', notification.request.identifier);
                    if (isAuthenticated) {
                        refreshNotifications();
                    }
                });

                if (responseListener.current) {
                    responseListener.current.remove();
                }

                responseListener.current = addNotificationResponseListener((response: Notifications.NotificationResponse) => {
                    console.log('üëÜ [Notification] User responded to notification:', response.notification.request.identifier);
                    handleNotificationResponse(response);
                });

                // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const subscription = AppState.addEventListener('change', nextAppState => {
                    console.log(`üîÑ [Notification] App state changed: ${appState.current} -> ${nextAppState}`);

                    if (appState.current.match(/inactive|background/) && nextAppState === 'active') {
                        console.log('üîÑ [Notification] App came to foreground, refreshing...');
                        if (isAuthenticated) {
                            refreshNotifications();
                        }
                    } else if (appState.current === 'active' && nextAppState.match(/inactive|background/)) {
                        console.log('üí§ [Notification] App went to background');
                    }

                    appState.current = nextAppState;
                });

                return () => {
                    if (notificationListener.current) {
                        notificationListener.current.remove();
                    }
                    if (responseListener.current) {
                        responseListener.current.remove();
                    }
                    subscription.remove();
                };
            } catch (error) {
                console.error('‚ùå [Notification] Error in initNotifications:', error);
            }
        };

        if (isAuthenticated) {
            console.log('üîÑ [Notification] Initializing notifications (auth changed)');
            initNotifications();
        }

    }, [isAuthenticated]);


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    useEffect(() => {
        const checkLaunchNotification = async () => {
            const lastNotificationResponse = await Notifications.getLastNotificationResponseAsync();
            if (lastNotificationResponse) {
                console.log('üöÄ [Notification] App launched from notification');
                setTimeout(() => {
                    handleNotificationResponse(lastNotificationResponse);
                }, 1000);
            }
        };

        if (isAuthenticated) {
            checkLaunchNotification();
        }
    }, [isAuthenticated]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const handleNotificationResponse = (response: Notifications.NotificationResponse) => {
        try {
            const data = response.notification.request.content.data;
            console.log('üîç [Notification] Handling response with data:', data);

            if (isAuthenticated) {
                refreshNotifications();
            }

            if (data && data.type === 'message_notification') {
                if (data.chatId) {
                    console.log('üîÄ [Notification] Navigating to chat:', data.chatId);
                    router.push({
                        pathname: '/chat/[id]',
                        params: {
                            "id": String(data.chatId),
                            "userId": String(data.senderId)
                        }
                    });
                } else {
                    console.log('üîÄ [Notification] Navigating to messages list');
                    router.push('/(main)/messages');
                }
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error handling notification response:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const testNotification = async () => {
        try {
            console.log('üß™ [Notification] Testing notification...');
            const testResult = await sendHighPriorityNotification({
                title: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                body: "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!",
                data: {
                    type: "test",
                    timestamp: Date.now()
                }
            });
            console.log('‚úÖ [Notification] Test notification result:', testResult);
        } catch (error) {
            console.error('‚ùå [Notification] Test notification error:', error);
        }
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const sendNotificationWithUserData = async (messageArray: MessageType[]) => {
        console.log('üì§ [Notification] ===== sendNotificationWithUserData STARTED =====');
        console.log('üì§ [Notification] Function arguments:', {
            messageArrayLength: messageArray?.length,
            messageArray: JSON.stringify(messageArray, null, 2)
        });

        try {
            console.log('üì§ [Notification] ===== INSIDE TRY BLOCK =====');
            console.log('üì§ [Notification] App current state:', AppState.currentState);
            console.log('üì§ [Notification] hasNotificationPermission:', hasNotificationPermission);

            if (!hasNotificationPermission) {
                console.log('‚ö†Ô∏è [Notification] BLOCKED: No permission to show notifications');
                console.log('üîî [Notification] Attempting to request permissions...');
                const granted = await requestPermissions();
                console.log('üîî [Notification] Permission request result:', granted);
                if (!granted) {
                    console.log('‚ùå [Notification] Still no permissions after request, RETURNING');
                    return;
                }
                console.log('‚úÖ [Notification] Permissions granted, continuing with notification');
            }

            if (!messageArray || messageArray.length === 0) {
                console.log('‚ö†Ô∏è [Notification] BLOCKED: No messages to show notification for, RETURNING');
                return;
            }

            console.log('üì§ [Notification] Passed all initial checks, continuing...');

            // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const mostActiveMsg = messageArray.find(msg =>
                msg.count === Math.max(...messageArray.map(m => m.count))
            ) || messageArray[0];

            console.log('üì§ [Notification] mostActiveMsg:', JSON.stringify(mostActiveMsg, null, 2));

            const currentTime = Date.now();
            console.log('‚è±Ô∏è [Notification] Time check:', {
                currentTime,
                lastMessageTimestamp,
                diff: currentTime - lastMessageTimestamp,
                threshold: 2000
            });

            // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (currentTime - lastMessageTimestamp < 500) {
                console.log('‚è±Ô∏è [Notification] BLOCKED: Too soon after previous notification, RETURNING');
                return;
            }

            console.log('‚è±Ô∏è [Notification] Time check passed, continuing...');

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const notificationKey = `${mostActiveMsg.sender_id}_${mostActiveMsg.message_id}_${mostActiveMsg.count}`;
            console.log('üîë [Notification] Notification key:', notificationKey);


            if (sentNotificationsCache.current.has(notificationKey)) {
                console.log('üîÑ [Notification] BLOCKED: Notification already sent for this message');
                return;
            }
            sentNotificationsCache.current.add(notificationKey);
            setTimeout(() => {
                sentNotificationsCache.current.delete(notificationKey);
            }, 10 * 60 * 1000);


            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö WebSocket
            let senderInfo = mostActiveMsg.sender_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${mostActiveMsg.sender_id}`;
            let notificationBody = mostActiveMsg.last_message || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';

            console.log('üì§ [Notification] Notification content:', {
                sender: senderInfo,
                message: notificationBody,
                senderName: mostActiveMsg.sender_name,
                lastMessage: mostActiveMsg.last_message
            });

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            if (notificationBody.length > 50) {
                notificationBody = notificationBody.substring(0, 50) + '...';
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–∞–∑–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
            if (messageArray.length > 1) {
                const totalMessages = messageArray.reduce((sum, msg) => sum + msg.count, 0);
                notificationBody += ` (–∏ –µ—â–µ ${totalMessages - mostActiveMsg.count} –æ—Ç –¥—Ä—É–≥–∏—Ö)`;
            } else if (mostActiveMsg.count > 1) {
                // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                notificationBody += ` (+${mostActiveMsg.count - 1})`;
            }

            setLastMessageTimestamp(currentTime);

            console.log('üì± [Notification] ===== CALLING sendHighPriorityNotification =====');
            console.log('üì± [Notification] Final notification data:', {
                title: `üíå ${senderInfo}`,
                body: notificationBody,
                data: {
                    type: 'message_notification',
                    timestamp: currentTime,
                    sender_id: mostActiveMsg.sender_id,
                    message_count: mostActiveMsg.count,
                    chatId: mostActiveMsg.chat_id,
                    category: 'message',
                    notification_id: currentTime.toString()
                }
            });

            const notificationResult = await sendHighPriorityNotification({
                title: `üíå ${senderInfo}`,
                body: notificationBody,
                data: {
                    type: 'message_notification',
                    timestamp: currentTime,
                    sender_id: mostActiveMsg.sender_id,
                    message_count: mostActiveMsg.count,
                    chatId: mostActiveMsg.chat_id,
                    category: 'message',
                    notification_id: currentTime.toString()
                }
            });

            console.log('‚úÖ [Notification] ===== NOTIFICATION SENT SUCCESSFULLY =====');
            console.log('‚úÖ [Notification] Result ID:', notificationResult);

            // –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
            setTimeout(() => {
                console.log('üìã [Notification] Notification should be visible now');
                console.log('üìã [Notification] Check your device notification panel');
            }, 1000);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sentNotificationsCache.current.add(notificationKey);

            // –û—á–∏—â–∞–µ–º –∫–µ—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            if (sentNotificationsCache.current.size > 50) {
                const entries = Array.from(sentNotificationsCache.current);
                sentNotificationsCache.current.clear();
                entries.slice(-25).forEach(key => sentNotificationsCache.current.add(key));
            }
        } catch (error) {
            console.error('‚ùå [Notification] ===== ERROR IN sendNotificationWithUserData =====');
            console.error('‚ùå [Notification] Error details:', error);
            console.error('‚ùå [Notification] Error stack:', error instanceof Error ? error.stack : 'No stack trace');
        } finally {
            console.log('üì§ [Notification] ===== sendNotificationWithUserData FINISHED =====');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const sendPing = () => {
        if (isConnected()) {
            console.log('üì° [Notification] Sending ping');
            sendMessage({type: 'ping'});
            lastPingTimeRef.current = Date.now();
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const checkConnection = () => {
        const now = Date.now();
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
        if (now - lastPingTimeRef.current > 30000 && isConnected()) {
            console.log('‚ö†Ô∏è [Notification] Connection may be stale, reconnecting...');
            reconnect();
        }
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    const handleMessage = (event: WebSocketMessageEvent) => {
        try {
            const data = JSON.parse(event.data);
            console.log('üì® [Notification] WebSocket received:', data.type, data);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            lastPingTimeRef.current = Date.now();

            // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (reconnectAttempts > 0) {
                setReconnectAttempts(0);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏–Ω–≥–∞
            if (data.type === 'pong') {
                console.log('üì° [Notification] Received pong');
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (data.type === 'user_status_update') {
                const statusUpdate = data as UserStatusUpdate;
                setUserStatuses(prevStatuses => {
                    const newStatuses = new Map(prevStatuses);
                    newStatuses.set(statusUpdate.user_id, statusUpdate.status);
                    return newStatuses;
                });
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if (data.type === 'notification_update' || data.type === 'new_message_notification') {
                console.log('üîî [Notification] Real-time notification received');

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                let messageArray: MessageType[] = [];
                if (data.messages && Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        messageArray = data.messages[1];
                    } else {
                        messageArray = data.messages;
                    }
                }

                if (messageArray && messageArray.length > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setMessages(messageArray);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    const newSenderCounts = new Map<number, number>();
                    messageArray.forEach(message => {
                        newSenderCounts.set(message.sender_id, message.count);
                    });
                    setSenderCounts(newSenderCounts);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    } else {
                        setUnreadCount(messageArray.length);
                    }

                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    if (hasNotificationPermission && AppState.currentState !== 'active') {
                        console.log('üì± [Notification] Will show notification for notification_update/new_message_notification');
                        setTimeout(() => {
                            sendNotificationWithUserData(messageArray);
                        }, 300);
                    }
                }
                return;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (data.type === 'individual_message') {
                const messageData = data.message;
                if (messageData) {
                    console.log('üîî [Notification] ===== PROCESSING individual_message =====');
                    console.log(`üîî [Notification] Individual message from ${messageData.sender_id}: ${messageData.count} messages`);
                    console.log('üîî [Notification] messageData:', JSON.stringify(messageData, null, 2));

                    // –û–±–Ω–æ–≤–ª—è–µ–º Map –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    setSenderCounts(prevCounts => {
                        const newCounts = new Map(prevCounts);
                        newCounts.set(messageData.sender_id, messageData.count);
                        console.log('üîî [Notification] Updated senderCounts:', Array.from(newCounts.entries()));
                        return newCounts;
                    });

                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(prevMessages => {
                        console.log('üîî [Notification] Previous messages:', JSON.stringify(prevMessages, null, 2));

                        // –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        const index = prevMessages.findIndex(msg => msg.sender_id === messageData.sender_id);
                        console.log('üîî [Notification] Found existing message index:', index);

                        let updatedMessages;
                        if (index !== -1) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages];
                            updatedMessages[index] = messageData;
                            console.log('üîî [Notification] Updated existing message');
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages, messageData];
                            console.log('üîî [Notification] Added new message');
                        }

                        console.log('üîî [Notification] Updated messages:', JSON.stringify(updatedMessages, null, 2));

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        const previousMsg = previousMessagesRef.current.find(m => m.sender_id === messageData.sender_id);

                        // –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        const isNewOrUpdated = true; // –í—Å–µ–≥–¥–∞ true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

                        console.log('üîî [Notification] FORCED isNewOrUpdated = true for testing');

                        console.log('üîî [Notification] Message comparison:', {
                            hasPreviousMsg: !!previousMsg,
                            previousCount: previousMsg?.count || 0,
                            newCount: messageData.count,
                            countIncreased: messageData.count > (previousMsg?.count || 0),
                            previousMessageId: previousMsg?.message_id || 0,
                            newMessageId: messageData.message_id,
                            messageIdChanged: messageData.message_id !== (previousMsg?.message_id || 0),
                            previousTimestamp: previousMsg?.timestamp || 0,
                            newTimestamp: messageData.timestamp,
                            timestampChanged: messageData.timestamp !== (previousMsg?.timestamp || 0),
                            previousLastMessage: previousMsg?.last_message?.substring(0, 20) || '',
                            newLastMessage: messageData.last_message?.substring(0, 20) || '',
                            finalResult: isNewOrUpdated
                        });


                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
                        console.log('üîî [Notification] Checking conditions: isNewOrUpdated =', isNewOrUpdated, 'hasNotificationPermission =', hasNotificationPermission);
                        if (isNewOrUpdated && hasNotificationPermission) {
                            console.log('üì± [Notification] ===== WILL CALL sendNotificationWithUserData =====');
                            console.log('üì± [Notification] Calling setTimeout...');
                            console.log('üì± [Notification] messageData:', JSON.stringify(messageData, null, 2));
                            setTimeout(async () => {
                                console.log('üì± [Notification] ===== setTimeout EXECUTED =====');
                                console.log('üì± [Notification] About to call sendNotificationWithUserData...');
                                try {
                                    await sendNotificationWithUserData([messageData]);
                                    console.log('üì± [Notification] sendNotificationWithUserData completed');
                                } catch (error) {
                                    console.error('üì± [Notification] Error in sendNotificationWithUserData:', error);
                                }
                            }, 300);
                        } else {
                            console.log('üì± [Notification] ===== NOTIFICATION BLOCKED =====');
                            console.log('üì± [Notification] Block reasons:', {
                                isNewOrUpdatedFailed: !isNewOrUpdated,
                                hasNotificationPermissionFailed: !hasNotificationPermission,
                                appIsActive: AppState.currentState === 'active'
                            });
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        previousMessagesRef.current = updatedMessages;
                        console.log('üîî [Notification] Updated previousMessagesRef');

                        return updatedMessages;
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                    if (data.unique_sender_count !== undefined) {
                        console.log('üîî [Notification] Setting unreadCount from server:', data.unique_sender_count);
                        setUnreadCount(data.unique_sender_count);
                    }
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (data.type === 'initial_notification' || data.type === 'messages_by_sender_update') {
                console.log(`üîÑ [Notification] Received ${data.type}`);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                let messageArray: MessageType[] = [];

                if (Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        // –§–æ—Ä–º–∞—Ç [user_info, message_array]
                        messageArray = data.messages[1];
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                        messageArray = data.messages;
                    }
                }

                if (messageArray && messageArray.length > 0) {
                    console.log(`üì• [Notification] Received ${messageArray.length} messages`);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(messageArray);

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    const newSenderCounts = new Map<number, number>();
                    messageArray.forEach(message => {
                        newSenderCounts.set(message.sender_id, message.count);
                    });

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                    setSenderCounts(newSenderCounts);

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    } else {
                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å—á–µ—Ç—á–∏–∫, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                        setUnreadCount(messageArray.length);
                    }

                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–æ –Ω–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
                    if (data.type === 'messages_by_sender_update' && AppState.currentState !== 'active') {
                        const previousMessages = previousMessagesRef.current;
                        const hasChanges = messageArray.some(newMsg => {
                            const prevMsg = previousMessages.find(m => m.sender_id === newMsg.sender_id);
                            return !prevMsg || newMsg.count > prevMsg.count;
                        });

                        console.log('üîî [Notification] messages_by_sender_update check:', {
                            hasChanges,
                            hasNotificationPermission
                        });

                        if (hasChanges && hasNotificationPermission) {
                            console.log('üì± [Notification] Will show notification for messages_by_sender_update');
                            setTimeout(() => {
                                sendNotificationWithUserData(messageArray);
                            }, 300);
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    previousMessagesRef.current = [...messageArray];

                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if (!isInitialized) {
                        setIsInitialized(true);
                        console.log('üîÑ [Notification] Set isInitialized to true');
                    }
                } else {
                    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    console.log('üì≠ [Notification] No messages received');
                    setSenderCounts(new Map());
                    setUnreadCount(0);
                    setMessages([]);
                    previousMessagesRef.current = [];

                    // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if (!isInitialized) {
                        setIsInitialized(true);
                        console.log('üîÑ [Notification] Set isInitialized to true (empty messages)');
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error processing WebSocket message:', error);
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
    const {connect, disconnect, sendMessage, isConnected, reconnect} = useWebSocket(`/wss/notification/`, {
        onOpen: () => {
            console.log('‚úÖ [Notification] WebSocket connected');
            setWsConnected(true);
            setReconnectAttempts(0);
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            previousMessagesRef.current = [];
            sentNotificationsCache.current.clear();
            console.log('üîÑ [Notification] Reset caches on reconnect');
            sendMessage({type: 'get_initial_data'});
            lastPingTimeRef.current = Date.now();
            setTimeout(async () => {
                try {
                    const currentPermissions = await Notifications.getPermissionsAsync();
                    const permissionGranted = currentPermissions.status === 'granted';
                    console.log('üîß [Notification] Force sync permissions after WebSocket connect:', permissionGranted);
                    setHasNotificationPermission(permissionGranted);
                } catch (error) {
                    console.error('‚ùå [Notification] Error syncing permissions:', error);
                }
            }, 1000);

        },
        onMessage: handleMessage,
        onClose: (event: any) => {
            console.log(`üîå [Notification] WebSocket closed: ${event.code} ${event.reason}`);
            setWsConnected(false);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const newAttempts = reconnectAttempts + 1;
            setReconnectAttempts(newAttempts);

            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥
            if (newAttempts < 10) {
                const reconnectDelay = Math.min(1000 * Math.pow(2, newAttempts), 30000);
                console.log(`üîÑ [Notification] Will reconnect in ${reconnectDelay}ms (attempt ${newAttempts})`);
            }
        },
        onError: (error: any) => {
            console.error('‚ùå [Notification] WebSocket error:', error);
            setWsConnected(false);
        },
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const refreshNotifications = () => {
        if (isConnected()) {
            console.log('üîÑ [Notification] Refreshing notifications');
            sendMessage({type: 'get_initial_data'});
            lastPingTimeRef.current = Date.now();
        } else {
            console.log('üîÑ [Notification] Connection lost, reconnecting...');
            reconnect();
        }
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        if (isAuthenticated) {
            console.log('üîó [Notification] Connecting WebSocket (auth state changed)');
            connect();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–∏–Ω–≥–∏
            if (checkConnectionIntervalRef.current) {
                clearInterval(checkConnectionIntervalRef.current);
            }

            checkConnectionIntervalRef.current = setInterval(() => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                sendPing();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                checkConnection();
            }, 15000);
        }

        return () => {
            if (isAuthenticated) {
                console.log('üîå [Notification] Disconnecting WebSocket (unmount)');
                disconnect();

                if (checkConnectionIntervalRef.current) {
                    clearInterval(checkConnectionIntervalRef.current);
                    checkConnectionIntervalRef.current = null;
                }
            }
        };
    }, [isAuthenticated]);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    useEffect(() => {
        let interval: NodeJS.Timeout | null = null;

        if (isAuthenticated && wsConnected) {
            interval = setInterval(() => {
                console.log('‚è±Ô∏è [Notification] Periodic refresh');
                refreshNotifications();
            }, 60000);  // –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        }

        return () => {
            if (interval) {
                clearInterval(interval);
            }
        };
    }, [isAuthenticated, wsConnected]);

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = {
        unreadCount,
        messages,
        senderCounts,
        userStatuses,
        connect,
        disconnect,
        refreshNotifications,
        requestPermissions,
        testNotification,
        debugInfo: {
            isWebSocketConnected: wsConnected,
            hasPermission: hasNotificationPermission,
            pushToken,
        },
    };

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};

export const useNotifications = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotifications must be used within a NotificationProvider');
    }
    return context;
};