import React, {createContext, useContext, useEffect, useState, useRef} from 'react';
import {useWebSocket} from '../hooks/useWebSocket';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import {router} from 'expo-router';
import {AppState, Platform, Vibration} from 'react-native';
import axios from 'axios';
import {API_CONFIG} from '../config';

import {
    requestNotificationPermissions,
    registerForPushNotifications,
        sendHighPriorityNotification,
    addNotificationListener,
    addNotificationResponseListener,
} from '../services/notificationService';

import FirebaseNotificationService from '../services/firebaseNotificationService';

interface NotificationContextType {
    unreadCount: number;
    messages: MessageType[];
    senderCounts: Map<number, number>;
    userStatuses: Map<number, string>;
    connect: () => Promise<void>;
    disconnect: () => void;
    refreshNotifications: () => void;
    requestPermissions: () => Promise<boolean>;
    checkFirebaseStatus: () => Promise<{
        success: boolean;
        token?: string | null;
        error?: any;
    }>;
    debugInfo: {
        isWebSocketConnected: boolean;
        hasPermission: boolean;
        pushToken: string | null;
    };
}

interface MessageType {
    sender_id: number;
    sender_name?: string;
    count: number;
    last_message?: string;
    timestamp?: string;
    chat_id?: number;
    message_id?: number;
}

interface NotificationData {
    type: string;
    unique_sender_count: number;
    messages: [{ user: string }, MessageType[]];
}

interface UserStatusUpdate {
    type: 'user_status_update';
    user_id: number;
    status: string;
}

const savePushTokenToServer = async (token: string) => {
    try {

        // –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–∫–ª–æ–Ω—è–µ–º –ª—é–±—ã–µ Expo —Ç–æ–∫–µ–Ω—ã
        if (token.startsWith('ExponentPushToken')) {
            console.error('üî• [FCM] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Expo —Ç–æ–∫–µ–Ω - –æ—Ç–∫–ª–æ–Ω—è–µ–º');
            console.error('üî• [FCM] ‚ùå Expo —Ç–æ–∫–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return;
        }

        const userToken = await AsyncStorage.getItem('userToken');
        if (!userToken) {
            console.error('üî• [FCM] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞');
            return;
        }


        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û FCM —Ç–æ–∫–µ–Ω
        const payload = { fcm_token: token };

        const response = await axios.post(
            `${API_CONFIG.BASE_URL}/chat/api/save-push-token/`,
            payload,
            {headers: {'Authorization': `Token ${userToken}`}}
        );


        if (response.status === 200) {
        } else {
            console.warn('üî• [FCM] –ù–µ–æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', response.status);
        }
    } catch (error) {
        console.error('üî• [FCM] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', error);

        if (axios.isAxiosError(error)) {
            console.error('üî• [FCM] –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response?.status);
            console.error('üî• [FCM] –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response?.data);
        }
    }
};

const NotificationContext = createContext<NotificationContextType>({
    unreadCount: 0,
    messages: [],
    senderCounts: new Map(),
    userStatuses: new Map(),
    connect: async () => Promise.resolve(),
    disconnect: () => {
    },
    refreshNotifications: () => {
    },
    requestPermissions: async () => false,
    checkFirebaseStatus: async () => ({success: false, error: 'Not initialized'}),
    debugInfo: {
        isWebSocketConnected: false,
        hasPermission: false,
        pushToken: null,
    },
});


export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {
    const [unreadCount, setUnreadCount] = useState<number>(0);
    const [messages, setMessages] = useState<MessageType[]>([]);
    const [senderCounts, setSenderCounts] = useState<Map<number, number>>(new Map());
    const [userStatuses, setUserStatuses] = useState<Map<number, string>>(new Map());
    const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
    const [hasNotificationPermission, setHasNotificationPermission] = useState<boolean>(false);
    const [pushToken, setPushToken] = useState<string | null>(null);
    const [wsConnected, setWsConnected] = useState<boolean>(false);
    const [isInitialized, setIsInitialized] = useState<boolean>(false);
    const [lastMessageTimestamp, setLastMessageTimestamp] = useState<number>(0);
    const [reconnectAttempts, setReconnectAttempts] = useState<number>(0);
    const [isUsingFirebaseNavigation, setIsUsingFirebaseNavigation] = useState<boolean>(false);

    const appState = useRef(AppState.currentState);
    const notificationListener = useRef<Notifications.Subscription | null>(null);
    const responseListener = useRef<Notifications.Subscription | null>(null);
    const previousMessagesRef = useRef<MessageType[]>([]);
    const checkConnectionIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const lastPingTimeRef = useRef<number>(Date.now());
    // const sentNotificationsCache = useRef<Set<string>>(new Set()); // –£–¥–∞–ª—ë–Ω –ª–∏—à–Ω–∏–π –∫–µ—à
    const globalNotificationCache = useRef<Set<string>>(new Set()); // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –í–°–ï–• —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Firebase + –ª–æ–∫–∞–ª—å–Ω—ã–µ)
    const lastNavigationTime = useRef<number>(0);
    const lastNavigatedChatId = useRef<string | null>(null);
    const isNavigating = useRef<boolean>(false);
    const listenerInitialized = useRef<boolean>(false);
    // –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è processNotificationQueue –∏ queueNotification
    const notificationQueueRef = useRef<MessageType[]>([]); // –•—Ä–∞–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const notificationBuffer = useRef<MessageType[]>([]); // –ë—É—Ñ–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationDebounceTimer = useRef<NodeJS.Timeout | null>(null); // –¢–∞–π–º–µ—Ä –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ chatId
    const chatNotificationIds = useRef<Map<string, Set<string>>>(new Map());
    // –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é processNotificationQueue\
    // –§–ª–∞–≥, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å Firebase‚Äëhandler —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    const firebaseHandlerAdded = useRef<boolean>(false);

    /**
     * –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä.
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à.
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª—é—á `${senderId}_${messageId || 'none'}_${count}`.
     */
    function enqueueNotification(msgArray: MessageType[]): void {
        if (!msgArray || msgArray.length === 0) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è processNotificationQueue
        notificationQueueRef.current.push(...msgArray);
        console.log('üîî [Notification] Enqueued', msgArray.length, 'message(s) into queue');

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–µ–±–∞—É–Ω—Å–∞ (800‚ÄØ–º—Å)
        if (notificationDebounceTimer.current) {
            clearTimeout(notificationDebounceTimer.current);
        }
        notificationDebounceTimer.current = setTimeout(() => {
            processNotificationQueue();
            notificationDebounceTimer.current = null;
        }, 800);
    }

    useEffect(() => {
        const setupNotificationChannels = async () => {
            try {
                if (Platform.OS === 'android') {
                    const channels = await Notifications.getNotificationChannelsAsync();
                    const messagesChannel = channels.find(ch => ch.id === 'messages');

                    if (!messagesChannel) {
                        await Notifications.setNotificationChannelAsync('messages', {
                            name: '–°–æ–æ–±—â–µ–Ω–∏—è',
                            importance: Notifications.AndroidImportance.HIGH,
                            sound: 'default',
                            enableVibrate: true,
                            showBadge: true,
                        });
                    }
                }
            } catch (error) {
            }
        };

        if (isAuthenticated && hasNotificationPermission) {
            setupNotificationChannels();
        }
    }, [isAuthenticated, hasNotificationPermission]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        const checkAuth = async () => {
            try {
                const token = await AsyncStorage.getItem('userToken');
                setIsAuthenticated(!!token);
            } catch (error) {
                setIsAuthenticated(false);
            }
        };

        checkAuth();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const requestPermissions = async (): Promise<boolean> => {
        try {
            const currentPermissions = await Notifications.getPermissionsAsync();

            let hasPermission = currentPermissions.status === 'granted';

            if (!hasPermission) {
                hasPermission = await requestNotificationPermissions();
            }

            setHasNotificationPermission(hasPermission);

            if (hasPermission) {
                const token = await registerForPushNotifications();

                if (token) {
                    const isFirebaseToken = !token.startsWith('ExponentPushToken');

                    if (isFirebaseToken) {
                        console.log('üî• [FCM] –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', token.substring(0, 20) + '...');
                    }
                    setPushToken(token);
                    await savePushTokenToServer(token);
                }

                setIsInitialized(true);
            }

            return hasPermission;
        } catch (error) {
            setHasNotificationPermission(false);
            return false;
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const initNotifications = async () => {
            try {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                const lastClearTime = await AsyncStorage.getItem('lastNotificationClear');
                const now = Date.now();
                const oneDayAgo = now - (24 * 60 * 60 * 1000);

                if (!lastClearTime || parseInt(lastClearTime) < oneDayAgo) {
                    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å
                    try {
                        await Notifications.dismissAllNotificationsAsync();
                        await AsyncStorage.setItem('lastNotificationClear', now.toString());
                    } catch (clearError) {
                    }
                }

                // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Firebase —Å–µ—Ä–≤–∏—Å–∞
                const firebaseService = FirebaseNotificationService.getInstance();

                // –ü–†–ò–û–†–ò–¢–ï–¢: —Ç–æ–ª—å–∫–æ Firebase FCM —Ç–æ–∫–µ–Ω—ã
                console.log('üî• [FCM] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase FCM —Å–µ—Ä–≤–∏—Å...');
                const firebaseResult = await firebaseService.initialize();

                if (firebaseResult.success && firebaseResult.token) {
                    const token = firebaseResult.token;
                    const isFCMToken = !token.startsWith('ExponentPushToken');
                    if (isFCMToken) {
                        setPushToken(token);
                        setHasNotificationPermission(true);
                        setIsInitialized(true);

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                        await savePushTokenToServer(token);

                        setIsUsingFirebaseNavigation(true);
                    }

                    // –î–∞–µ–º Firebase –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è

                    setTimeout(async () => {
                        // –ü–æ–ª—É—á–∞–µ–º status —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ handlers
                        const currentStatus = await firebaseService.getStatus();

                        const messageHandler = (messageData: any) => {
                            console.log('üî• [FCM] === Firebase message handler triggered ===');
                            console.log('üî• [FCM] Message data:', {
                                title: messageData?.title,
                                senderId: messageData?.data?.senderId,
                                chatId: messageData?.data?.chatId,
                            });

                            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                            const firebaseKey = `firebase_${messageData?.data?.senderId || 'unknown'}_${Date.now()}`;
                            globalNotificationCache.current.add(firebaseKey);
                            console.log('üî• [FCM] Added to global cache:', firebaseKey);

                            // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                            setTimeout(() => {
                                globalNotificationCache.current.delete(firebaseKey);
                            }, 10000);

                            if (isAuthenticated) {
                                console.log('üî• [FCM] User authenticated - enqueuing Firebase message');
                                // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Firebase –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É MessageType
                                const firebaseMsg: MessageType = {
                                    sender_id: Number(messageData?.data?.senderId) || 0,
                                    sender_name: undefined,
                                    count: Number(messageData?.data?.count) || 1,
                                    last_message: messageData?.notification?.title,
                                    timestamp: Date.now(),
                                    chat_id: Number(messageData?.data?.chatId),
                                    message_id: Number(messageData?.data?.messageId),
                                };
                                enqueueNotification([firebaseMsg]);
                            } else {
                                console.warn('üî• [FCM] User not authenticated, skipping enqueue');
                            }
                        };

                        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω handler –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (!firebaseHandlerAdded.current) {
                            firebaseService.addMessageHandler(messageHandler);
                            firebaseHandlerAdded.current = true;
                        }
                        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                        const finalStatus = await firebaseService.getStatus();
                        console.log('üî• [FCM] === FINAL STATUS CHECK ===', {
                            hasPermission: finalStatus.hasPermission,
                            isEnabled: finalStatus.isEnabled,
                            tokenType: finalStatus.type,
                        });

                        // –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        await firebaseService.testFirebaseConnection();

                    }, 2000); // –î–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

                    return; // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                } else {
                    console.error('üî• [FCM] ‚ùå Firebase initialization failed:', firebaseResult.error);
                }

                // –ï—Å–ª–∏ Firebase –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                console.error('üî• [FCM] ‚ùå Firebase FCM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
                console.error('üî• [FCM] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
                console.error('üî• [FCM] ‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ google-services.json –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

                setHasNotificationPermission(false);
                setIsInitialized(false);

            } catch (error) {
                console.error('üî• [FCM] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase FCM:', error);
                console.error('üî• [FCM] ‚ùå Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã');

                setHasNotificationPermission(false);
                setIsInitialized(false);
                setPushToken(null);
            }
        };

        if (isAuthenticated) {
            initNotifications();
        }
    }, [isAuthenticated]);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ notification listener –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    // –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    useEffect(() => {
        // –ö–†–ò–¢–ò–ß–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º listener —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
        if (listenerInitialized.current) {
            console.log('üî• [NotificationContext] ‚ö†Ô∏è Listener ALREADY initialized, skipping');
            return;
        }

        console.log('üî• [NotificationContext] üéØ Registering notification response listener (ONCE)');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô listener –¥–ª—è –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π
        const subscription = Notifications.addNotificationResponseReceivedListener((response) => {
            console.log('üî• [NotificationContext] üì± Notification tapped - processing');
            handleNotificationResponse(response);
        });

        responseListener.current = subscription;
        listenerInitialized.current = true;

        console.log('üî• [NotificationContext] ‚úÖ Listener registered successfully');

        // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ù–ï –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        return () => {
            console.log('üî• [NotificationContext] üóëÔ∏è Component unmounting - removing listener');
            if (responseListener.current) {
                responseListener.current.remove();
                responseListener.current = null;
                listenerInitialized.current = false;
            }
        };
    }, []); // –ü–£–°–¢–û–ô –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleNotificationResponse = (response: Notifications.NotificationResponse) => {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º data –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ dataString
            let data = response.notification.request.content.data;

            // –ï—Å–ª–∏ data —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –ø–∞—Ä—Å–∏–º –µ—ë
            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                } catch (parseError) {
                }
            }

            const isFromFirebase = data?.isFirebase === true;

            if (isFromFirebase) {
                console.log('üî• [NotificationContext] Notification response:', response.notification.request.identifier);
            }

            if (isAuthenticated) {
                refreshNotifications();
            }

            if (data && data.type === 'message_notification' && data.chatId) {
                const chatId = String(data.chatId);
                const now = Date.now();

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (isNavigating.current) {
                    console.log('üî• [NotificationContext] ‚ö†Ô∏è Navigation already in progress, SKIPPING');
                    return;
                }

                const timeSinceLastNav = now - lastNavigationTime.current;
                if (lastNavigatedChatId.current === chatId && timeSinceLastNav < 5000) {
                    console.log('üî• [NotificationContext] ‚ö†Ô∏è Duplicate navigation to same chat, SKIPPING');
                    return;
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
                isNavigating.current = true;
                lastNavigationTime.current = now;
                lastNavigatedChatId.current = chatId;

                console.log('üî• [NotificationContext] üöÄ Navigating to chat:', chatId);

                // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                try {
                    router.push({
                        pathname: '/chat/[id]' as any,
                        params: {
                            "id": chatId,
                            "userId": String(data.senderId || data.sender_id)
                        }
                    });
                    console.log('üî• [NotificationContext] ‚úÖ Navigation successful');

                    // –ò –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (—à—Ç–æ—Ä–∫–∏ + –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å)
                    closeChatNotifications(chatId);
                } catch (navError) {
                    console.error('üî• [NotificationContext] ‚ùå Navigation failed:', navError);
                    router.push('/(main)/messages');
                }

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    isNavigating.current = false;
                }, 3000);
            }
        } catch (error) {
            console.error('üî• [NotificationContext] Error handling notification:', error);
            isNavigating.current = false;
        }
    };


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const processNotificationQueue = () => {
        if (notificationQueueRef.current.length === 0) {
            console.log('üì¨ [NotificationQueue] Queue is empty, skipping');
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ sender_id, –±–µ—Ä–µ–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –æ—Ç –∫–∞–∂–¥–æ–≥–æ
        const groupedBySender = new Map<number, MessageType>();
        notificationQueueRef.current.forEach(msg => {
            const existing = groupedBySender.get(msg.sender_id);
            if (!existing || (msg.timestamp && existing.timestamp && msg.timestamp > existing.timestamp)) {
                groupedBySender.set(msg.sender_id, msg);
            }
        });

        const uniqueMessages = Array.from(groupedBySender.values());
        console.log('üì¨ [NotificationQueue] Processing queue:', {
            rawCount: notificationQueueRef.current.length,
            uniqueCount: uniqueMessages.length,
        });

        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        notificationQueueRef.current = [];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const isAppActive = AppState.currentState === 'active';

        if (isAppActive) {
            console.log('üì¨ [NotificationQueue] App active - vibrate only');
            vibrateWithoutNotification(uniqueMessages);
        } else {
            console.log('üì¨ [NotificationQueue] App inactive - local notifications suppressed');
            // No local notification is sent; the push will be delivered by Firebase
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å —Å debounce
    const queueNotification = (messageArray: MessageType[]) => {
        if (!messageArray || messageArray.length === 0) {
            return;
        }

        console.log('üì¨ [NotificationQueue] Adding to queue:', messageArray.length);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        notificationQueueRef.current.push(...messageArray);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (notificationDebounceTimer.current) {
            clearTimeout(notificationDebounceTimer.current);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 800–º—Å
        // –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏–¥—É—Ç –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∏—Ç—Å—è
        notificationDebounceTimer.current = setTimeout(() => {
            processNotificationQueue();
            notificationDebounceTimer.current = null;
        }, 800);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
    const sendGroupedNotification = async () => {
        if (notificationBuffer.current.length === 0) {
            return;
        }

        const bufferedMessages = [...notificationBuffer.current];
        notificationBuffer.current = []; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä

        console.log('üîî [Notification] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–µ:', bufferedMessages.length);

        const isAppActive = AppState.currentState === 'active';

        if (isAppActive) {
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ - —Ç–æ–ª—å–∫–æ –≤–∏–±—Ä–∞—Ü–∏—è
            console.log('üì± [Notification] App –∞–∫—Ç–∏–≤–Ω–æ - —Ç–æ–ª—å–∫–æ –≤–∏–±—Ä–∞—Ü–∏—è');
            vibrateWithoutNotification(bufferedMessages);
        } else if (hasNotificationPermission) {
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤—ë—Ä–Ω—É—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            console.log('üì± [Notification] App –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            await sendNotificationWithUserData(bufferedMessages);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
    const addToNotificationBuffer = (messageArray: MessageType[]) => {
        console.log('üîî [Notification] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä:', messageArray.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        messageArray.forEach(newMsg => {
            const existingIndex = notificationBuffer.current.findIndex(
                msg => msg.sender_id === newMsg.sender_id
            );

            if (existingIndex !== -1) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ
                notificationBuffer.current[existingIndex] = newMsg;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                notificationBuffer.current.push(newMsg);
            }
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (notificationDebounceTimer.current) {
            clearTimeout(notificationDebounceTimer.current);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
        notificationDebounceTimer.current = setTimeout(() => {
            sendGroupedNotification();
            notificationDebounceTimer.current = null;
        }, 1500);

        console.log('üîî [Notification] –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', notificationBuffer.current.length);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)
    const vibrateWithoutNotification = (messageArray: MessageType[]) => {
        try {
            if (!messageArray || messageArray.length === 0) {
                console.log('üì≥ [Notification] vibrateWithoutNotification: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π');
                return;
            }

            const currentTime = Date.now();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if (currentTime - lastMessageTimestamp < 1000) {
                console.log('üì≥ [Notification] vibrateWithoutNotification: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (< 1—Å–µ–∫), –ø—Ä–æ–ø—É—Å–∫');
                return;
            }

            const mostActiveMsg = messageArray[0];
            const notificationKey = `vibrate_${mostActiveMsg.sender_id}_${mostActiveMsg.message_id || 'none'}_${mostActiveMsg.count}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
            if (globalNotificationCache.current.has(notificationKey)) {
                console.log('üì≥ [Notification] vibrateWithoutNotification: –¥—É–±–ª–∏–∫–∞—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–µ—à–µ, –ø—Ä–æ–ø—É—Å–∫');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–µ—à)
            globalNotificationCache.current.add(notificationKey);

            // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                globalNotificationCache.current.delete(notificationKey);
            }, 5000);

            setLastMessageTimestamp(currentTime);

            // –í–∏–±—Ä–∞—Ü–∏—è: 400–º—Å –≤–∏–±—Ä–∞—Ü–∏—è, 200–º—Å –ø–∞—É–∑–∞, 400–º—Å –≤–∏–±—Ä–∞—Ü–∏—è
            Vibration.vibrate([0, 400, 200, 400]);

            console.log('üì≥ [Notification] ‚úÖ Vibration triggered for active app, key:', notificationKey);
        } catch (error) {
            console.error('‚ùå [Notification] Error in vibrateWithoutNotification:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)
    const sendNotificationWithUserData = async (messageArray: MessageType[]) => {
        console.log('üî• [FCM] sendNotificationWithUserData called - App state:', AppState.currentState);

        try {
            // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Firebase, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            // Firebase —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FCM
            if (isUsingFirebaseNavigation && pushToken && !pushToken.startsWith('ExponentPushToken')) {
                console.log('üî• [FCM] ‚ö†Ô∏è Firebase –∞–∫—Ç–∏–≤–µ–Ω - –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –û–¢–ú–ï–ù–ï–ù–û (Firebase —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç)');
                return;
            }

            if (!hasNotificationPermission) {
                const granted = await requestPermissions();
                if (!granted) {
                    console.log('üî• [FCM] sendNotificationWithUserData: –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
                    return;
                }
            }

            if (!messageArray || messageArray.length === 0) {
                console.log('üî• [FCM] sendNotificationWithUserData: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π');
                return;
            }

            const mostActiveMsg = messageArray.find(msg =>
                msg.count === Math.max(...messageArray.map(m => m.count))
            ) || messageArray[0];

            const currentTime = Date.now();

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
            if (currentTime - lastMessageTimestamp < 2000) {
                console.log('üî• [FCM] sendNotificationWithUserData: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (< 2—Å–µ–∫), –ø—Ä–æ–ø—É—Å–∫');
                return;
            }

            const notificationKey = `local_${mostActiveMsg.sender_id}_${mostActiveMsg.message_id || 'none'}_${mostActiveMsg.count}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
            if (globalNotificationCache.current.has(notificationKey)) {
                console.log('üî• [FCM] sendNotificationWithUserData: –¥—É–±–ª–∏–∫–∞—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–µ—à–µ, –ø—Ä–æ–ø—É—Å–∫');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –°–†–ê–ó–£, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            globalNotificationCache.current.add(notificationKey);
            sentNotificationsCache.current.add(notificationKey);

            // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                globalNotificationCache.current.delete(notificationKey);
                sentNotificationsCache.current.delete(notificationKey);
            }, 10000);

            let senderInfo = mostActiveMsg.sender_name;
            let notificationBody = mostActiveMsg.last_message;

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            if (notificationBody.length > 50) {
                notificationBody = notificationBody.substring(0, 50) + '...';
            }

            if (messageArray.length > 1) {
                const totalMessages = messageArray.reduce((sum, msg) => sum + msg.count, 0);
                notificationBody += ` (–∏ –µ—â–µ ${totalMessages - mostActiveMsg.count} –æ—Ç –¥—Ä—É–≥–∏—Ö)`;
            } else if (mostActiveMsg.count > 1) {
                notificationBody += ` (+${mostActiveMsg.count - 1})`;
            }

            setLastMessageTimestamp(currentTime);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            const totalSenders = messageArray.length;
            const totalMessages = messageArray.reduce((sum, msg) => sum + msg.count, 0);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —à—Ç–æ—Ä–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –∞–∫—Ç–∏–≤–Ω–æ
            const notificationContent: any = {
                title: senderInfo,
                body: notificationBody,
                sound: 'default',
                data: {
                    type: 'message_notification',
                    chatId: mostActiveMsg.chat_id,
                    senderId: mostActiveMsg.sender_id,
                    isFirebase: isUsingFirebaseNavigation,
                    notificationKey: notificationKey,
                },
            };

            // Android - –¥–æ–±–∞–≤–ª—è–µ–º group –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if (Platform.OS === 'android') {
                notificationContent.channelId = 'messages';
                notificationContent.categoryIdentifier = 'messages';

                // –ö–†–ò–¢–ò–ß–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º groupKey –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å –ü–ï–†–í–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notificationContent.groupId = 'chat-messages';
                notificationContent.groupSummary = false; // –≠—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

                // –î–æ–±–∞–≤–ª—è–µ–º tag –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Ç–æ–≥–æ –∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                notificationContent.tag = `sender_${mostActiveMsg.sender_id}`;
            }

            // iOS - –¥–æ–±–∞–≤–ª—è–µ–º threadIdentifier –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if (Platform.OS === 'ios') {
                notificationContent.threadIdentifier = 'chat-messages';
                notificationContent.categoryIdentifier = 'message';
            }

            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —à—Ç–æ—Ä–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const identifier = await Notifications.scheduleNotificationAsync({
                content: notificationContent,
                trigger: null,
            });

            console.log('‚úÖ [Notification] LOCAL notification sent, key:', notificationKey, 'identifier:', identifier);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º identifier –≤ —Ä–µ—Ñ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —è–≤–Ω–æ –¥–∏–º–∏—Å–∏—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const chatIdStr = String(mostActiveMsg.chat_id);
            if (!chatNotificationIds.current.has(chatIdStr)) {
                chatNotificationIds.current.set(chatIdStr, new Set());
            }
            chatNotificationIds.current.get(chatIdStr)!.add(identifier);

            // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π - —Å–æ–∑–¥–∞–µ–º summary notification –¥–ª—è Android
            if (Platform.OS === 'android' && totalSenders > 1) {
                const summaryContent: any = {
                    title: `${totalSenders} –Ω–æ–≤—ã—Ö —á–∞—Ç–∞`,
                    body: `${totalMessages} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`,
                    sound: null, // –ë–µ–∑ –∑–≤—É–∫–∞ –¥–ª—è summary
                    data: {
                        type: 'summary',
                    },
                    channelId: 'messages',
                    groupId: 'chat-messages',
                    groupSummary: true, // –≠—Ç–æ summary notification
                };

                await Notifications.scheduleNotificationAsync({
                    content: summaryContent,
                    trigger: null,
                });

                console.log('‚úÖ [Notification] Summary notification created for', totalSenders, 'senders');
            }

            // –û—á–∏—â–∞–µ–º –∫–µ—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30)
            if (globalNotificationCache.current.size > 30) {
                const entries = Array.from(globalNotificationCache.current);
                globalNotificationCache.current.clear();
                entries.slice(-15).forEach(key => globalNotificationCache.current.add(key));
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error in sendNotificationWithUserData:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞
    const sendPing = () => {
        const connectionState = isConnected();

        if (connectionState) {
            const pingMessage = {type: 'ping'};
            sendMessage(pingMessage);
            lastPingTimeRef.current = Date.now();
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const checkConnection = () => {
        const now = Date.now();
        const timeSincePing = now - lastPingTimeRef.current;
        const connectionState = isConnected();
        const wsConnectedState = wsConnected;

        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–ö–£: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –ù–ï–¢ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ò–õ–ò –æ–Ω–æ –∑–∞–≤–∏—Å–ª–æ
        const shouldReconnect = !connectionState || !wsConnectedState || timeSincePing > 45000;

        if (shouldReconnect && isAuthenticated) {
            reconnect();
        }
    };

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    const handleMessage = (event: any) => {
        try {
            const data = JSON.parse(event.data);
            lastPingTimeRef.current = Date.now();

            if (reconnectAttempts > 0) {
                setReconnectAttempts(0);
            }

            if (data.type === 'pong') {
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
            if (data.trigger_update) {
                previousMessagesRef.current = [];
                    globalNotificationCache.current.clear();

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                setTimeout(() => {
                    if (isConnected() && wsConnected) {
                        sendMessage({type: 'get_initial_data'});
                    }
                }, 50);
                return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            }

            if (data.type === 'user_status_update') {
                const statusUpdate = data as UserStatusUpdate;
                setUserStatuses(prevStatuses => {
                    const newStatuses = new Map(prevStatuses);
                    newStatuses.set(statusUpdate.user_id, statusUpdate.status);
                    return newStatuses;
                });

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                setTimeout(() => {
                    if (isConnected() && wsConnected) {
                        sendMessage({type: 'get_initial_data'});
                    }
                }, 100);

                return;
            }

            if (data.type === 'notification_update' || data.type === 'new_message_notification') {
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (data.trigger_update) {
                    setTimeout(() => {
                        const refreshMessage = {type: 'get_initial_data'};
                        sendMessage(refreshMessage);
                    }, 100);
                    return;
                }

                let messageArray: MessageType[] = [];
                if (data.messages && Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        messageArray = data.messages[1];
                    } else {
                        messageArray = data.messages;
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setMessages([]);
                    setSenderCounts(new Map());
                    setUnreadCount(0);
                    return;
                }

                setMessages(messageArray);

                const newSenderCounts = new Map<number, number>();
                messageArray.forEach(message => {
                    newSenderCounts.set(message.sender_id, message.count);
                });
                setSenderCounts(newSenderCounts);

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                const newUnreadCount = data.unique_sender_count !== undefined ? data.unique_sender_count : messageArray.length;
                setUnreadCount(newUnreadCount);

                // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–£–§–ï–† –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if (messageArray.length > 0) {
                    console.log('üì± [Notification] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messageArray.length, '- –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä');
                    enqueueNotification(messageArray);
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (data.type === 'individual_message') {
                const messageData = data.message;
                if (messageData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º Map –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    setSenderCounts(prevCounts => {
                        const newCounts = new Map(prevCounts);
                        newCounts.set(messageData.sender_id, messageData.count);
                        return newCounts;
                    });

                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(prevMessages => {
                        // –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        const index = prevMessages.findIndex(msg => msg.sender_id === messageData.sender_id);

                        let updatedMessages;
                        if (index !== -1) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages];
                            updatedMessages[index] = messageData;
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages, messageData];
                        }

                        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–£–§–ï–† –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                        const previousMsg = previousMessagesRef.current.find(m => m.sender_id === messageData.sender_id);
                        const isNewOrUpdated = !previousMsg || messageData.count > previousMsg.count;

                        if (isNewOrUpdated) {
                            console.log('üì± [Notification] Individual message - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä');
                            enqueueNotification([messageData]);
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        previousMessagesRef.current = updatedMessages;

                        return updatedMessages;
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    }
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (data.type === 'initial_notification' || data.type === 'messages_by_sender_update') {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                let messageArray: MessageType[] = [];

                if (Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        // –§–æ—Ä–º–∞—Ç [user_info, message_array]
                        messageArray = data.messages[1];
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                        messageArray = data.messages;
                    }
                }

                if (messageArray && messageArray.length > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(messageArray);

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    const newSenderCounts = new Map<number, number>();
                    messageArray.forEach(message => {
                        newSenderCounts.set(message.sender_id, message.count);
                    });

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                    setSenderCounts(newSenderCounts);

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    } else {
                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å—á–µ—Ç—á–∏–∫, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                        setUnreadCount(messageArray.length);
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–æ –Ω–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                    if (data.type === 'messages_by_sender_update') {
                        const previousMessages = previousMessagesRef.current;
                        const hasChanges = messageArray.some(newMsg => {
                            const prevMsg = previousMessages.find(m => m.sender_id === newMsg.sender_id);
                            return !prevMsg || newMsg.count > prevMsg.count;
                        });

                        if (hasChanges) {
                            console.log('üì± [Notification] messages_by_sender_update - –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä');
                            enqueueNotification(messageArray);
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    previousMessagesRef.current = [...messageArray];

                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if (!isInitialized) {
                        setIsInitialized(true);
                    }
                } else {
                    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    setSenderCounts(new Map());
                    setUnreadCount(0);
                    setMessages([]);
                    previousMessagesRef.current = [];

                    // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if (!isInitialized) {
                        setIsInitialized(true);
                    }
                }
            }
        } catch (error) {
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
    const {connect, disconnect, sendMessage, isConnected, reconnect} = useWebSocket(`/wss/notification/`, {
        onOpen: () => {
            setWsConnected(true);
            setReconnectAttempts(0);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            previousMessagesRef.current = [];
            globalNotificationCache.current.clear();

            const initialDataMessage = {type: 'get_initial_data'};
            sendMessage(initialDataMessage);
            lastPingTimeRef.current = Date.now();

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            setTimeout(async () => {
                try {
                    const currentPermissions = await Notifications.getPermissionsAsync();
                    const permissionGranted = currentPermissions.status === 'granted';
                    setHasNotificationPermission(permissionGranted);
                } catch (error) {
                }
            }, 1000);
        },
        onMessage: handleMessage,
        onClose: (event: any) => {
            setWsConnected(false);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const newAttempts = reconnectAttempts + 1;
            setReconnectAttempts(newAttempts);
        },
        onError: (error: any) => {
            setWsConnected(false);
        },
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Å–æ–±—ã—Ç–∏–π–Ω–æ-—É–ø—Ä–∞–≤–ª—è–µ–º–∞—è
    const refreshNotifications = () => {
        const connectionState = isConnected();
        const wsConnectedState = wsConnected;

        if (connectionState && wsConnectedState) {
            const refreshMessage = {type: 'get_initial_data'};
            sendMessage(refreshMessage);
            lastPingTimeRef.current = Date.now();
        } else {
            if (isAuthenticated) {
                reconnect();
            }
        }
    };

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∞—Ç—É.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª ¬´–∑–∞–≤–∏—Å—à–∏–µ¬ª —à—Ç–æ—Ä–∫–∏.
     */
    const closeChatNotifications = async (chatId: string) => {
        try {
            // ---------- 1Ô∏è‚É£ –°–Ω—è—Ç–∏–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω–Ω—ã—Ö —à—Ç–æ—Ä–æ–∫ ----------
            const getPresented = (Notifications as any).getPresentedNotificationsAsync
                ? (Notifications as any).getPresentedNotificationsAsync.bind(Notifications)
                : null;

            let presentedDismissed = 0;
            if (getPresented) {
                const presented = await getPresented();

                const toDismiss = presented.filter(
                    n => n.request?.content?.data?.chatId?.toString() === chatId
                );

                await Promise.all(
                    toDismiss.map(n => Notifications.dismissNotificationAsync?.(n.identifier))
                );

                presentedDismissed = toDismiss.length;
                console.log(
                    `üî• [Notification] Closed ${presentedDismissed} presented notification(s) for chatId ${chatId}`
                );
            } else {
                console.warn('üî• [Notification] getPresentedNotificationsAsync not available ‚Äì skipping UI dismissal');
            }

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–≤–µ—Ä–Ω—ë–º –≤—Å—ë (–Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö)
            if (presentedDismissed === 0) {
                try {
                    await Notifications.dismissAllNotificationsAsync?.();
                    console.log(`üî• [Notification] dismissAllNotificationsAsync called for chatId ${chatId}`);
                } catch (dismissAllErr) {
                    console.warn('üî• [Notification] dismissAllNotificationsAsync failed:', dismissAllErr);
                }
            }

            // ---------- 2Ô∏è‚É£ –î–∏–º–∏—Å—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ chatNotificationIds ----------
            const storedIds = chatNotificationIds.current.get(chatId);
            if (storedIds && storedIds.size > 0) {
                const idsArray = Array.from(storedIds);
                await Promise.all(
                    idsArray.map(id => Notifications.dismissNotificationAsync?.(id))
                );
                console.log(
                    `üî• [Notification] Dismissed ${idsArray.length} scheduled notification(s) for chatId ${chatId}`
                );
                // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ä–µ—Ñ–∞
                chatNotificationIds.current.delete(chatId);
            }

            // ---------- 3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—á–µ—Ä–µ–¥–∏ ----------
            if (notificationQueueRef.current.length > 0) {
                const beforeCount = notificationQueueRef.current.length;
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ *–Ω–µ* –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∑–∞–∫—Ä—ã–≤–∞–µ–º–æ–º—É —á–∞—Ç—É
                notificationQueueRef.current = notificationQueueRef.current.filter(
                    msg => String(msg.chat_id) !== chatId
                );
                const afterCount = notificationQueueRef.current.length;
                console.log(
                    `üî• [Notification] Queue cleaned for chatId ${chatId}: ${beforeCount - afterCount} item(s) removed`
                );
            }
        } catch (err) {
            console.error('üî• [Notification] Error while closing notifications for chatId', chatId, err);
        }
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        if (isAuthenticated) {
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setTimeout(() => {
                connect();
            }, 500);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–∏–Ω–≥–∏
            if (checkConnectionIntervalRef.current) {
                clearInterval(checkConnectionIntervalRef.current);
            }

            checkConnectionIntervalRef.current = setInterval(() => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                sendPing();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                checkConnection();
            }, 30000);
        }

        return () => {
            if (isAuthenticated) {
                disconnect();

                if (checkConnectionIntervalRef.current) {
                    clearInterval(checkConnectionIntervalRef.current);
                    checkConnectionIntervalRef.current = null;
                }
            }
        };
    }, [isAuthenticated]);

    // –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π–Ω–æ-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const checkFirebaseStatus = async () => {
        try {
            if (pushToken) {
                const isFirebaseToken = !pushToken.startsWith('ExponentPushToken');
                if (isFirebaseToken) {
                    console.log('üî• [FCM] Push-—Ç–æ–∫–µ–Ω:', pushToken.substring(0, 15) + '...');
                }
            }

            if (!pushToken) {
                const token = await registerForPushNotifications();

                if (token) {
                    const isFirebaseToken = !token.startsWith('ExponentPushToken');
                    if (isFirebaseToken) {
                        console.log('üî• [FCM] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: –£—Å–ø–µ—à–Ω–æ');
                    }

                    setPushToken(token);
                    await savePushTokenToServer(token);
                    if (isFirebaseToken) {
                        console.log('üî• [FCM] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
                    }
                    return {success: true, token};
                } else {
                    return {success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω'};
                }
            }

            return {success: true, token: pushToken};
        } catch (error) {
            return {success: false, error};
        }
    };

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = {
        unreadCount,
        messages,
        senderCounts,
        userStatuses,
        connect,
        disconnect,
        refreshNotifications,
        requestPermissions,
        checkFirebaseStatus,
        debugInfo: {
            isWebSocketConnected: wsConnected,
            hasPermission: hasNotificationPermission,
            pushToken,
        },
    };

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            if (notificationDebounceTimer.current) {
                clearTimeout(notificationDebounceTimer.current);
                notificationDebounceTimer.current = null;
            }
        };
    }, []);

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useNotifications = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotifications must be used within a NotificationProvider');
    }
    return context;
};