import React, {createContext, useContext, useEffect, useState, useRef} from 'react';
import {useWebSocket} from '../hooks/useWebSocket';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import {router} from 'expo-router';
import {AppState, Platform} from 'react-native';
import axios from 'axios';
import {API_CONFIG} from '../config';

import {
    requestNotificationPermissions,
    registerForPushNotifications,
    sendHighPriorityNotification,
    addNotificationListener,
    addNotificationResponseListener,
} from '../services/notificationService';

import FirebaseNotificationService from '../services/firebaseNotificationService';

interface NotificationContextType {
    unreadCount: number;
    messages: MessageType[];
    senderCounts: Map<number, number>;
    userStatuses: Map<number, string>;
    connect: () => Promise<void>;
    disconnect: () => void;
    refreshNotifications: () => void;
    requestPermissions: () => Promise<boolean>;
    checkFirebaseStatus: () => Promise<{
        success: boolean;
        token?: string | null;
        error?: any;
    }>;
    debugInfo: {
        isWebSocketConnected: boolean;
        hasPermission: boolean;
        pushToken: string | null;
    };
}

interface MessageType {
    sender_id: number;
    sender_name?: string;
    count: number;
    last_message?: string;
    timestamp?: string;
    chat_id?: number;
    message_id?: number;
}

interface NotificationData {
    type: string;
    unique_sender_count: number;
    messages: [{ user: string }, MessageType[]];
}

interface UserStatusUpdate {
    type: 'user_status_update';
    user_id: number;
    status: string;
}

const savePushTokenToServer = async (token: string) => {
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        const isFirebaseToken = !token.startsWith('ExponentPushToken');
        const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';

        console.log(`${logPrefix} –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
        const userToken = await AsyncStorage.getItem('userToken');
        if (!userToken) {
            console.error(`${logPrefix} –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è push-—Ç–æ–∫–µ–Ω–∞`);
            return;
        }

        console.log(`${logPrefix} –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:`, token.substring(0, 10) + '...');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π payload –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
        const payload = isFirebaseToken 
            ? { fcm_token: token }
            : { expo_push_token: token };

        const response = await axios.post(
            `${API_CONFIG.BASE_URL}/chat/api/save-push-token/`,
            payload,
            {headers: {'Authorization': `Token ${userToken}`}}
        );

        console.log(`${logPrefix} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:`, response.status);

        if (response.status === 200) {
            console.log(`${logPrefix} –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
        } else {
            console.warn(`${logPrefix} –ù–µ–æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:`, response.status);
        }
    } catch (error) {
        const isFirebaseToken = !token.startsWith('ExponentPushToken');
        const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';

        console.error(`${logPrefix} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ push-—Ç–æ–∫–µ–Ω–∞:`, error);

        if (axios.isAxiosError(error)) {
            console.error(`${logPrefix} –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:`, error.response?.status);
            console.error(`${logPrefix} –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:`, error.response?.data);
        }
    }
};

const NotificationContext = createContext<NotificationContextType>({
    unreadCount: 0,
    messages: [],
    senderCounts: new Map(),
    userStatuses: new Map(),
    connect: async () => Promise.resolve(),
    disconnect: () => {
    },
    refreshNotifications: () => {
    },
    requestPermissions: async () => false,
    checkFirebaseStatus: async () => ({success: false, error: 'Not initialized'}),
    debugInfo: {
        isWebSocketConnected: false,
        hasPermission: false,
        pushToken: null,
    },
});


export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {
    const [unreadCount, setUnreadCount] = useState<number>(0);
    const [messages, setMessages] = useState<MessageType[]>([]);
    const [senderCounts, setSenderCounts] = useState<Map<number, number>>(new Map());
    const [userStatuses, setUserStatuses] = useState<Map<number, string>>(new Map());
    const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
    const [hasNotificationPermission, setHasNotificationPermission] = useState<boolean>(false);
    const [pushToken, setPushToken] = useState<string | null>(null);
    const [wsConnected, setWsConnected] = useState<boolean>(false);
    const [isInitialized, setIsInitialized] = useState<boolean>(false);
    const [lastMessageTimestamp, setLastMessageTimestamp] = useState<number>(0);
    const [reconnectAttempts, setReconnectAttempts] = useState<number>(0);
    const [isUsingFirebaseNavigation, setIsUsingFirebaseNavigation] = useState<boolean>(false);

    const appState = useRef(AppState.currentState);
    const notificationListener = useRef<Notifications.Subscription | null>(null);
    const responseListener = useRef<Notifications.Subscription | null>(null);
    const previousMessagesRef = useRef<MessageType[]>([]);
    const checkConnectionIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const lastPingTimeRef = useRef<number>(Date.now());
    const sentNotificationsCache = useRef<Set<string>>(new Set()); // –ö–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const setupNotificationChannels = async () => {
            try {
                if (Platform.OS === 'android') {
                    const channels = await Notifications.getNotificationChannelsAsync();
                    const messagesChannel = channels.find(ch => ch.id === 'messages');

                    if (!messagesChannel) {
                        await Notifications.setNotificationChannelAsync('messages', {
                            name: '–°–æ–æ–±—â–µ–Ω–∏—è',
                            importance: Notifications.AndroidImportance.HIGH,
                            sound: 'default',
                            enableVibrate: true,
                            showBadge: true,
                        });
                    }
                }
            } catch (error) {
                console.error('‚ùå [Notification] Error setting up channels:', error);
            }
        };

        if (isAuthenticated && hasNotificationPermission) {
            setupNotificationChannels();
        }
    }, [isAuthenticated, hasNotificationPermission]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        const checkAuth = async () => {
            try {
                const token = await AsyncStorage.getItem('userToken');
                setIsAuthenticated(!!token);
            } catch (error) {
                console.error('‚ùå [Notification] Error checking auth:', error);
                setIsAuthenticated(false);
            }
        };

        checkAuth();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const requestPermissions = async (): Promise<boolean> => {
        try {
            console.log('üîî [PUSH] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');
            const currentPermissions = await Notifications.getPermissionsAsync();
            console.log('üîî [PUSH] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', currentPermissions.status);

            let hasPermission = currentPermissions.status === 'granted';

            if (!hasPermission) {
                console.log('üîî [PUSH] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
                hasPermission = await requestNotificationPermissions();
                console.log('üîî [PUSH] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', hasPermission);
            } else {
                console.log('üîî [PUSH] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
            }

            setHasNotificationPermission(hasPermission);

            if (hasPermission) {
                console.log('üîî [PUSH] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º push-—Ç–æ–∫–µ–Ω...');
                const token = await registerForPushNotifications();

                if (token) {
                    const isFirebaseToken = !token.startsWith('ExponentPushToken');
                    const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';

                    console.log(`${logPrefix} –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:`, token.substring(0, 20) + '...');
                    setPushToken(token);
                    console.log(`${logPrefix} –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...`);
                    await savePushTokenToServer(token);
                } else {
                    console.error('üîî [PUSH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å push-—Ç–æ–∫–µ–Ω');
                }

                setIsInitialized(true);
                console.log('üîî [PUSH] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } else {
                console.warn('üîî [PUSH] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
            }

            return hasPermission;
        } catch (error) {
            console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            setHasNotificationPermission(false);
            return false;
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const initNotifications = async () => {
            try {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                const lastClearTime = await AsyncStorage.getItem('lastNotificationClear');
                const now = Date.now();
                const oneDayAgo = now - (24 * 60 * 60 * 1000);

                if (!lastClearTime || parseInt(lastClearTime) < oneDayAgo) {
                    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å
                    try {
                        await Notifications.dismissAllNotificationsAsync();
                        await AsyncStorage.setItem('lastNotificationClear', now.toString());
                        console.log('üîî [PUSH] –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                    } catch (clearError) {
                        console.log('üîî [PUSH] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', clearError);
                    }
                }

                // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Firebase —Å–µ—Ä–≤–∏—Å–∞
                const firebaseService = FirebaseNotificationService.getInstance();

                // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase —Å–Ω–∞—á–∞–ª–∞
                const firebaseResult = await firebaseService.initialize();

                if (firebaseResult.success && firebaseResult.tokenType === 'fcm') {
                    // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Ç–∏–≤–Ω—ã–º Firebase —Ç–æ–∫–µ–Ω–æ–º
                    const token = firebaseResult.token;
                    if (token) {
                        console.log('üî• [FCM] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π Firebase FCM —Ç–æ–∫–µ–Ω');
                        setPushToken(token);
                        setHasNotificationPermission(true);
                        setIsInitialized(true);

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Firebase —Å–æ–æ–±—â–µ–Ω–∏–π –¢–û–õ–¨–ö–û –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        firebaseService.addMessageHandler((messageData) => {
                            console.log('üî• [FCM] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Firebase –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (—Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)');
                            if (isAuthenticated) {
                                refreshNotifications();
                            }
                        });

                        setIsUsingFirebaseNavigation(true);
                        console.log('üî• [FCM] Native Firebase —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                        console.log('üî• [FCM] –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û Firebase —Å–µ—Ä–≤–∏—Å–æ–º');

                        // –ù–ï –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Expo —Å–ª—É—à–∞—Ç–µ–ª–∏ - Firebase —Å–µ—Ä–≤–∏—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                        return;
                    }
                }

                // Fallback –Ω–∞ Expo - –∏–ª–∏ Firebase –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–ª–∏ —ç—Ç–æ Expo —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Firebase —Å–µ—Ä–≤–∏—Å
                console.log('üì± [EXPO] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Expo notifications (Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —ç—Ç–æ Expo —Ç–æ–∫–µ–Ω)');

                // –ï—Å–ª–∏ Firebase –≤–µ—Ä–Ω—É–ª Expo —Ç–æ–∫–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (firebaseResult.success && firebaseResult.token) {
                    setPushToken(firebaseResult.token);
                    setHasNotificationPermission(true);
                    setIsInitialized(true);
                } else {
                    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è Expo –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    const currentPermissions = await Notifications.getPermissionsAsync();
                    const permissionGranted = currentPermissions.status === 'granted';

                    setHasNotificationPermission(permissionGranted);

                    if (permissionGranted) {
                        if (!pushToken) {
                            console.log('üì± [EXPO] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º push-—Ç–æ–∫–µ–Ω...');
                            const token = await registerForPushNotifications();

                            if (token) {
                                console.log('üì± [EXPO] –ü–æ–ª—É—á–µ–Ω Expo —Ç–æ–∫–µ–Ω');
                                setPushToken(token);
                                await savePushTokenToServer(token);
                            } else {
                                console.error('üì± [EXPO] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
                            }
                        }

                        setIsInitialized(true);
                    } else if (currentPermissions.canAskAgain) {
                        console.log('üì± [EXPO] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
                        const granted = await requestPermissions();

                        if (granted && !pushToken) {
                            const token = await registerForPushNotifications();
                            if (token) {
                                setPushToken(token);
                                await savePushTokenToServer(token);
                            }
                        }
                    }
                }

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Expo —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                console.log('üì± [EXPO] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Expo —Å–ª—É—à–∞—Ç–µ–ª–∏');

                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
                if (notificationListener.current) {
                    notificationListener.current.remove();
                }

                if (responseListener.current) {
                    responseListener.current.remove();
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
                notificationListener.current = addNotificationListener((notification: Notifications.Notification) => {
                    console.log('üì± [EXPO] –ü–æ–ª—É—á–µ–Ω–æ Expo —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
                        title: notification.request.content.title,
                        body: notification.request.content.body,
                        data: notification.request.content.data
                    });

                    if (isAuthenticated) {
                        refreshNotifications();
                    }
                });

                responseListener.current = addNotificationResponseListener((response: Notifications.NotificationResponse) => {
                    console.log('üì± [EXPO] ========== –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–í–ò–ì–ê–¶–ò–ò ==========');
                    console.log('üì± [EXPO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');

                    // –í–°–ï–ì–î–ê –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∑–¥–µ—Å—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
                    handleNotificationResponse(response);
                });

                // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const subscription = AppState.addEventListener('change', nextAppState => {
                    if (appState.current.match(/inactive|background/) && nextAppState === 'active') {
                        if (isAuthenticated) {
                            refreshNotifications();
                        }
                    }

                    appState.current = nextAppState;
                });

                return () => {
                    if (notificationListener.current) {
                        notificationListener.current.remove();
                    }
                    if (responseListener.current) {
                        responseListener.current.remove();
                    }
                    subscription.remove();
                };
            } catch (error) {
                console.error('‚ùå [Notification] Error in initNotifications:', error);
            }
        };

        if (isAuthenticated) {
            initNotifications();
        }

    }, [isAuthenticated]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    useEffect(() => {
        const checkLaunchNotification = async () => {
            try {
                console.log('üîî [PUSH] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

                // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ AsyncStorage
                const appLaunchTime = await AsyncStorage.getItem('appLaunchTime');
                const currentLaunchTime = Date.now().toString();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
                await AsyncStorage.setItem('appLaunchTime', currentLaunchTime);

                const lastNotificationResponse = await Notifications.getLastNotificationResponseAsync();

                if (lastNotificationResponse) {
                    const notificationTime = lastNotificationResponse.actionDate;
                    const timeSinceNotification = Date.now() - notificationTime;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å–µ–∫—É–Ω–¥)
                    // –∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    const isRecentNotification = timeSinceNotification < 30000; // 30 —Å–µ–∫—É–Ω–¥
                    const isNewAppLaunch = !appLaunchTime || (parseInt(currentLaunchTime) - parseInt(appLaunchTime) > 5000);

                    if (isRecentNotification && isNewAppLaunch) {
                        const isFromFirebase = lastNotificationResponse.notification.request.content.data?.isFirebase === true;
                        const logPrefix = isFromFirebase ? 'üî• [FCM]' : 'üì± [EXPO]';

                        console.log(`${logPrefix} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!`);
                        console.log(`${logPrefix} –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è: ${Math.round(timeSinceNotification / 1000)}—Å`);
                        console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, JSON.stringify(lastNotificationResponse.notification.request.content.data));

                        setTimeout(() => {
                            console.log(`${logPrefix} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
                            handleNotificationResponse(lastNotificationResponse);
                        }, 1000);
                    } else {
                        console.log('üîî [PUSH] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫)');
                        console.log('üîî [PUSH] –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', Math.round(timeSinceNotification / 1000), '—Å–µ–∫—É–Ω–¥');
                    }
                } else {
                    console.log('üîî [PUSH] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (–Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)');
                }
            } catch (error) {
                console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        };

        if (isAuthenticated) {
            checkLaunchNotification();
        }
    }, [isAuthenticated]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
    const handleNotificationResponse = (response: Notifications.NotificationResponse) => {
        try {
            console.log('üì± [CONTEXT] ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ==========');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º data –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ dataString
            let data = response.notification.request.content.data;

            // –ï—Å–ª–∏ data —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –ø–∞—Ä—Å–∏–º –µ—ë
            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                } catch (parseError) {
                    console.warn('üîî [PUSH] Failed to parse notification data string:', parseError);
                }
            }

            const isFromFirebase = data?.isFirebase === true;
            const logPrefix = isFromFirebase ? 'üî• [FCM]' : 'üì± [EXPO]';

            console.log(`${logPrefix} –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`, response.notification.request.identifier);
            console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, JSON.stringify(data));

            if (isAuthenticated) {
                console.log(`${logPrefix} –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
                refreshNotifications();
            } else {
                console.log(`${logPrefix} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
            }

            if (data?.startfrom !== undefined) {
                console.log(`üî• [FCM] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å startfrom:`, data.startfrom);
            }

            if (data && data.type === 'message_notification') {
                console.log(`${logPrefix} –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é`);
                console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`, {
                    chatId: data.chatId,
                    senderId: data.senderId || data.sender_id,
                    type: data.type
                });

                if (data.chatId) {
                    console.log(`${logPrefix} –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Ç—É:`, data.chatId);

                    // –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
                    try {
                        router.push({
                            pathname: '/chat/[id]' as any,
                            params: {
                                "id": String(data.chatId),
                                "userId": String(data.senderId || data.sender_id)
                            }
                        });
                        console.log(`${logPrefix} ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —á–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                    } catch (navError) {
                        console.error(`${logPrefix} ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —á–∞—Ç:`, navError);
                        // Fallback - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                        router.push('/(main)/messages');
                    }
                } else {
                    console.log(`${logPrefix} –ù–µ—Ç chatId, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π`);
                    router.push('/(main)/messages');
                }
            } else {
                console.log(`${logPrefix} –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`);
                console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, data);
            }
        } catch (error) {
            console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', error);
        }
    };


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const sendNotificationWithUserData = async (messageArray: MessageType[]) => {
        try {
            if (!hasNotificationPermission) {
                const granted = await requestPermissions();
                if (!granted) {
                    return;
                }
            }

            if (!messageArray || messageArray.length === 0) {
                return;
            }

            const mostActiveMsg = messageArray.find(msg =>
                msg.count === Math.max(...messageArray.map(m => m.count))
            ) || messageArray[0];

            const currentTime = Date.now();

            if (currentTime - lastMessageTimestamp < 500) {
                return;
            }

            const notificationKey = `${mostActiveMsg.sender_id}_${mostActiveMsg.message_id}_${mostActiveMsg.count}`;

            if (sentNotificationsCache.current.has(notificationKey)) {
                return;
            }

            sentNotificationsCache.current.add(notificationKey);
            setTimeout(() => {
                sentNotificationsCache.current.delete(notificationKey);
            }, 10 * 60 * 1000);

            let senderInfo = mostActiveMsg.sender_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${mostActiveMsg.sender_id}`;
            let notificationBody = mostActiveMsg.last_message || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            if (notificationBody.length > 50) {
                notificationBody = notificationBody.substring(0, 50) + '...';
            }

            if (messageArray.length > 1) {
                const totalMessages = messageArray.reduce((sum, msg) => sum + msg.count, 0);
                notificationBody += ` (–∏ –µ—â–µ ${totalMessages - mostActiveMsg.count} –æ—Ç –¥—Ä—É–≥–∏—Ö)`;
            } else if (mostActiveMsg.count > 1) {
                notificationBody += ` (+${mostActiveMsg.count - 1})`;
            }

            setLastMessageTimestamp(currentTime);

            const notificationResult = await sendHighPriorityNotification({
                title: `üíå ${senderInfo}`,
                body: notificationBody,
                data: {
                    type: 'message_notification',
                    timestamp: currentTime,
                    sender_id: mostActiveMsg.sender_id,
                    message_count: mostActiveMsg.count,
                    chatId: mostActiveMsg.chat_id,
                    category: 'message',
                    notification_id: currentTime.toString()
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sentNotificationsCache.current.add(notificationKey);

            // –û—á–∏—â–∞–µ–º –∫–µ—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            if (sentNotificationsCache.current.size > 50) {
                const entries = Array.from(sentNotificationsCache.current);
                sentNotificationsCache.current.clear();
                entries.slice(-25).forEach(key => sentNotificationsCache.current.add(key));
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error in sendNotificationWithUserData:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞
    const sendPing = () => {
        if (isConnected()) {
            sendMessage({type: 'ping'});
            lastPingTimeRef.current = Date.now();
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const checkConnection = () => {
        const now = Date.now();
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ–ª–µ–µ 45 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
        if (now - lastPingTimeRef.current > 45000 && isConnected()) {
            console.log('üîå [WS] ‚ö†Ô∏è Connection seems stale, attempting to reconnect...');
            reconnect();
        }
    };

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    const handleMessage = (event: any) => {
        try {
            const data = JSON.parse(event.data);
            lastPingTimeRef.current = Date.now();

            if (reconnectAttempts > 0) {
                setReconnectAttempts(0);
            }

            if (data.type === 'pong') {
                return;
            }

            if (data.type === 'user_status_update') {
                const statusUpdate = data as UserStatusUpdate;
                setUserStatuses(prevStatuses => {
                    const newStatuses = new Map(prevStatuses);
                    newStatuses.set(statusUpdate.user_id, statusUpdate.status);
                    return newStatuses;
                });
                return;
            }

            if (data.type === 'notification_update' || data.type === 'new_message_notification') {
                let messageArray: MessageType[] = [];
                if (data.messages && Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        messageArray = data.messages[1];
                    } else {
                        messageArray = data.messages;
                    }
                }

                if (messageArray && messageArray.length > 0) {
                    setMessages(messageArray);

                    const newSenderCounts = new Map<number, number>();
                    messageArray.forEach(message => {
                        newSenderCounts.set(message.sender_id, message.count);
                    });
                    setSenderCounts(newSenderCounts);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    } else {
                        setUnreadCount(messageArray.length);
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    if (hasNotificationPermission && AppState.currentState !== 'active') {
                        setTimeout(() => {
                            sendNotificationWithUserData(messageArray);
                        }, 300);
                    }
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (data.type === 'individual_message') {
                const messageData = data.message;
                if (messageData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º Map –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    setSenderCounts(prevCounts => {
                        const newCounts = new Map(prevCounts);
                        newCounts.set(messageData.sender_id, messageData.count);
                        return newCounts;
                    });

                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(prevMessages => {
                        // –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        const index = prevMessages.findIndex(msg => msg.sender_id === messageData.sender_id);

                        let updatedMessages;
                        if (index !== -1) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages];
                            updatedMessages[index] = messageData;
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages, messageData];
                        }

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        const previousMsg = previousMessagesRef.current.find(m => m.sender_id === messageData.sender_id);
                        const isNewOrUpdated = true; // –í—Å–µ–≥–¥–∞ true –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞

                        if (isNewOrUpdated && hasNotificationPermission) {
                            setTimeout(async () => {
                                try {
                                    await sendNotificationWithUserData([messageData]);
                                } catch (error) {
                                    console.error('‚ùå [Notification] Error in sendNotificationWithUserData:', error);
                                }
                            }, 300);
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        previousMessagesRef.current = updatedMessages;

                        return updatedMessages;
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    }
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (data.type === 'initial_notification' || data.type === 'messages_by_sender_update') {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                let messageArray: MessageType[] = [];

                if (Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        // –§–æ—Ä–º–∞—Ç [user_info, message_array]
                        messageArray = data.messages[1];
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                        messageArray = data.messages;
                    }
                }

                if (messageArray && messageArray.length > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(messageArray);

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    const newSenderCounts = new Map<number, number>();
                    messageArray.forEach(message => {
                        newSenderCounts.set(message.sender_id, message.count);
                    });

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                    setSenderCounts(newSenderCounts);

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    } else {
                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å—á–µ—Ç—á–∏–∫, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                        setUnreadCount(messageArray.length);
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–æ –Ω–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
                    if (data.type === 'messages_by_sender_update' && AppState.currentState !== 'active') {
                        const previousMessages = previousMessagesRef.current;
                        const hasChanges = messageArray.some(newMsg => {
                            const prevMsg = previousMessages.find(m => m.sender_id === newMsg.sender_id);
                            return !prevMsg || newMsg.count > prevMsg.count;
                        });

                        if (hasChanges && hasNotificationPermission) {
                            setTimeout(() => {
                                sendNotificationWithUserData(messageArray);
                            }, 300);
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    previousMessagesRef.current = [...messageArray];

                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if (!isInitialized) {
                        setIsInitialized(true);
                    }
                } else {
                    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    setSenderCounts(new Map());
                    setUnreadCount(0);
                    setMessages([]);
                    previousMessagesRef.current = [];

                    // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if (!isInitialized) {
                        setIsInitialized(true);
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error processing WebSocket message:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
    const {connect, disconnect, sendMessage, isConnected, reconnect} = useWebSocket(`/wss/notification/`, {
        onOpen: () => {
            setWsConnected(true);
            setReconnectAttempts(0);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            previousMessagesRef.current = [];
            sentNotificationsCache.current.clear();
            sendMessage({type: 'get_initial_data'});
            lastPingTimeRef.current = Date.now();
            setTimeout(async () => {
                try {
                    const currentPermissions = await Notifications.getPermissionsAsync();
                    const permissionGranted = currentPermissions.status === 'granted';
                    setHasNotificationPermission(permissionGranted);
                } catch (error) {
                    console.error('‚ùå [Notification] Error syncing permissions:', error);
                }
            }, 1000);
        },
        onMessage: handleMessage,
        onClose: (event: any) => {
            setWsConnected(false);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const newAttempts = reconnectAttempts + 1;
            setReconnectAttempts(newAttempts);
        },
        onError: (error: any) => {
            console.error('‚ùå [Notification] WebSocket error:', error);
            setWsConnected(false);
        },
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const refreshNotifications = () => {
        if (isConnected()) {
            sendMessage({type: 'get_initial_data'});
            lastPingTimeRef.current = Date.now();
        } else {
            reconnect();
        }
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        if (isAuthenticated) {
            connect();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–∏–Ω–≥–∏
            if (checkConnectionIntervalRef.current) {
                clearInterval(checkConnectionIntervalRef.current);
            }

            checkConnectionIntervalRef.current = setInterval(() => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                sendPing();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                checkConnection();
            }, 30000);
        }

        return () => {
            if (isAuthenticated) {
                disconnect();

                if (checkConnectionIntervalRef.current) {
                    clearInterval(checkConnectionIntervalRef.current);
                    checkConnectionIntervalRef.current = null;
                }
            }
        };
    }, [isAuthenticated]);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    useEffect(() => {
        let interval: NodeJS.Timeout | null = null;

        if (isAuthenticated && wsConnected) {
            interval = setInterval(() => {
                refreshNotifications();
            }, 60000);  // –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        }

        return () => {
            if (interval) {
                clearInterval(interval);
            }
        };
    }, [isAuthenticated, wsConnected]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const checkFirebaseStatus = async () => {
        try {
            console.log('üîî [PUSH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
            console.log('üîî [PUSH] –¢–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', await Notifications.getPermissionsAsync());

            if (pushToken) {
                const isFirebaseToken = !pushToken.startsWith('ExponentPushToken');
                const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';
                console.log(`${logPrefix} Push-—Ç–æ–∫–µ–Ω:`, pushToken.substring(0, 15) + '...');
            } else {
                console.log('üîî [PUSH] Push-—Ç–æ–∫–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }

            if (!pushToken) {
                console.log('üîî [PUSH] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è push-—Ç–æ–∫–µ–Ω–∞...');
                const token = await registerForPushNotifications();

                if (token) {
                    const isFirebaseToken = !token.startsWith('ExponentPushToken');
                    const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';
                    console.log(`${logPrefix} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: –£—Å–ø–µ—à–Ω–æ`);

                    setPushToken(token);
                    await savePushTokenToServer(token);
                    console.log(`${logPrefix} –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                    return {success: true, token};
                } else {
                    console.log('üîî [PUSH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
                    return {success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω'};
                }
            }

            return {success: true, token: pushToken};
        } catch (error) {
            console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            return {success: false, error};
        }
    };

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = {
        unreadCount,
        messages,
        senderCounts,
        userStatuses,
        connect,
        disconnect,
        refreshNotifications,
        requestPermissions,
        checkFirebaseStatus,
        debugInfo: {
            isWebSocketConnected: wsConnected,
            hasPermission: hasNotificationPermission,
            pushToken,
        },
    };

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useNotifications = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotifications must be used within a NotificationProvider');
    }
    return context;
};