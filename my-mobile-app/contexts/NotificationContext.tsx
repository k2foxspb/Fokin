import React, {createContext, useContext, useEffect, useState, useRef} from 'react';
import {useWebSocket} from '../hooks/useWebSocket';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import {router} from 'expo-router';
import {AppState, Platform} from 'react-native';
import axios from 'axios';
import {API_CONFIG} from '../config';

import {
    requestNotificationPermissions,
    registerForPushNotifications,
    sendHighPriorityNotification,
    addNotificationListener,
    addNotificationResponseListener,
} from '../services/notificationService';

import FirebaseNotificationService from '../services/firebaseNotificationService';

interface NotificationContextType {
    unreadCount: number;
    messages: MessageType[];
    senderCounts: Map<number, number>;
    userStatuses: Map<number, string>;
    connect: () => Promise<void>;
    disconnect: () => void;
    refreshNotifications: () => void;
    requestPermissions: () => Promise<boolean>;
    checkFirebaseStatus: () => Promise<{
        success: boolean;
        token?: string | null;
        error?: any;
    }>;
    debugInfo: {
        isWebSocketConnected: boolean;
        hasPermission: boolean;
        pushToken: string | null;
    };
}

interface MessageType {
    sender_id: number;
    sender_name?: string;
    count: number;
    last_message?: string;
    timestamp?: string;
    chat_id?: number;
    message_id?: number;
}

interface NotificationData {
    type: string;
    unique_sender_count: number;
    messages: [{ user: string }, MessageType[]];
}

interface UserStatusUpdate {
    type: 'user_status_update';
    user_id: number;
    status: string;
}

const savePushTokenToServer = async (token: string) => {
    try {
        console.log('üî• [FCM] –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');

        // –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–∫–ª–æ–Ω—è–µ–º –ª—é–±—ã–µ Expo —Ç–æ–∫–µ–Ω—ã
        if (token.startsWith('ExponentPushToken')) {
            console.error('üî• [FCM] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Expo —Ç–æ–∫–µ–Ω - –æ—Ç–∫–ª–æ–Ω—è–µ–º');
            console.error('üî• [FCM] ‚ùå Expo —Ç–æ–∫–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return;
        }

        const userToken = await AsyncStorage.getItem('userToken');
        if (!userToken) {
            console.error('üî• [FCM] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞');
            return;
        }

        console.log('üî• [FCM] –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', token.substring(0, 10) + '...');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û FCM —Ç–æ–∫–µ–Ω
        const payload = { fcm_token: token };

        const response = await axios.post(
            `${API_CONFIG.BASE_URL}/chat/api/save-push-token/`,
            payload,
            {headers: {'Authorization': `Token ${userToken}`}}
        );

        console.log('üî• [FCM] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', response.status);

        if (response.status === 200) {
            console.log('üî• [FCM] FCM —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        } else {
            console.warn('üî• [FCM] –ù–µ–æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', response.status);
        }
    } catch (error) {
        console.error('üî• [FCM] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', error);

        if (axios.isAxiosError(error)) {
            console.error('üî• [FCM] –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response?.status);
            console.error('üî• [FCM] –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response?.data);
        }
    }
};

const NotificationContext = createContext<NotificationContextType>({
    unreadCount: 0,
    messages: [],
    senderCounts: new Map(),
    userStatuses: new Map(),
    connect: async () => Promise.resolve(),
    disconnect: () => {
    },
    refreshNotifications: () => {
    },
    requestPermissions: async () => false,
    checkFirebaseStatus: async () => ({success: false, error: 'Not initialized'}),
    debugInfo: {
        isWebSocketConnected: false,
        hasPermission: false,
        pushToken: null,
    },
});


export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {
    const [unreadCount, setUnreadCount] = useState<number>(0);
    const [messages, setMessages] = useState<MessageType[]>([]);
    const [senderCounts, setSenderCounts] = useState<Map<number, number>>(new Map());
    const [userStatuses, setUserStatuses] = useState<Map<number, string>>(new Map());
    const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
    const [hasNotificationPermission, setHasNotificationPermission] = useState<boolean>(false);
    const [pushToken, setPushToken] = useState<string | null>(null);
    const [wsConnected, setWsConnected] = useState<boolean>(false);
    const [isInitialized, setIsInitialized] = useState<boolean>(false);
    const [lastMessageTimestamp, setLastMessageTimestamp] = useState<number>(0);
    const [reconnectAttempts, setReconnectAttempts] = useState<number>(0);
    const [isUsingFirebaseNavigation, setIsUsingFirebaseNavigation] = useState<boolean>(false);

    const appState = useRef(AppState.currentState);
    const notificationListener = useRef<Notifications.Subscription | null>(null);
    const responseListener = useRef<Notifications.Subscription | null>(null);
    const previousMessagesRef = useRef<MessageType[]>([]);
    const checkConnectionIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const lastPingTimeRef = useRef<number>(Date.now());
    const sentNotificationsCache = useRef<Set<string>>(new Set()); // –ö–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const setupNotificationChannels = async () => {
            try {
                if (Platform.OS === 'android') {
                    const channels = await Notifications.getNotificationChannelsAsync();
                    const messagesChannel = channels.find(ch => ch.id === 'messages');

                    if (!messagesChannel) {
                        await Notifications.setNotificationChannelAsync('messages', {
                            name: '–°–æ–æ–±—â–µ–Ω–∏—è',
                            importance: Notifications.AndroidImportance.HIGH,
                            sound: 'default',
                            enableVibrate: true,
                            showBadge: true,
                        });
                    }
                }
            } catch (error) {
                console.error('‚ùå [Notification] Error setting up channels:', error);
            }
        };

        if (isAuthenticated && hasNotificationPermission) {
            setupNotificationChannels();
        }
    }, [isAuthenticated, hasNotificationPermission]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        const checkAuth = async () => {
            try {
                const token = await AsyncStorage.getItem('userToken');
                setIsAuthenticated(!!token);
            } catch (error) {
                console.error('‚ùå [Notification] Error checking auth:', error);
                setIsAuthenticated(false);
            }
        };

        checkAuth();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const requestPermissions = async (): Promise<boolean> => {
        try {
            console.log('üîî [PUSH] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');
            const currentPermissions = await Notifications.getPermissionsAsync();
            console.log('üîî [PUSH] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', currentPermissions.status);

            let hasPermission = currentPermissions.status === 'granted';

            if (!hasPermission) {
                console.log('üîî [PUSH] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
                hasPermission = await requestNotificationPermissions();
                console.log('üîî [PUSH] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', hasPermission);
            } else {
                console.log('üîî [PUSH] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
            }

            setHasNotificationPermission(hasPermission);

            if (hasPermission) {
                console.log('üîî [PUSH] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º push-—Ç–æ–∫–µ–Ω...');
                const token = await registerForPushNotifications();

                if (token) {
                    const isFirebaseToken = !token.startsWith('ExponentPushToken');
                    const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';

                    console.log(`${logPrefix} –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:`, token.substring(0, 20) + '...');
                    setPushToken(token);
                    console.log(`${logPrefix} –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...`);
                    await savePushTokenToServer(token);
                } else {
                    console.error('üîî [PUSH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å push-—Ç–æ–∫–µ–Ω');
                }

                setIsInitialized(true);
                console.log('üîî [PUSH] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } else {
                console.warn('üîî [PUSH] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
            }

            return hasPermission;
        } catch (error) {
            console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            setHasNotificationPermission(false);
            return false;
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        const initNotifications = async () => {
            try {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                const lastClearTime = await AsyncStorage.getItem('lastNotificationClear');
                const now = Date.now();
                const oneDayAgo = now - (24 * 60 * 60 * 1000);

                if (!lastClearTime || parseInt(lastClearTime) < oneDayAgo) {
                    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å
                    try {
                        await Notifications.dismissAllNotificationsAsync();
                        await AsyncStorage.setItem('lastNotificationClear', now.toString());
                        console.log('üîî [PUSH] –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                    } catch (clearError) {
                        console.log('üîî [PUSH] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', clearError);
                    }
                }

                // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Firebase —Å–µ—Ä–≤–∏—Å–∞
                const firebaseService = FirebaseNotificationService.getInstance();

                // –ü–†–ò–û–†–ò–¢–ï–¢: —Ç–æ–ª—å–∫–æ Firebase FCM —Ç–æ–∫–µ–Ω—ã
                console.log('üî• [FCM] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Firebase FCM (–±–µ–∑ Expo fallback)');
                const firebaseResult = await firebaseService.initialize();

                if (firebaseResult.success && firebaseResult.token) {
                    const token = firebaseResult.token;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ FCM —Ç–æ–∫–µ–Ω (–Ω–µ Expo)
                    const isFCMToken = !token.startsWith('ExponentPushToken');

                    if (isFCMToken) {
                        console.log('üî• [FCM] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π Firebase FCM —Ç–æ–∫–µ–Ω');
                        setPushToken(token);
                        setHasNotificationPermission(true);
                        setIsInitialized(true);

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Firebase —Å–æ–æ–±—â–µ–Ω–∏–π –¢–û–õ–¨–ö–û –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        firebaseService.addMessageHandler((messageData) => {
                            console.log('üî• [FCM] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Firebase –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (—Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)');
                            if (isAuthenticated) {
                                refreshNotifications();
                            }
                        });

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        await savePushTokenToServer(token);

                        setIsUsingFirebaseNavigation(true);
                        console.log('üî• [FCM] Firebase FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                        console.log('üî• [FCM] –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û Firebase —Å–µ—Ä–≤–∏—Å–æ–º');

                        // –ù–ï –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Expo —Å–ª—É—à–∞—Ç–µ–ª–∏ - Firebase —Å–µ—Ä–≤–∏—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                        return;
                    } else {
                        console.warn('üì± [EXPO] Firebase —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª Expo —Ç–æ–∫–µ–Ω - –æ—Ç–∫–ª–æ–Ω—è–µ–º');
                    }
                }

                // –ï—Å–ª–∏ Firebase –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                console.error('üî• [FCM] ‚ùå Firebase FCM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
                console.error('üî• [FCM] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
                console.error('üî• [FCM] ‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ google-services.json –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

                setHasNotificationPermission(false);
                setIsInitialized(false);

            } catch (error) {
                console.error('üî• [FCM] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase FCM:', error);
                console.error('üî• [FCM] ‚ùå Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã');

                setHasNotificationPermission(false);
                setIsInitialized(false);
                setPushToken(null);
            }
        };

        if (isAuthenticated) {
            initNotifications();
        }
    }, [isAuthenticated]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    useEffect(() => {
        const checkLaunchNotification = async () => {
            try {
                console.log('üîî [PUSH] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

                // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ AsyncStorage
                const appLaunchTime = await AsyncStorage.getItem('appLaunchTime');
                const currentLaunchTime = Date.now().toString();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
                await AsyncStorage.setItem('appLaunchTime', currentLaunchTime);

                const lastNotificationResponse = await Notifications.getLastNotificationResponseAsync();

                if (lastNotificationResponse) {
                    const notificationTime = lastNotificationResponse.notification.date;
                    const timeSinceNotification = Date.now() - notificationTime;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å–µ–∫—É–Ω–¥)
                    // –∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    const isRecentNotification = timeSinceNotification < 30000; // 30 —Å–µ–∫—É–Ω–¥
                    const isNewAppLaunch = !appLaunchTime || (parseInt(currentLaunchTime) - parseInt(appLaunchTime) > 5000);

                    if (isRecentNotification && isNewAppLaunch) {
                        const isFromFirebase = lastNotificationResponse.notification.request.content.data?.isFirebase === true;
                        const logPrefix = isFromFirebase ? 'üî• [FCM]' : 'üì± [EXPO]';

                        console.log(`${logPrefix} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!`);
                        console.log(`${logPrefix} –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è: ${Math.round(timeSinceNotification / 1000)}—Å`);
                        console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, JSON.stringify(lastNotificationResponse.notification.request.content.data));

                        setTimeout(() => {
                            console.log(`${logPrefix} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
                            handleNotificationResponse(lastNotificationResponse);
                        }, 1000);
                    } else {
                        console.log('üîî [PUSH] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫)');
                        console.log('üîî [PUSH] –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', Math.round(timeSinceNotification / 1000), '—Å–µ–∫—É–Ω–¥');
                    }
                } else {
                    console.log('üîî [PUSH] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (–Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)');
                }
            } catch (error) {
                console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        };

        if (isAuthenticated) {
            checkLaunchNotification();
        }
    }, [isAuthenticated]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
    const handleNotificationResponse = (response: Notifications.NotificationResponse) => {
        try {
            console.log('üì± [CONTEXT] ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ==========');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º data –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ dataString
            let data = response.notification.request.content.data;

            // –ï—Å–ª–∏ data —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –ø–∞—Ä—Å–∏–º –µ—ë
            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                } catch (parseError) {
                    console.warn('üîî [PUSH] Failed to parse notification data string:', parseError);
                }
            }

            const isFromFirebase = data?.isFirebase === true;
            const logPrefix = isFromFirebase ? 'üî• [FCM]' : 'üì± [EXPO]';

            console.log(`${logPrefix} –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`, response.notification.request.identifier);
            console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, JSON.stringify(data));

            if (isAuthenticated) {
                console.log(`${logPrefix} –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
                refreshNotifications();
            } else {
                console.log(`${logPrefix} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
            }

            if (data?.startfrom !== undefined) {
                console.log(`üî• [FCM] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å startfrom:`, data.startfrom);
            }

            if (data && data.type === 'message_notification') {
                console.log(`${logPrefix} –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é`);
                console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`, {
                    chatId: data.chatId,
                    senderId: data.senderId || data.sender_id,
                    type: data.type
                });

                if (data.chatId) {
                    console.log(`${logPrefix} –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Ç—É:`, data.chatId);

                    // –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
                    try {
                        router.push({
                            pathname: '/chat/[id]' as any,
                            params: {
                                "id": String(data.chatId),
                                "userId": String(data.senderId || data.sender_id)
                            }
                        });
                        console.log(`${logPrefix} ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —á–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                    } catch (navError) {
                        console.error(`${logPrefix} ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —á–∞—Ç:`, navError);
                        // Fallback - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                        router.push('/(main)/messages');
                    }
                } else {
                    console.log(`${logPrefix} –ù–µ—Ç chatId, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π`);
                    router.push('/(main)/messages');
                }
            } else {
                console.log(`${logPrefix} –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`);
                console.log(`${logPrefix} –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, data);
            }
        } catch (error) {
            console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', error);
        }
    };


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const sendNotificationWithUserData = async (messageArray: MessageType[]) => {
        try {
            if (!hasNotificationPermission) {
                const granted = await requestPermissions();
                if (!granted) {
                    return;
                }
            }

            if (!messageArray || messageArray.length === 0) {
                return;
            }

            const mostActiveMsg = messageArray.find(msg =>
                msg.count === Math.max(...messageArray.map(m => m.count))
            ) || messageArray[0];

            const currentTime = Date.now();

            if (currentTime - lastMessageTimestamp < 500) {
                return;
            }

            const notificationKey = `${mostActiveMsg.sender_id}_${mostActiveMsg.message_id}_${mostActiveMsg.count}`;

            if (sentNotificationsCache.current.has(notificationKey)) {
                return;
            }

            sentNotificationsCache.current.add(notificationKey);
            setTimeout(() => {
                sentNotificationsCache.current.delete(notificationKey);
            }, 10 * 60 * 1000);

            let senderInfo = mostActiveMsg.sender_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${mostActiveMsg.sender_id}`;
            let notificationBody = mostActiveMsg.last_message || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            if (notificationBody.length > 50) {
                notificationBody = notificationBody.substring(0, 50) + '...';
            }

            if (messageArray.length > 1) {
                const totalMessages = messageArray.reduce((sum, msg) => sum + msg.count, 0);
                notificationBody += ` (–∏ –µ—â–µ ${totalMessages - mostActiveMsg.count} –æ—Ç –¥—Ä—É–≥–∏—Ö)`;
            } else if (mostActiveMsg.count > 1) {
                notificationBody += ` (+${mostActiveMsg.count - 1})`;
            }

            setLastMessageTimestamp(currentTime);

            const notificationResult = await sendHighPriorityNotification({
                title: `üíå ${senderInfo}`,
                body: notificationBody,
                data: {
                    type: 'message_notification',
                    timestamp: currentTime,
                    sender_id: mostActiveMsg.sender_id,
                    message_count: mostActiveMsg.count,
                    chatId: mostActiveMsg.chat_id,
                    category: 'message',
                    notification_id: currentTime.toString()
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sentNotificationsCache.current.add(notificationKey);

            // –û—á–∏—â–∞–µ–º –∫–µ—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            if (sentNotificationsCache.current.size > 50) {
                const entries = Array.from(sentNotificationsCache.current);
                sentNotificationsCache.current.clear();
                entries.slice(-25).forEach(key => sentNotificationsCache.current.add(key));
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error in sendNotificationWithUserData:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞
    const sendPing = () => {
        const connectionState = isConnected();
        console.log('üèì [PING] Attempting to send ping:', {
            isConnected: connectionState,
            lastPing: new Date(lastPingTimeRef.current).toISOString(),
            timeSinceLastPing: Date.now() - lastPingTimeRef.current
        });

        if (connectionState) {
            const pingMessage = {type: 'ping'};
            console.log('üèì [PING] Ping message object:', pingMessage);
            sendMessage(pingMessage);
            lastPingTimeRef.current = Date.now();
            console.log('üèì [PING] ‚úÖ Ping sent successfully');
        } else {
            console.log('üèì [PING] ‚ùå Cannot send ping - not connected');
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const checkConnection = () => {
        const now = Date.now();
        const timeSincePing = now - lastPingTimeRef.current;
        const connectionState = isConnected();
        const wsConnectedState = wsConnected;

        console.log('üîç [CONNECTION-CHECK] Checking connection health:', {
            timeSincePing: timeSincePing,
            isConnected: connectionState,
            wsConnected: wsConnectedState,
            threshold: 45000,
            isAuthenticated: isAuthenticated
        });

        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–ö–£: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –ù–ï–¢ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ò–õ–ò –æ–Ω–æ –∑–∞–≤–∏—Å–ª–æ
        const shouldReconnect = !connectionState || !wsConnectedState || timeSincePing > 45000;

        console.log('üîç [CONNECTION-CHECK] Reconnection decision:', {
            noConnection: !connectionState,
            notWsConnected: !wsConnectedState,
            staleConnection: timeSincePing > 45000,
            shouldReconnect: shouldReconnect,
            isAuthenticated: isAuthenticated
        });

        if (shouldReconnect && isAuthenticated) {
            console.log('üîç [CONNECTION-CHECK] ‚ö†Ô∏è Connection problem detected, attempting to reconnect...');
            console.log('üîç [CONNECTION-CHECK] üîÑ Initiating reconnection...');
            reconnect();
        } else if (!isAuthenticated) {
            console.log('üîç [CONNECTION-CHECK] ‚ùå Not authenticated, skipping reconnect');
        } else {
            console.log('üîç [CONNECTION-CHECK] ‚úÖ Connection appears healthy');
        }
    };

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    const handleMessage = (event: any) => {
        try {
            console.log('üì® [CONTEXT] ========== MESSAGE RECEIVED ==========');
            console.log('üì® [CONTEXT] Raw event data:', event.data);

            const data = JSON.parse(event.data);
            lastPingTimeRef.current = Date.now();

            console.log('üì® [CONTEXT] Parsed message:', {
                type: data.type,
                timestamp: new Date().toISOString(),
                dataKeys: Object.keys(data),
                hasTrigerUpdate: !!data.trigger_update
            });

            if (reconnectAttempts > 0) {
                console.log('üì® [CONTEXT] Resetting reconnect attempts from', reconnectAttempts, 'to 0');
                setReconnectAttempts(0);
            }

            if (data.type === 'pong') {
                console.log('üì® [CONTEXT] ‚úÖ Received pong response');
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
            if (data.trigger_update) {
                console.log('üì® [CONTEXT] üî• Forced update triggered, clearing caches and requesting fresh data');
                previousMessagesRef.current = [];
                sentNotificationsCache.current.clear();

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                setTimeout(() => {
                    console.log('üì® [CONTEXT] üî• Requesting fresh data after forced update');
                    if (isConnected() && wsConnected) {
                        sendMessage({type: 'get_initial_data'});
                    }
                }, 50);
                return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            }

            if (data.type === 'user_status_update') {
                console.log('üë§ [STATUS] Processing user status update:', {
                    userId: data.user_id,
                    status: data.status,
                    currentStatusesCount: userStatuses.size
                });

                const statusUpdate = data as UserStatusUpdate;
                setUserStatuses(prevStatuses => {
                    const newStatuses = new Map(prevStatuses);
                    const oldStatus = newStatuses.get(statusUpdate.user_id);
                    newStatuses.set(statusUpdate.user_id, statusUpdate.status);

                    console.log('üë§ [STATUS] Status updated:', {
                        userId: statusUpdate.user_id,
                        oldStatus,
                        newStatus: statusUpdate.status,
                        totalStatuses: newStatuses.size,
                        allStatuses: Array.from(newStatuses.entries())
                    });

                    return newStatuses;
                });

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log('üë§ [STATUS] Triggering notification refresh due to status change');
                setTimeout(() => {
                    if (isConnected() && wsConnected) {
                        console.log('üë§ [STATUS] Requesting fresh data after status update');
                        sendMessage({type: 'get_initial_data'});
                    }
                }, 100);

                return;
            }

            if (data.type === 'notification_update' || data.type === 'new_message_notification') {
                console.log('üîî [NOTIFICATION] Processing notification update:', {
                    type: data.type,
                    hasMessages: !!data.messages,
                    messagesType: Array.isArray(data.messages) ? 'array' : typeof data.messages,
                    messagesLength: Array.isArray(data.messages) ? data.messages.length : 'N/A',
                    uniqueSenderCount: data.unique_sender_count,
                    triggerUpdate: data.trigger_update
                });

                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (data.trigger_update) {
                    console.log('üîî [NOTIFICATION] Forced update detected, requesting fresh data...');
                    setTimeout(() => {
                        const refreshMessage = {type: 'get_initial_data'};
                        console.log('üîî [NOTIFICATION] Requesting fresh data after trigger');
                        sendMessage(refreshMessage);
                    }, 100);
                    return;
                }

                let messageArray: MessageType[] = [];
                if (data.messages && Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        messageArray = data.messages[1];
                        console.log('üîî [NOTIFICATION] Using nested array format, extracted', messageArray.length, 'messages');
                    } else {
                        messageArray = data.messages;
                        console.log('üîî [NOTIFICATION] Using direct array format,', messageArray.length, 'messages');
                    }
                } else {
                    console.log('üîî [NOTIFICATION] No valid messages array found, clearing state');
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setMessages([]);
                    setSenderCounts(new Map());
                    setUnreadCount(0);
                    return;
                }

                console.log('üîî [NOTIFICATION] Processing', messageArray.length, 'messages:', 
                    messageArray.map(m => ({id: m.sender_id, count: m.count, hasMessage: !!m.last_message}))
                );

                setMessages(messageArray);

                const newSenderCounts = new Map<number, number>();
                messageArray.forEach(message => {
                    newSenderCounts.set(message.sender_id, message.count);
                });
                setSenderCounts(newSenderCounts);

                console.log('üîî [NOTIFICATION] Updated sender counts:', Array.from(newSenderCounts.entries()));

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                const newUnreadCount = data.unique_sender_count !== undefined ? data.unique_sender_count : messageArray.length;
                setUnreadCount(newUnreadCount);

                console.log('üîî [NOTIFICATION] Updated unread count to:', newUnreadCount);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                const shouldShowNotification = hasNotificationPermission && AppState.currentState !== 'active' && messageArray.length > 0;
                console.log('üîî [NOTIFICATION] Should show notification?', {
                    hasPermission: hasNotificationPermission,
                    appState: AppState.currentState,
                    hasMessages: messageArray.length > 0,
                    willShow: shouldShowNotification
                });

                if (shouldShowNotification) {
                    setTimeout(() => {
                        console.log('üîî [NOTIFICATION] Triggering notification display...');
                        sendNotificationWithUserData(messageArray);
                    }, 300);
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (data.type === 'individual_message') {
                const messageData = data.message;
                if (messageData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º Map –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    setSenderCounts(prevCounts => {
                        const newCounts = new Map(prevCounts);
                        newCounts.set(messageData.sender_id, messageData.count);
                        return newCounts;
                    });

                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(prevMessages => {
                        // –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        const index = prevMessages.findIndex(msg => msg.sender_id === messageData.sender_id);

                        let updatedMessages;
                        if (index !== -1) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages];
                            updatedMessages[index] = messageData;
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            updatedMessages = [...prevMessages, messageData];
                        }

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        const previousMsg = previousMessagesRef.current.find(m => m.sender_id === messageData.sender_id);
                        const isNewOrUpdated = true; // –í—Å–µ–≥–¥–∞ true –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞

                        if (isNewOrUpdated && hasNotificationPermission) {
                            setTimeout(async () => {
                                try {
                                    await sendNotificationWithUserData([messageData]);
                                } catch (error) {
                                    console.error('‚ùå [Notification] Error in sendNotificationWithUserData:', error);
                                }
                            }, 300);
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        previousMessagesRef.current = updatedMessages;

                        return updatedMessages;
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    }
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (data.type === 'initial_notification' || data.type === 'messages_by_sender_update') {
                console.log('üìä [DATA] Processing data update:', {
                    type: data.type,
                    hasMessages: !!data.messages,
                    uniqueSenderCount: data.unique_sender_count
                });

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                let messageArray: MessageType[] = [];

                if (Array.isArray(data.messages)) {
                    if (data.messages.length === 2 && Array.isArray(data.messages[1])) {
                        // –§–æ—Ä–º–∞—Ç [user_info, message_array]
                        messageArray = data.messages[1];
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                        messageArray = data.messages;
                    }
                }

                console.log('üìä [DATA] Extracted messages:', messageArray.length);

                if (messageArray && messageArray.length > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    setMessages(messageArray);

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    const newSenderCounts = new Map<number, number>();
                    messageArray.forEach(message => {
                        newSenderCounts.set(message.sender_id, message.count);
                    });

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                    setSenderCounts(newSenderCounts);

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    if (data.unique_sender_count !== undefined) {
                        setUnreadCount(data.unique_sender_count);
                    } else {
                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å—á–µ—Ç—á–∏–∫, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                        setUnreadCount(messageArray.length);
                    }

                    console.log('üìä [DATA] Updated counts:', {
                        senders: Array.from(newSenderCounts.entries()),
                        unreadCount: data.unique_sender_count !== undefined ? data.unique_sender_count : messageArray.length
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–æ –Ω–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
                    if (data.type === 'messages_by_sender_update' && AppState.currentState !== 'active') {
                        const previousMessages = previousMessagesRef.current;
                        const hasChanges = messageArray.some(newMsg => {
                            const prevMsg = previousMessages.find(m => m.sender_id === newMsg.sender_id);
                            return !prevMsg || newMsg.count > prevMsg.count;
                        });

                        if (hasChanges && hasNotificationPermission) {
                            console.log('üìä [DATA] Changes detected, showing notification');
                            setTimeout(() => {
                                sendNotificationWithUserData(messageArray);
                            }, 300);
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    previousMessagesRef.current = [...messageArray];

                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if (!isInitialized) {
                        setIsInitialized(true);
                    }
                } else {
                    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    console.log('üìä [DATA] No messages, clearing state');
                    setSenderCounts(new Map());
                    setUnreadCount(0);
                    setMessages([]);
                    previousMessagesRef.current = [];

                    // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if (!isInitialized) {
                        setIsInitialized(true);
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå [Notification] Error processing WebSocket message:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
    const {connect, disconnect, sendMessage, isConnected, reconnect} = useWebSocket(`/wss/notification/`, {
        onOpen: () => {
            console.log('üîå [WS-CONTEXT] ========== WebSocket OPENED ==========');
            console.log('üîå [WS-CONTEXT] Connection established successfully!');

            setWsConnected(true);
            setReconnectAttempts(0);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            console.log('üîå [WS-CONTEXT] Clearing caches and resetting state...');
            previousMessagesRef.current = [];
            sentNotificationsCache.current.clear();

            console.log('üîå [WS-CONTEXT] Requesting initial data...');
            const initialDataMessage = {type: 'get_initial_data'};
            console.log('üîå [WS-CONTEXT] Initial data message object:', initialDataMessage);
            sendMessage(initialDataMessage);
            lastPingTimeRef.current = Date.now();

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                console.log('üß™ [TEST] Testing user status data:');
                console.log('üß™ [TEST] Current userStatuses Map size:', userStatuses.size);
                console.log('üß™ [TEST] Current userStatuses content:', Array.from(userStatuses.entries()));
                console.log('üß™ [TEST] Current unreadCount:', unreadCount);
                console.log('üß™ [TEST] Current messages count:', messages.length);
            }, 3000);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            setTimeout(async () => {
                try {
                    console.log('üîå [WS-CONTEXT] Syncing notification permissions...');
                    const currentPermissions = await Notifications.getPermissionsAsync();
                    const permissionGranted = currentPermissions.status === 'granted';
                    console.log('üîå [WS-CONTEXT] Permission status:', permissionGranted);
                    setHasNotificationPermission(permissionGranted);
                } catch (error) {
                    console.error('‚ùå [WS-CONTEXT] Error syncing permissions:', error);
                }
            }, 1000);
        },
        onMessage: handleMessage,
        onClose: (event: any) => {
            console.log('üîå [WS-CONTEXT] ========== WebSocket CLOSED ==========');
            console.log('üîå [WS-CONTEXT] Connection lost:', {
                code: event.code,
                reason: event.reason,
                wasClean: event.wasClean
            });

            setWsConnected(false);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const newAttempts = reconnectAttempts + 1;
            console.log('üîå [WS-CONTEXT] Incrementing reconnect attempts:', newAttempts);
            setReconnectAttempts(newAttempts);
        },
        onError: (error: any) => {
            console.error('üîå [WS-CONTEXT] ========== WebSocket ERROR ==========');
            console.error('‚ùå [WS-CONTEXT] WebSocket error occurred:', error);
            console.error('‚ùå [WS-CONTEXT] Error details:', {
                message: error.message,
                type: error.type,
                target: error.target
            });
            setWsConnected(false);
        },
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Å–æ–±—ã—Ç–∏–π–Ω–æ-—É–ø—Ä–∞–≤–ª—è–µ–º–∞—è
    const refreshNotifications = () => {
        const connectionState = isConnected();
        const wsConnectedState = wsConnected;

        console.log('üîÑ [REFRESH] Event-driven notification refresh:', {
            isConnected: connectionState,
            wsConnected: wsConnectedState,
            isAuthenticated: isAuthenticated,
            timestamp: new Date().toISOString()
        });

        if (connectionState && wsConnectedState) {
            console.log('üîÑ [REFRESH] ‚úÖ Connection healthy, requesting data...');
            const refreshMessage = {type: 'get_initial_data'};
            console.log('üîÑ [REFRESH] Refresh message object:', refreshMessage);
            sendMessage(refreshMessage);
            lastPingTimeRef.current = Date.now();
        } else {
            console.log('üîÑ [REFRESH] ‚ùå Connection unhealthy, reconnecting...');
            console.log('üîÑ [REFRESH] Connection details:', {
                isConnected: connectionState,
                wsConnected: wsConnectedState,
                willReconnect: isAuthenticated
            });

            if (isAuthenticated) {
                reconnect();
            } else {
                console.log('üîÑ [REFRESH] Cannot reconnect - not authenticated');
            }
        }
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    useEffect(() => {
        console.log('üîê [AUTH] Authentication state changed:', {
            isAuthenticated,
            wasConnected: wsConnected,
            intervalExists: !!checkConnectionIntervalRef.current
        });

        if (isAuthenticated) {
            console.log('üîê [AUTH] ‚úÖ User authenticated - starting WebSocket connection...');

            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setTimeout(() => {
                console.log('üîê [AUTH] üöÄ Initiating connection after auth...');
                connect();
            }, 500);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–∏–Ω–≥–∏
            if (checkConnectionIntervalRef.current) {
                console.log('üîê [AUTH] üßπ Clearing existing connection interval');
                clearInterval(checkConnectionIntervalRef.current);
            }

            console.log('üîê [AUTH] ‚è∞ Setting up ping/health check interval (30s)');
            checkConnectionIntervalRef.current = setInterval(() => {
                console.log('‚è∞ [INTERVAL] Running scheduled connection maintenance...');

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                console.log('‚è∞ [INTERVAL] Current system state:', {
                    isAuthenticated: isAuthenticated,
                    wsConnected: wsConnected,
                    isConnectedFunc: isConnected(),
                    lastPing: new Date(lastPingTimeRef.current).toISOString(),
                    timeSinceLastPing: Date.now() - lastPingTimeRef.current
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                sendPing();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                checkConnection();
            }, 30000);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            setTimeout(() => {
                console.log('üîê [AUTH] üìä Post-auth connection check:');
                console.log('üîê [AUTH] Connection status:', {
                    wsConnected: wsConnected,
                    isConnected: isConnected(),
                    isAuthenticated: isAuthenticated
                });

                if (!wsConnected && !isConnected()) {
                    console.log('üîê [AUTH] ‚ö†Ô∏è Connection failed after auth, retrying...');
                    reconnect();
                }
            }, 5000);

        } else {
            console.log('üîê [AUTH] ‚ùå User not authenticated - skipping WebSocket connection');
        }

        return () => {
            console.log('üîê [AUTH] üßπ Cleanup function called for authentication effect');
            if (isAuthenticated) {
                console.log('üîê [AUTH] üîå Disconnecting WebSocket...');
                disconnect();

                if (checkConnectionIntervalRef.current) {
                    console.log('üîê [AUTH] ‚è∞ Clearing connection interval');
                    clearInterval(checkConnectionIntervalRef.current);
                    checkConnectionIntervalRef.current = null;
                }
            }
        };
    }, [isAuthenticated]);

    // –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π–Ω–æ-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const checkFirebaseStatus = async () => {
        try {
            console.log('üîî [PUSH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
            console.log('üîî [PUSH] –¢–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', await Notifications.getPermissionsAsync());

            if (pushToken) {
                const isFirebaseToken = !pushToken.startsWith('ExponentPushToken');
                const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';
                console.log(`${logPrefix} Push-—Ç–æ–∫–µ–Ω:`, pushToken.substring(0, 15) + '...');
            } else {
                console.log('üîî [PUSH] Push-—Ç–æ–∫–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }

            if (!pushToken) {
                console.log('üîî [PUSH] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è push-—Ç–æ–∫–µ–Ω–∞...');
                const token = await registerForPushNotifications();

                if (token) {
                    const isFirebaseToken = !token.startsWith('ExponentPushToken');
                    const logPrefix = isFirebaseToken ? 'üî• [FCM]' : 'üì± [EXPO]';
                    console.log(`${logPrefix} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: –£—Å–ø–µ—à–Ω–æ`);

                    setPushToken(token);
                    await savePushTokenToServer(token);
                    console.log(`${logPrefix} –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                    return {success: true, token};
                } else {
                    console.log('üîî [PUSH] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
                    return {success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω'};
                }
            }

            return {success: true, token: pushToken};
        } catch (error) {
            console.error('üîî [PUSH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            return {success: false, error};
        }
    };

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = {
        unreadCount,
        messages,
        senderCounts,
        userStatuses,
        connect,
        disconnect,
        refreshNotifications,
        requestPermissions,
        checkFirebaseStatus,
        debugInfo: {
            isWebSocketConnected: wsConnected,
            hasPermission: hasNotificationPermission,
            pushToken,
        },
    };

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useNotifications = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotifications must be used within a NotificationProvider');
    }
    return context;
};