
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import Constants from 'expo-constants';

// ======== –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ========
const recentMessages = new Map<string, number>();
const recentStatusUpdates = new Map<string, { status: string; timestamp: number }>();
const MESSAGE_DEDUPE_TIMEOUT = 5000; // 5 —Å–µ–∫—É–Ω–¥
const STATUS_THROTTLE_TIMEOUT = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const cleanupOldMessages = () => {
  const now = Date.now();

  // –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  for (const [key, timestamp] of recentMessages.entries()) {
    if (now - timestamp > MESSAGE_DEDUPE_TIMEOUT) {
      recentMessages.delete(key);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  for (const [key, data] of recentStatusUpdates.entries()) {
    if (now - data.timestamp > STATUS_THROTTLE_TIMEOUT * 3) {
      recentStatusUpdates.delete(key);
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
const isDuplicateMessage = (type: string, data: any): boolean => {
  const messageKey = `${type}_${JSON.stringify(data)}`;
  const now = Date.now();

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
  if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
    cleanupOldMessages();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
  if (recentMessages.has(messageKey)) {
    const lastTime = recentMessages.get(messageKey)!;
    if (now - lastTime < MESSAGE_DEDUPE_TIMEOUT) {
      return true; // –î—É–±–ª–∏–∫–∞—Ç
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  recentMessages.set(messageKey, now);
  return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è throttling —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
const shouldProcessStatusUpdate = (userId: string, status: string): boolean => {
  const statusKey = `user_${userId}`;
  const now = Date.now();

  const lastUpdate = recentStatusUpdates.get(statusKey);

  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!lastUpdate) {
    recentStatusUpdates.set(statusKey, { status, timestamp: now });
    return true;
  }

  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
  if (lastUpdate.status !== status) {
    recentStatusUpdates.set(statusKey, { status, timestamp: now });
    return true;
  }

  // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ç—É—Å, –Ω–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
  if (now - lastUpdate.timestamp > STATUS_THROTTLE_TIMEOUT) {
    recentStatusUpdates.set(statusKey, { status, timestamp: now });
    return true;
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å—Ç–∞—Ç—É—Å–∞
  return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
const getErrorDetails = (error: unknown) => {
  if (error instanceof Error) {
    return {
      message: error.message,
      stack: error.stack,
      name: error.name
    };
  } else if (typeof error === 'string') {
    return {
      message: error,
      stack: undefined,
      name: 'StringError'
    };
  } else {
    return {
      message: String(error),
      stack: undefined,
      name: 'UnknownError'
    };
  }
};

// ======== –ù–ê–°–¢–†–û–ô–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ========
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ Firebase —Å–µ—Ä–≤–∏—Å–µ
// —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É Firebase –∏ Expo

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Android –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const setupAndroidNotificationChannels = async () => {
  try {
    // –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    await Notifications.setNotificationChannelAsync('messages', {
      name: '–°–æ–æ–±—â–µ–Ω–∏—è',
      importance: Notifications.AndroidImportance.HIGH,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
      sound: 'default',
      enableVibrate: true,
      enableLights: true,
      showBadge: true,
      lockscreenVisibility: Notifications.AndroidNotificationVisibility.PUBLIC,
      bypassDnd: false,
    });

    // –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await Notifications.setNotificationChannelAsync('default', {
      name: '–û—Å–Ω–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      importance: Notifications.AndroidImportance.DEFAULT,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
      sound: 'default',
      enableVibrate: true,
      enableLights: true,
      showBadge: true,
      lockscreenVisibility: Notifications.AndroidNotificationVisibility.PUBLIC,
    });
  } catch (error) {
    console.error('‚ùå Error setting up Android notification channels:', getErrorDetails(error));
  }
};

// ======== –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò ========
// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const requestNotificationPermissions = async (): Promise<boolean> => {
  try {
    if (!Device.isDevice) {
      return false;
    }

    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è Android –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if (Platform.OS === 'android') {
      await setupAndroidNotificationChannels();
    }

    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowDisplayInCarPlay: true,
          allowCriticalAlerts: false,
          allowProvisional: false,
        },
        android: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowDisplayInCarPlay: false,
        }
      });
      finalStatus = status;
    }

    return finalStatus === 'granted';
  } catch (error) {
    console.error('Error requesting notification permissions:', getErrorDetails(error));
    return false;
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –¢–û–õ–¨–ö–û Firebase FCM
export const registerForPushNotifications = async (): Promise<string | null> => {
  try {
    if (!Device.isDevice) {
      console.log('üî• [FCM] Not a physical device, skipping push notification setup');
      return null;
    }

    console.log('üî• [FCM] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Firebase FCM');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase —Å–µ—Ä–≤–∏—Å
    const FirebaseNotificationService = require('./firebaseNotificationService').default;
    const firebaseService = FirebaseNotificationService.getInstance();

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firebase
    const hasPermission = await firebaseService.requestPermissions();
    if (!hasPermission) {
      console.error('üî• [FCM] Firebase permissions not granted');
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Firebase —Å–µ—Ä–≤–∏—Å
    const token = await firebaseService.getToken();

    if (!token) {
      console.error('üî• [FCM] Failed to get Firebase FCM token');
      console.error('üî• [FCM] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('üî• [FCM] 1. google-services.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.error('üî• [FCM] 2. Firebase project –∏–º–µ–µ—Ç push notification —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
      console.error('üî• [FCM] 3. @react-native-firebase/messaging —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return null;
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–∫–ª–æ–Ω—è–µ–º –ª—é–±—ã–µ Expo —Ç–æ–∫–µ–Ω—ã
    const isFCMToken = !token.startsWith('ExponentPushToken');
    if (!isFCMToken) {
      console.error('üî• [FCM] ‚ùå –ü–æ–ª—É—á–µ–Ω Expo —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ FCM - –æ—Ç–∫–ª–æ–Ω—è–µ–º');
      console.error('üî• [FCM] ‚ùå Expo —Ç–æ–∫–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');

      // –£–¥–∞–ª—è–µ–º Expo —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const AsyncStorage = require('@react-native-async-storage/async-storage').default;
      await AsyncStorage.removeItem('pushToken');
      await AsyncStorage.removeItem('pushTokenType');

      return null;
    }

    console.log('üî• [FCM] ‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π Firebase FCM —Ç–æ–∫–µ–Ω');
    console.log('üî• [FCM] Token type: Native FCM, Length:', token.length);

    return token;

  } catch (error) {
    console.error('üî• [FCM] Error in Firebase FCM registration:', getErrorDetails(error));
    return null;
  }
};


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const addNotificationListener = (handler: (notification: Notifications.Notification) => void): Notifications.Subscription => {
  return Notifications.addNotificationReceivedListener(handler);
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const addNotificationResponseListener = (handler: (response: Notifications.NotificationResponse) => void): Notifications.Subscription => {
  return Notifications.addNotificationResponseReceivedListener(handler);
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const sendLocalNotification = async (notification: {
  title: string;
  body: string;
  data?: any;
  channelId?: string;
}) => {
  try {
    const notificationContent: Notifications.NotificationContentInput = {
      title: notification.title,
      body: notification.body,
      data: notification.data,
      sound: 'default',
      priority: Notifications.AndroidNotificationPriority.HIGH,
      sticky: false,
      autoDismiss: true,
    };

    if (Platform.OS === 'android') {
      notificationContent.categoryIdentifier = notification.channelId || 'default';
    }

    const notificationId = await Notifications.scheduleNotificationAsync({
      content: notificationContent,
      trigger: null,
    });

    return notificationId;
  } catch (error) {
    throw error;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
export const sendHighPriorityNotification = async (notification: {
  title: string;
  body: string;
  data?: any;
}) => {
  try {
    const notificationContent: Notifications.NotificationContentInput = {
      title: notification.title,
      body: notification.body,
      data: notification.data,
      sound: 'default',
      priority: Notifications.AndroidNotificationPriority.MAX,
    };

    if (Platform.OS === 'android') {
      notificationContent.categoryIdentifier = 'messages';

      if (notification.data?.senderId) {
        notificationContent.badge = notification.data.senderId;
      }
      if (notification.data?.message_count > 1) {
        notificationContent.title = `${notification.title} (${notification.data.message_count})`;
      }

    } else if (Platform.OS === 'ios') {
      notificationContent.categoryIdentifier = 'messages';

      if (notification.data?.message_count && notification.data.message_count > 1) {
        notificationContent.subtitle = `+${notification.data.message_count - 1} —Å–æ–æ–±—â–µ–Ω–∏–π`;
      }
    }

    const notificationId = await Notifications.scheduleNotificationAsync({
      content: notificationContent,
      trigger: null,
    });

    return notificationId;
  } catch (error) {
    throw error;
  }
};

// ======== WEBSOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ========
// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
export const handleWebSocketMessage = (type: string, data: any): boolean => {
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  if (type === 'user_status_update') {
    const { user_id, status } = data;

    if (!shouldProcessStatusUpdate(user_id, status)) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      return false;
    }

    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  if (isDuplicateMessage(type, data)) {
    return false;
  }

  return true;
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
export const processWebSocketMessage = (type: string, data: any) => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
  if (!handleWebSocketMessage(type, data)) {
    return; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  switch (type) {
    case 'user_status_update':
      handleUserStatusUpdate(data);
      break;

    case 'message_notification':
      handleMessageNotification(data);
      break;

    case 'typing_indicator':
      handleTypingIndicator(data);
      break;

    case 'initial_notification':
      handleInitialNotification(data);
      break;

    case 'notification_update':
      handleNotificationUpdate(data);
      break;
    case 'messages_by_sender_update':
      handleNotificationUpdate(data);
      break;

    default:
      break;
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const handleUserStatusUpdate = (data: any) => {
  const { user_id, status } = data;
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
const handleMessageNotification = (data: any) => {
  const { sender_name, message_text, chat_id } = data;
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
const handleTypingIndicator = (data: any) => {
  const { user_id, is_typing, chat_id } = data;

  // –î–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–µ—á–∞—Ç–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—â–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π timeout
  const typingKey = `typing_${chat_id}_${user_id}`;
  const now = Date.now();

  const lastTyping = recentMessages.get(typingKey);
  if (lastTyping && now - lastTyping < 1000) { // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è typing
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è typing
  }

  recentMessages.set(typingKey, now);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const handleInitialNotification = (data: any) => {
  const { unique_sender_count, messages } = data;

  if (Array.isArray(messages) && messages.length >= 2) {
    const userInfo = messages[0]; // { user: userId }
    const messagesList = messages[1]; // –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const handleNotificationUpdate = (data: any) => {
  const { unique_sender_count, messages } = data;

  if (Array.isArray(messages) && messages.length >= 2) {
    const userInfo = messages[0]; // { user: userId }
    const messagesList = messages[1]; // –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
export const clearNotificationCache = () => {
  recentMessages.clear();
  recentStatusUpdates.clear();
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const handleRemoteNotification = (notification: Notifications.Notification) => {
  const data = notification.request.content.data;
  const notificationKey = data?.notification_key ||
    `${notification.request.content.title}_${notification.request.content.body}_${Date.now()}`;

  // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–¥–µ—Å—å!
  // –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
};