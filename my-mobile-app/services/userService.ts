// services/userService.ts (—Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª)
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { API_CONFIG } from '../config';
interface MessageData {
  message: string;
  timestamp: string;
  chat_id?: number;  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è ID —á–∞—Ç–∞
}

interface UserInfo {
  id: number;
  first_name: string;
  last_name: string;
  username: string;
}


// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
const userCache = new Map<number, UserInfo>();
export const getLastMessagesBySenders = async (senderIds: number[]): Promise<Map<number, MessageData>> => {

  try {
    const token = await AsyncStorage.getItem('userToken');
    if (!token) {
      throw new Error('No auth token');
    }

    const response = await axios.post(
      `${API_CONFIG.BASE_URL}/profile/api/messages/last/`,
      { sender_ids: senderIds },
      { headers: { Authorization: `Token ${token}` } }
    );

    console.log('üì® Last messages API response:', response.data);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ Map
    const result = new Map<number, MessageData>();
    Object.entries(response.data).forEach(([senderId, messageData]: [string, any]) => {
      result.set(parseInt(senderId), messageData);
    });

    return result;
  } catch (error) {
    console.error('‚ùå Error fetching last messages:', error);
    return new Map();
  }
};

export const getUsersByIds = async (userIds: number[]): Promise<Map<number, UserInfo>> => {
  try {
    const token = await AsyncStorage.getItem('userToken');
    if (!token) {
      throw new Error('No auth token');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º ID, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–µ—à–µ
    const uncachedIds = userIds.filter(id => !userCache.has(id));

    if (uncachedIds.length > 0) {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/profile/api/users/bulk/`,
        { user_ids: uncachedIds },
        { headers: { Authorization: `Token ${token}` } }
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('Bulk users API response:', response.data);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      response.data.forEach((user: UserInfo) => {
        userCache.set(user.id, user);
      });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Map —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const result = new Map<number, UserInfo>();
    userIds.forEach(id => {
      const user = userCache.get(id);
      if (user) {
        result.set(id, user);
      }
    });

    return result;
  } catch (error) {
    // –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (axios.isAxiosError(error)) {
      console.error('Axios error details:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        url: error.config?.url,
        method: error.config?.method,
        data: error.response?.data
      });
    }
    console.error('Error fetching users by IDs:', error);
    return new Map();
  }
};


export const clearUserCache = () => {
  userCache.clear();
};