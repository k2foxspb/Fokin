import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { API_CONFIG } from '../config';
import messaging, {
  FirebaseMessagingTypes, 
  isDeviceRegisteredForRemoteMessages,
  registerDeviceForRemoteMessages,
  getToken,
  onMessage,
  onNotificationOpenedApp,
  getInitialNotification,
  onTokenRefresh
} from '@react-native-firebase/messaging';
import {addNotificationReceivedListener, setNotificationHandler} from "expo-notifications";
import {log} from "expo/build/devtools/logger";
import {async} from "@firebase/util";
import { router } from 'expo-router';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ
const AuthorizationStatus = messaging.AuthorizationStatus;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface MessageData {
  title: string;
  body: string;
  data: Record<string, any>;
  isFirebase: boolean;
}

interface RemoteMessage {
  messageId?: string;
  from?: string;
  data?: Record<string, any>;
  notification?: {
    title?: string;
    body?: string;
    sound?: string;
  };
}

interface BackgroundMessageInfo {
  chatId: string;
  senderId: string;
  timestamp: number;
  processed: boolean;
  messageId: string;
}

interface NotificationStatus {
  hasPermission: boolean;
  token: string | null;
  isEnabled: boolean;
  type: 'fcm' | 'expo' | null;
}

interface InitResult {
  success: boolean;
  token?: string | null;
  tokenType?: string;
  error?: any;
}

type MessageHandler = (message: MessageData) => void;

/**
 * –£–º–Ω—ã–π Firebase —Å–µ—Ä–≤–∏—Å —Å fallback –Ω–∞ Expo Notifications
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É Firebase –∏ Expo –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
class FirebaseNotificationService {
  private static instance: FirebaseNotificationService;
  private isFirebaseAvailable: boolean = false;
  private messageHandlers: MessageHandler[] = [];
  private isInitialized: boolean = false;
  private lastNavigationTime: number = 0;
  private lastChatId: string | null = null;
  private static navigationInProgress: boolean = false;
  private static lastGlobalNavigation: number = 0;
  private processedNotifications: Set<string> = new Set();

  public static getInstance(): FirebaseNotificationService {
    if (!FirebaseNotificationService.instance) {
      FirebaseNotificationService.instance = new FirebaseNotificationService();
    }
    return FirebaseNotificationService.instance;
  }

  constructor() {
    this.initFirebase();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
  private async initFirebase(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      try {
        const firebase = require('@react-native-firebase/app').default;
        console.log('üî• [FCM] Firebase App module imported successfully');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Firebase
        const app = firebase.app();
        console.log('üî• [FCM] Firebase App Name:', app.name);
        console.log('üî• [FCM] Firebase Project ID:', app.options.projectId);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Android
        if (Platform.OS === 'android') {
          console.log('üî• [FCM] Android Package Name:', app.options.appId);
          if (!app.options.projectId || !app.options.appId) {
            throw new Error('Missing Firebase Android configuration');
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è iOS  
        if (Platform.OS === 'ios') {
          console.log('üî• [FCM] iOS Bundle ID:', app.options.appId);
          if (!app.options.projectId || !app.options.appId) {
            console.warn('üî• [FCM] ‚ö†Ô∏è iOS Firebase configuration may be incomplete');
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Firebase App
        const apps = firebase.apps;

        if (apps.length === 0) {
          console.error('üî• [FCM] ‚ùå No Firebase apps found - initialization failed');
          console.error('üî• [FCM] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ google-services.json/GoogleService-Info.plist');
          throw new Error('Firebase App not initialized');
        }

        const defaultApp = firebase.app();

      } catch (appError: unknown) {
        console.error('üî• [FCM] ‚ùå Firebase App initialization error:', appError);
        throw new Error(`Firebase App failed: ${appError}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Messaging –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä
      console.log('üî• [FCM] Checking Firebase Messaging modules...');

      const messagingInstance = messaging();
      console.log('üî• [FCM] Messaging instance:', !!messagingInstance);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä, –∞ –Ω–µ –∏–º–ø–æ—Ä—Ç—ã
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
      const isRequestPermissionAvailable = typeof messagingInstance.requestPermission === 'function';
      const isGetTokenAvailable = typeof messagingInstance.getToken === 'function';
      const isOnMessageAvailable = typeof messagingInstance.onMessage === 'function';

      console.log('üî• [FCM] requestPermission available:', isRequestPermissionAvailable);
      console.log('üî• [FCM] getToken available:', isGetTokenAvailable);
      console.log('üî• [FCM] onMessage available:', isOnMessageAvailable);

      if (!isRequestPermissionAvailable || !isGetTokenAvailable) {
        console.error('üî• [FCM] ‚ùå Firebase Messaging functions not available');
        console.error('üî• [FCM] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É @react-native-firebase/messaging');
        throw new Error('Firebase Messaging modules not available');
      }

      // –î–ª—è Android - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (Platform.OS === 'android') {
        this.isFirebaseAvailable = true;
      } else {
        try {
          const authStatus = await messaging().requestPermission();

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ messaging()
          const AuthorizationStatus = messaging.AuthorizationStatus;
          const hasFirebasePermissions = 
            authStatus === AuthorizationStatus.AUTHORIZED || 
            authStatus === AuthorizationStatus.PROVISIONAL;

          if (!hasFirebasePermissions) {
            console.warn('üî• [FCM] iOS permissions not granted, but continuing initialization');
          }

          this.isFirebaseAvailable = true;
        } catch (permError) {
          console.error('üî• [FCM] iOS permission check failed:', permError);
          throw new Error(`iOS permissions failed: ${permError}`);
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º background handler –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
      messaging().setBackgroundMessageHandler(async (remoteMessage) => {
        // –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ù–ï —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // Firebase —É–∂–µ –ø–æ–∫–∞–∑–∞–ª —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await this.handleBackgroundMessage(remoteMessage);
      });

    } catch (error) {
      this.isFirebaseAvailable = false;
      console.error('üî• [FCM] ‚ùå Firebase initialization failed:', error);
      console.error('üî• [FCM] ‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', String(error));
      console.error('üî• [FCM] ‚ùå Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ FCM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');

      // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      this.diagnoseFirebaseIssue(error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleBackgroundMessage(remoteMessage: FirebaseMessagingTypes.RemoteMessage): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      // Firebase —É–∂–µ –ø–æ–∫–∞–∑–∞–ª —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (remoteMessage.data?.type === 'message_notification') {
        const messageInfo: BackgroundMessageInfo = {
          chatId: remoteMessage.data.chatId,
          senderId: remoteMessage.data.senderId,
          timestamp: Date.now(),
          processed: false,
          messageId: remoteMessage.messageId || ''
        };

        await AsyncStorage.setItem('lastBackgroundMessage', JSON.stringify(messageInfo));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–π–¥–∂ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      try {
        const Notifications = require('expo-notifications');
        const currentBadge: number = await Notifications.getBadgeCountAsync();
        await Notifications.setBadgeCountAsync(currentBadge + 1);
      } catch (badgeError: unknown) {
        console.log('üî• [FCM] Badge update error:', badgeError);
      }

    } catch (error: unknown) {
      console.error('üî• [FCM] Error handling background message:', error);
    }
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º Firebase
  private diagnoseFirebaseIssue(error: unknown): void {
    const errorStr = String(error);

    if (errorStr.includes('Firebase App not initialized')) {
      console.error('üî• [FCM] üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase');
      console.error('üî• [FCM]   Android: my-mobile-app/google-services.json');
      console.error('üî• [FCM]   iOS: my-mobile-app/GoogleService-Info.plist');
      console.error('üî• [FCM]   Bundle ID –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å –≤ Firebase Console');
    } else if (errorStr.includes('SERVICE_NOT_AVAILABLE')) {
      console.error('üî• [FCM] üí° –†–ï–®–ï–ù–ò–ï: Firebase —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.error('üî• [FCM]   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      console.error('üî• [FCM]   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Firebase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω');
      console.error('üî• [FCM]   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Firebase Console');
    } else if (errorStr.includes('MISSING_INSTANCEID_SERVICE')) {
      console.error('üî• [FCM] üí° –†–ï–®–ï–ù–ò–ï: Instance ID service –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.error('üî• [FCM]   1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      console.error('üî• [FCM]   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å google-services.json');
      console.error('üî• [FCM]   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Cloud Messaging API –≤–∫–ª—é—á–µ–Ω –≤ Firebase');
    } else if (errorStr.includes('messaging not available')) {
      console.error('üî• [FCM] üí° –†–ï–®–ï–ù–ò–ï: @react-native-firebase/messaging –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.error('üî• [FCM]   1. yarn add @react-native-firebase/messaging');
      console.error('üî• [FCM]   2. npx pod-install (–¥–ª—è iOS)');
      console.error('üî• [FCM]   3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    }

    console.error('üî• [FCM] üìã –û–±—â–∏–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:');
    console.error('üî• [FCM]   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Firebase –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.error('üî• [FCM]   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Bundle ID/Package name —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    console.error('üî• [FCM]   3. Cloud Messaging API –≤–∫–ª—é—á–µ–Ω –≤ Firebase Console');
    console.error('üî• [FCM]   4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å Firebase –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  async requestPermissions(): Promise<boolean> {

    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Expo –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try {
      const Notifications = require('expo-notifications');

      const { status: currentStatus } = await Notifications.getPermissionsAsync();

      if (currentStatus !== 'granted') {
        const { status: newStatus } = await Notifications.requestPermissionsAsync();
      }
    } catch (expoError) {
      console.warn('üîî [PUSH] Expo permissions request failed:', expoError);
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Firebase –¥–ª—è remote notifications
    if (this.isFirebaseAvailable) {
      try {
        console.log('üî• [FCM] Requesting Firebase permissions...');
        const authStatus = await messaging().requestPermission();
        const enabled =
          authStatus === AuthorizationStatus.AUTHORIZED ||
          authStatus === AuthorizationStatus.PROVISIONAL;

        console.log('üî• [FCM] Firebase auth status:', authStatus, 'enabled:', enabled);

        if (enabled && Platform.OS === 'ios') {
          const isRegistered = await isDeviceRegisteredForRemoteMessages();
          console.log('üî• [FCM] iOS device registered for remote messages:', isRegistered);
          if (!isRegistered) {
            console.log('üî• [FCM] Registering iOS device for remote messages...');
            await registerDeviceForRemoteMessages();
          }
        }
        return enabled;
      } catch (error) {
        console.error('üî• [FCM] Firebase permissions failed:', error);
      }
    }

    // Fallback –Ω–∞ Expo
    try {
      const Notifications = require('expo-notifications');
      const { status } = await Notifications.requestPermissionsAsync();
      const enabled = status === 'granted';
      return enabled;
    } catch (error) {
      console.error('üîî [PUSH] All permission requests failed:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¢–û–õ–¨–ö–û FCM —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ Expo fallback)
  async getToken(): Promise<string | null> {

    // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ Expo —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try {
      await AsyncStorage.removeItem('pushToken');
      const oldTokenType = await AsyncStorage.getItem('pushTokenType');
      if (oldTokenType === 'expo') {
        await AsyncStorage.removeItem('pushTokenType');
        console.log('üî• [FCM] –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π Expo —Ç–æ–∫–µ–Ω –∏–∑ –∫—ç—à–∞');
      }
    } catch (error) {
      console.log('üî• [FCM] Error cleaning old tokens:', error);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FCM —Ç–æ–∫–µ–Ω
    try {
      const cachedFCMToken = await AsyncStorage.getItem('fcmToken');
      const tokenType = await AsyncStorage.getItem('pushTokenType');

      if (cachedFCMToken && this.isFirebaseAvailable && tokenType === 'fcm') {
        return cachedFCMToken;
      }
    } catch (error) {
      console.log('üî• [FCM] Error reading cached FCM token:', error);
    }

    // –¢–û–õ–¨–ö–û Firebase FCM - —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!this.isFirebaseAvailable) {
      console.warn('üî• [FCM] ‚ö†Ô∏è Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      await this.initFirebase();

      if (!this.isFirebaseAvailable) {
        console.error('üî• [FCM] ‚ùå Firebase –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        console.error('üî• [FCM] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase:');
        return null;
      }

      console.log('üî• [FCM] ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    }

    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è iOS
      if (Platform.OS === 'ios') {
        const isRegistered = await isDeviceRegisteredForRemoteMessages();
        if (!isRegistered) {
          console.log('üî• [FCM] Registering iOS device for remote messages...');
          await registerDeviceForRemoteMessages();
        }
      }

      const fcmToken = await messaging().getToken();

      if (!fcmToken) {
        throw new Error('Firebase getToken() returned null');
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï Expo —Ç–æ–∫–µ–Ω
      if (fcmToken.startsWith('ExponentPushToken')) {
        console.error('üî• [FCM] ‚ùå Firebase –≤–µ—Ä–Ω—É–ª Expo —Ç–æ–∫–µ–Ω - —ç—Ç–æ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!');
        console.error('üî• [FCM] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ app.json –∏ google-services.json');
        return null;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û FCM —Ç–æ–∫–µ–Ω
      await AsyncStorage.setItem('fcmToken', fcmToken);
      await AsyncStorage.setItem('pushTokenType', 'fcm');

      return fcmToken;

    } catch (error) {
      console.error('üî• [FCM] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:', error);

      // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
      if (error && typeof error === 'object') {
        const errorStr = String(error);
        if (errorStr.includes('MISSING_INSTANCEID_SERVICE')) {
          console.error('üî• [FCM] ‚ùå Firebase Instance ID service –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else if (errorStr.includes('SERVICE_NOT_AVAILABLE')) {
          console.error('üî• [FCM] ‚ùå Firebase —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } else if (errorStr.includes('TOO_MANY_REQUESTS')) {
          console.error('üî• [FCM] ‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        }
      }

      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  async saveTokenToServer(token: string): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
      const lastSentToken = await AsyncStorage.getItem('lastSentToken');
      const lastSentTime = await AsyncStorage.getItem('tokenSentAt');

      if (lastSentToken === token && lastSentTime) {
        const timeSince = Date.now() - parseInt(lastSentTime);
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ç–æ—Ç –∂–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (timeSince < 24 * 60 * 60 * 1000) {
          return true;
        }
      }
      const userToken = await AsyncStorage.getItem('userToken');
      if (!userToken) {
        console.error('üî• [Firebase] No auth token found');
        return false;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      const isFirebaseToken = !token.startsWith('ExponentPushToken');
      const payload = isFirebaseToken
        ? { fcm_token: token }
        : { expo_push_token: token };

      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/api/save-push-token/`,
        payload,
        {
          headers: { 'Authorization': `Token ${userToken}` },
          timeout: 10000
        }
      );

      const success = response.status === 200;
      console.log('üî• [Firebase] Token save result:', success);

      if (success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await AsyncStorage.setItem('tokenSentToServer', 'true');
        await AsyncStorage.setItem('tokenSentAt', Date.now().toString());
        await AsyncStorage.setItem('lastSentToken', token);
      }

      return success;
    } catch (error) {
      console.error('üî• [Firebase] Save token error:', error);
      return false;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private async setupNotificationListeners(): Promise<void> {
    if (!this.isFirebaseAvailable) {
      this.setupExpoListeners();
      return;
    }

    try {
      const Notifications = require('expo-notifications');


      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è Android - —Å–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
      if (Platform.OS === 'android') {
        try {
          // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          await Notifications.setNotificationChannelGroupAsync('app-messages', {
            name: '–°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          });

          // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≥—Ä—É–ø–ø–µ
          await Notifications.setNotificationChannelAsync('urgent-messages', {
            name: '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            importance: Notifications.AndroidImportance.MAX, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
            vibrationPattern: [0, 250, 250, 250],
            lightColor: '#FF0000',
            sound: 'default',
            enableVibrate: true,
            showBadge: true,
            lockscreenVisibility: Notifications.AndroidNotificationVisibility.PUBLIC,
            bypassDnd: true, // –û–±—Ö–æ–¥ —Ä–µ–∂–∏–º–∞ "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"
            groupId: 'app-messages', // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥—Ä—É–ø–ø–µ
          });

          console.log('üî• [FCM] ‚úÖ Notification channel group created for Android');
        } catch (channelError) {
          console.error('üî• [FCM] Failed to create notification channel:', channelError);
        }
      }

      console.log('üî• [FCM] Step 5: Setting up onMessage listener...');

      // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ unsubscribe —Ñ—É–Ω–∫—Ü–∏—é
      try {
        const onMessageUnsubscribe = messaging().onMessage(async (remoteMessage: FirebaseMessagingTypes.RemoteMessage) => {
        const messageData: MessageData = {
          title: remoteMessage.notification?.title,
          body: remoteMessage.notification?.body,
          data: remoteMessage.data,
          isFirebase: true
        };



        // –í—ã–∑—ã–≤–∞–µ–º handlers –ù–ï–ú–ï–î–õ–ï–ù–ù–û
        this.messageHandlers.forEach((handler, index) => {
          try {
            handler(messageData);
          } catch (error: unknown) {
            console.error(`üî• [FCM] ‚ùå Handler ${index + 1} failed:`, error);
          }
        });

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const AppState = require('react-native').AppState;
        const currentState = AppState.currentState;
        console.log('üî• [FCM] Current app state:', currentState);

        if (currentState === 'active') {
          try {
            // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            const notificationContent: any = {
              title: messageData.title,
              body: messageData.body,
              data: {
                ...messageData.data,
                source: 'firebase_active',
                timestamp: Date.now(),
              },
              sound: 'default',
            };

            // Android - –¥–æ–±–∞–≤–ª—è–µ–º group –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if (Platform.OS === 'android') {
              notificationContent.channelId = 'urgent-messages';
              notificationContent.groupId = 'app-messages'; // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              notificationContent.groupSummary = false; // –≠—Ç–æ –Ω–µ summary —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            }

            // iOS - –¥–æ–±–∞–≤–ª—è–µ–º threadIdentifier –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if (Platform.OS === 'ios') {
              notificationContent.threadIdentifier = 'app-messages'; // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ thread
              notificationContent.categoryIdentifier = 'message'; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            }

            const activeNotificationId = await Notifications.scheduleNotificationAsync({
              content: notificationContent,
              trigger: null,
            });

            console.log('üî• [FCM] ‚úÖ Grouped notification created:', activeNotificationId);

          } catch (error) {
            console.error('üî• [FCM] ‚ùå Active app notification failed:', error);
          }
        } else {
          console.log('üî• [FCM] App in background - Firebase system notification will be shown automatically');
        }
      });

        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º unsubscribe —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        (this as any).onMessageUnsubscribe = onMessageUnsubscribe;

      } catch (onMessageError) {
        console.error('üî• [FCM] ‚ùå Failed to set up onMessage listener:', onMessageError);
        throw onMessageError;
      }

      // Expo listener –£–î–ê–õ–ï–ù - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¢–û–õ–¨–ö–û –≤ NotificationContext
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–≤–æ–π–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é

      // Firebase notification tap listeners –û–¢–ö–õ–Æ–ß–ï–ù–´
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ NotificationContext
      // Firebase —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞

      try {
        // –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        messaging().onNotificationOpenedApp(async (remoteMessage: FirebaseMessagingTypes.RemoteMessage) => {
          console.log('üî• [FCM] üì± Notification opened app - handled by NotificationContext');
          // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - NotificationContext –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
        });

        // –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        messaging().getInitialNotification()
          .then(async (remoteMessage: FirebaseMessagingTypes.RemoteMessage | null) => {
            if (remoteMessage) {
              console.log('üî• [FCM] üì± Initial notification detected - will be handled by NotificationContext');
              // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - NotificationContext –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
            }
          })
          .catch((initialError) => {
            console.error('üî• [FCM] Error getting initial notification:', initialError);
          });


        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        messaging().onTokenRefresh(async (token: string) => {
          console.log('üî• [FCM] Token refreshed:', token.substring(0, 20) + '...');
          await AsyncStorage.setItem('fcmToken', token);
          await this.saveTokenToServer(token);
        });



      } catch (listenersError) {
        console.error('üî• [FCM] ‚ùå Error setting up notification listeners:', listenersError);
      }
      try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä messaging –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        const messagingInstance = messaging();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –µ—â–µ —Ä–∞–∑
        const authStatus = await messagingInstance.hasPermission();
        console.log('üî• [FCM] Current permission status:', authStatus);
        // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          await messagingInstance.subscribeToTopic('debug_notifications');

        } catch (topicError) {
          console.log('üî• [FCM] Topic subscription failed (normal):', topicError);
        }



      } catch (activationError) {
        console.error('üî• [FCM] ‚ùå Firebase activation error:', activationError);
      }

    } catch (error) {
      console.error('üî• [Firebase] Error setting up Firebase listeners:', error);
      this.setupExpoListeners();
    }
  }

  // Fallback Expo —Å–ª—É—à–∞—Ç–µ–ª–∏  
  private setupExpoListeners(): void {
    try {
      const Notifications = require('expo-notifications');

      Notifications.setNotificationHandler({
        handleNotification: async (notification) => {
          return {
            shouldShowBanner: true,
            shouldShowList: true,
            shouldPlaySound: true,
            shouldSetBadge: true,
          };
        },
      });

      // –°–ª—É—à–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      Notifications.addNotificationReceivedListener((notification: any) => {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        let notificationData = notification.request?.content?.data || {};

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ dataString, –ø–∞—Ä—Å–∏–º –∏—Ö
        if (typeof notificationData === 'string') {
          try {
            notificationData = JSON.parse(notificationData);
          } catch (parseError) {
            console.warn('üì± [EXPO] Failed to parse notification dataString:', parseError);
            notificationData = {};
          }
        }

        const messageData = {
          title: notification.request?.content?.title || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          body: notification.request?.content?.body || '',
          data: notificationData,
          isFirebase: false
        };

        this.messageHandlers.forEach(handler => {
          try {
            handler(messageData);
          } catch (error) {
            console.error('üì± [EXPO] Error in Expo message handler:', error);
          }
        });
      });

      // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      Notifications.addNotificationResponseReceivedListener((response: any) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        let responseData = response.notification?.request?.content?.data || {};
        if (typeof responseData === 'string') {
          try {
            responseData = JSON.parse(responseData);
          } catch (parseError) {
            console.warn('üì± [EXPO] Failed to parse response dataString:', parseError);
            responseData = {};
          }
        }

        this.handleNotificationTap({ data: responseData });
      });
    } catch (error) {
      console.log('üîî [PUSH] No notification listeners available:', error);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
  async initialize(): Promise<InitResult> {
    try {
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      if (!__DEV__) {
        try {
          const firebase = require('@react-native-firebase/app').default;
          const app = firebase.app();
          console.log('üî• [PROD] Firebase Project ID:', app.options.projectId);
          console.log('üî• [PROD] Firebase App ID:', app.options.appId);

          if (!app.options.projectId) {
            console.error('üî• [PROD] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Firebase Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            console.error('üî• [PROD] ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ google-services.json/GoogleService-Info.plist');
          }
        } catch (firebaseError) {
          console.error('üî• [PROD] ‚ùå Firebase configuration error:', firebaseError);
        }
      }

      // –®–ê–ì 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
      const hasPermission = await this.requestPermissions();
      console.log('üî• [Firebase] Permission result:', hasPermission);

      if (!hasPermission) {
        console.error('üî• [Firebase] ‚ùå Permissions denied - stopping initialization');
        console.log('üî• [Firebase] Permission denied - notifications disabled');
        return { success: false, error: 'Permission denied' };
      }

      // –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let token = await this.getToken();

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      if (!token) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        token = await this.getToken();
      }

      if (!token) {
        console.error('üî• [Firebase] ‚ùå No token received after retry');
        return { success: false, error: 'No token received' };
      }

      // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      const isRealFirebaseToken = !token.startsWith('ExponentPushToken');
      const tokenType = isRealFirebaseToken ? 'Native Firebase FCM' : 'Expo (Firebase unavailable)';
      if (!isRealFirebaseToken) {
        console.warn('‚ö†Ô∏è [WARNING] Using Expo token - Firebase FCM not available in this build');
        console.warn('‚ö†Ô∏è [WARNING] Background notifications will be limited');
        console.warn('‚ö†Ô∏è [WARNING] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
      } else {
        console.log('üî• [FCM] ‚úÖ Native Firebase FCM token detected - full functionality available!');
      }

      // –®–ê–ì 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏;
      let tokenSaved = await this.saveTokenToServer(token);

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      if (!tokenSaved) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        tokenSaved = await this.saveTokenToServer(token);
      }

      if (!tokenSaved) {
        console.error('üî• [Firebase] ‚ùå Token not saved to server after retry');
        console.error('üî• [Firebase] ‚ùå Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
      } else {
        console.log('üî• [Firebase] ‚úÖ Token successfully saved to server');
      }
      // –®–ê–ì 5: –°–ù–ê–ß–ê–õ–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      this.isInitialized = true;

      // –®–ê–ì 6: –ó–ê–¢–ï–ú –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ (—ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞)
      console.log('üî• [Firebase] STEP 6: Setting up notification listeners...');
      try {
        await this.setupNotificationListeners();
      } catch (listenersError) {
        console.error('üî• [Firebase] ‚ùå Listeners setup failed:', listenersError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ listeners
      }

      // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ NotificationContext
      console.log('üî• [Firebase] Pending navigation will be handled by NotificationContext');

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      if (!__DEV__) {
        console.log('üî• [PROD] === PRODUCTION VERIFICATION ===');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const diagnosticInfo = {
          timestamp: new Date().toISOString(),
          platform: Platform.OS,
          tokenType: isRealFirebaseToken ? 'fcm' : 'expo',
          tokenLength: token.length,
          firebaseAvailable: this.isFirebaseAvailable,
          tokenSaved: tokenSaved,
          hasPermissions: hasPermission
        };

        await AsyncStorage.setItem('notificationDiagnostic', JSON.stringify(diagnosticInfo));
        console.log('üî• [PROD] Diagnostic info saved to AsyncStorage');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å

      }

      return { 
        success: true, 
        token, 
        tokenType: isRealFirebaseToken ? 'fcm' : 'expo',
        tokenSaved 
      };

    } catch (error) {
      console.error('üî• [Firebase] ‚ùå CRITICAL INITIALIZATION ERROR:', error);
      console.error('üî• [Firebase] Error details:', String(error));

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      if (!__DEV__) {
        try {
          const errorInfo = {
            timestamp: new Date().toISOString(),
            error: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : 'No stack',
            platform: Platform.OS
          };
          await AsyncStorage.setItem('notificationInitError', JSON.stringify(errorInfo));
        } catch (saveError) {
          console.error('üî• [Firebase] Could not save error info:', saveError);
        }
      }

      return { success: false, error };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  addMessageHandler(handler: MessageHandler): void {
    this.messageHandlers.push(handler);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö handlers
  clearMessageHandlers(): void {
    this.messageHandlers = [];
  }

  // executePendingNavigation –∏ checkPendingChatNavigation –£–î–ê–õ–ï–ù–´
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ NotificationContext



  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  removeMessageHandler(handler: MessageHandler): void {
    const index = this.messageHandlers.indexOf(handler);
    if (index > -1) {
      this.messageHandlers.splice(index, 1);
      console.log('üî• [Firebase] Message handler removed, total:', this.messageHandlers.length);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  async getStatus(): Promise<NotificationStatus> {
    try {
      const fcmToken = await AsyncStorage.getItem('fcmToken');
      const expoToken = await AsyncStorage.getItem('pushToken');
      const tokenType = await AsyncStorage.getItem('pushTokenType') as 'fcm' | 'expo' | null;

      const token = fcmToken || expoToken;
      const hasPermission = !!token;

      return {
        hasPermission,
        token,
        isEnabled: hasPermission,
        type: tokenType
      };
    } catch (error: unknown) {
      return {
        hasPermission: false,
        token: null,
        isEnabled: false,
        type: null
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
  async refreshToken(): Promise<string | null> {
    console.log('üî• [Firebase] Manually refreshing token...');
    const token = await this.getToken();
    if (token) {
      await this.saveTokenToServer(token);
    }
    return token;
  }
}

export default FirebaseNotificationService;