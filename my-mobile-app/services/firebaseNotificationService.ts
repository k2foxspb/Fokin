import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { API_CONFIG } from '../config';
import { 
  requestPermission, 
  getToken, 
  onMessage, 
  onTokenRefresh,
  getInitialNotification,
  onNotificationOpenedApp,
  setBackgroundMessageHandler,
  isDeviceRegisteredForRemoteMessages,
  registerDeviceForRemoteMessages,
  AuthorizationStatus 
} from '@react-native-firebase/messaging';

/**
 * –£–º–Ω—ã–π Firebase —Å–µ—Ä–≤–∏—Å —Å fallback –Ω–∞ Expo Notifications
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É Firebase –∏ Expo –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
class FirebaseNotificationService {
  private static instance: FirebaseNotificationService;
  private isFirebaseAvailable = false;
  private navigationRef: any = null;
  private messageHandlers: Array<(message: any) => void> = [];
  private isInitialized = false;
  private lastNavigationTime = 0;
  private lastChatId: string | null = null;
  private static navigationInProgress = false;
  private static lastGlobalNavigation = 0;

  public static getInstance(): FirebaseNotificationService {
    if (!FirebaseNotificationService.instance) {
      FirebaseNotificationService.instance = new FirebaseNotificationService();
    }
    return FirebaseNotificationService.instance;
  }

  constructor() {
    this.initFirebase();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
  private async initFirebase() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Firebase –º–æ–¥—É–ª–µ–π
      const isFirebaseModuleAvailable = typeof requestPermission === 'function';

      if (!isFirebaseModuleAvailable) {
        throw new Error('Firebase modules not available');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Firebase
      const authStatus = await requestPermission();
      const hasFirebasePermissions = 
        authStatus === AuthorizationStatus.AUTHORIZED || 
        authStatus === AuthorizationStatus.PROVISIONAL;

      if (!hasFirebasePermissions) {
        throw new Error('Firebase permissions not granted');
      }

      this.isFirebaseAvailable = true;
      console.log('üî• [FCM] Firebase messaging is available');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      setBackgroundMessageHandler(async (remoteMessage: any) => {
        console.log('üî• [FCM] Background message received:', {
          messageId: remoteMessage.messageId,
          from: remoteMessage.from,
          data: remoteMessage.data,
          notification: remoteMessage.notification
        });

        try {
          await this.handleBackgroundMessage(remoteMessage);
        } catch (bgError) {
          console.error('üî• [FCM] Background message handler error:', bgError);
        }
      });

      console.log('üî• [FCM] Background message handler configured');

    } catch (error) {
      this.isFirebaseAvailable = false;
      console.log('üì± [EXPO] Firebase not available, using Expo fallback');
      console.log('üì± [EXPO] Firebase init error:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleBackgroundMessage(remoteMessage: any) {
    try {
      console.log('üî• [FCM] Processing background message:', {
        messageId: remoteMessage.messageId,
        data: remoteMessage.data,
        notification: remoteMessage.notification,
        timestamp: new Date().toISOString()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (remoteMessage.data?.type === 'message_notification') {
        await AsyncStorage.setItem('lastBackgroundMessage', JSON.stringify({
          chatId: remoteMessage.data.chatId,
          senderId: remoteMessage.data.senderId,
          timestamp: Date.now(),
          processed: false,
          messageId: remoteMessage.messageId
        }));

        console.log('üî• [FCM] Background message info saved to storage (no duplicate notification created)');
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –±–µ–π–¥–∂–∞
      try {
        const Notifications = require('expo-notifications');
        const currentBadge = await Notifications.getBadgeCountAsync();
        await Notifications.setBadgeCountAsync(currentBadge + 1);
      } catch (badgeError) {
        console.log('üî• [FCM] Badge update error:', badgeError);
      }

    } catch (error) {
      console.error('üî• [FCM] Error handling background message:', error);
    }
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å Firebase –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  async requestPermissions(): Promise<boolean> {
    console.log('üîî [PUSH] Requesting permissions...');

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Firebase
    if (this.isFirebaseAvailable) {
      try {
        const authStatus = await requestPermission();
        const enabled =
          authStatus === AuthorizationStatus.AUTHORIZED ||
          authStatus === AuthorizationStatus.PROVISIONAL;

        if (enabled && Platform.OS === 'ios') {
          const isRegistered = await isDeviceRegisteredForRemoteMessages();
          if (!isRegistered) {
            await registerDeviceForRemoteMessages();
          }
        }

        console.log('üî• [FCM] Firebase permissions granted:', enabled);
        return enabled;
      } catch (error) {
        console.log('üî• [FCM] Firebase permissions failed:', error);
      }
    }

    // Fallback –Ω–∞ Expo
    try {
      const Notifications = require('expo-notifications');
      const { status } = await Notifications.requestPermissionsAsync();
      const enabled = status === 'granted';
      console.log('üì± [EXPO] Expo permissions granted:', enabled);
      return enabled;
    } catch (error) {
      console.log('üîî [PUSH] All permission requests failed:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ —Å fallback –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async getToken(): Promise<string | null> {
    console.log('üîî [PUSH] Getting push token...');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    try {
      const cachedFCMToken = await AsyncStorage.getItem('fcmToken');
      const cachedExpoToken = await AsyncStorage.getItem('pushToken');
      const tokenType = await AsyncStorage.getItem('pushTokenType');

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FCM —Ç–æ–∫–µ–Ω –∏ Firebase –¥–æ—Å—Ç—É–ø–µ–Ω
      if (cachedFCMToken && this.isFirebaseAvailable && tokenType === 'fcm') {
        console.log('üî• [FCM] ‚úÖ Using cached FCM token:', cachedFCMToken.substring(0, 20) + '...');
        return cachedFCMToken;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Expo —Ç–æ–∫–µ–Ω
      if (cachedExpoToken && tokenType === 'expo') {
        console.log('üì± [EXPO] ‚úÖ Using cached Expo token:', cachedExpoToken.substring(0, 20) + '...');
        return cachedExpoToken;
      }
    } catch (error) {
      console.log('üîî [PUSH] Error reading cached token:', error);
    }

    // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    console.log('üîî [PUSH] No cached token found, requesting new one...');

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Firebase FCM
    if (this.isFirebaseAvailable) {
      try {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è iOS
        if (Platform.OS === 'ios') {
          const isRegistered = await isDeviceRegisteredForRemoteMessages();
          if (!isRegistered) {
            console.log('üî• [FCM] Registering device for remote messages...');
            await registerDeviceForRemoteMessages();
          }
        }

        console.log('üî• [FCM] Requesting new FCM token...');
        const fcmToken = await getToken();

        if (fcmToken) {
          console.log('üî• [FCM] ‚úÖ Got new native FCM token:', fcmToken.substring(0, 20) + '...');

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
          await AsyncStorage.setItem('fcmToken', fcmToken);
          await AsyncStorage.setItem('pushTokenType', 'fcm');

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Expo —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
          await AsyncStorage.removeItem('pushToken');

          return fcmToken;
        } else {
          console.log('üî• [FCM] ‚ùå FCM token is null');
        }
      } catch (error) {
        console.log('üî• [FCM] ‚ùå FCM token error:', error);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Firebase
        if (error && typeof error === 'object') {
          const errorStr = String(error);
          if (errorStr.includes('MISSING_INSTANCEID_SERVICE') || 
              errorStr.includes('SERVICE_NOT_AVAILABLE')) {
            console.log('üî• [FCM] Firebase service not properly configured');
          }
        }
      }
    }

    // Fallback –Ω–∞ Expo
    try {
      console.log('üì± [EXPO] Falling back to new Expo token...');
      const Notifications = require('expo-notifications');

      const tokenResponse = await Notifications.getExpoPushTokenAsync({
        projectId: '7a408a11-ebbd-48ac-8f31-e0eb0f1bf1d7'
      });

      const expoToken = tokenResponse.data;
      if (expoToken) {
        console.log('üì± [EXPO] ‚úÖ Got new Expo token:', expoToken.substring(0, 20) + '...');
        console.log('‚ö†Ô∏è [WARNING] Using Expo token - background notifications may be limited');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        await AsyncStorage.setItem('pushToken', expoToken);
        await AsyncStorage.setItem('pushTokenType', 'expo');

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π FCM —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        await AsyncStorage.removeItem('fcmToken');

        return expoToken;
      }
    } catch (error) {
      console.log('üì± [EXPO] ‚ùå Expo token failed:', error);
    }

    console.log('üîî [PUSH] ‚ùå No push token available');
    return null;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  async saveTokenToServer(token: string): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
      const lastSentToken = await AsyncStorage.getItem('lastSentToken');
      const lastSentTime = await AsyncStorage.getItem('tokenSentAt');

      if (lastSentToken === token && lastSentTime) {
        const timeSince = Date.now() - parseInt(lastSentTime);
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ç–æ—Ç –∂–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (timeSince < 24 * 60 * 60 * 1000) {
          console.log('üî• [Firebase] ‚úÖ Token already sent recently, skipping...');
          return true;
        }
      }

      console.log('üî• [Firebase] Saving token to server...');

      const userToken = await AsyncStorage.getItem('userToken');
      if (!userToken) {
        console.error('üî• [Firebase] No auth token found');
        return false;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      const isFirebaseToken = !token.startsWith('ExponentPushToken');
      const payload = isFirebaseToken
        ? { fcm_token: token }
        : { expo_push_token: token };

      console.log('üî• [Firebase] Sending payload:', {
        type: isFirebaseToken ? 'FCM' : 'Expo',
        tokenLength: token.length
      });

      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/api/save-push-token/`,
        payload,
        {
          headers: { 'Authorization': `Token ${userToken}` },
          timeout: 10000
        }
      );

      const success = response.status === 200;
      console.log('üî• [Firebase] Token save result:', success);

      if (success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await AsyncStorage.setItem('tokenSentToServer', 'true');
        await AsyncStorage.setItem('tokenSentAt', Date.now().toString());
        await AsyncStorage.setItem('lastSentToken', token);
      }

      return success;
    } catch (error) {
      console.error('üî• [Firebase] Save token error:', error);
      return false;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private setupNotificationListeners(): void {
    if (!this.isFirebaseAvailable) {
      this.setupExpoListeners();
      return;
    }

    try {
      console.log('üî• [FCM] Setting up Firebase listeners...');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Firebase
      const Notifications = require('expo-notifications');
      Notifications.setNotificationHandler({
        handleNotification: async (notification: any) => {
          console.log('üî• [FCM] Handling Firebase notification display:', notification.request.identifier);

          // –î–ª—è Firebase —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const isBackground = notification.request.content.data?.fromBackground === true;

          return {
            shouldShowList: !isBackground, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            shouldPlaySound: true,
            shouldSetBadge: true,
            shouldShowBanner: !isBackground,
          };
        },
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
      onMessage(async (remoteMessage: any) => {
        console.log('üî• [FCM] Foreground message received:', remoteMessage);

        const messageData = {
          title: remoteMessage.notification?.title || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          body: remoteMessage.notification?.body || '',
          data: remoteMessage.data || {},
          isFirebase: true
        };

        // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.messageHandlers.forEach(handler => {
          try {
            handler(messageData);
          } catch (error) {
            console.error('üî• [Firebase] Error in message handler:', error);
          }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (remoteMessage.data?.type === 'message_notification') {
          await this.showLocalNotification(messageData);
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      onNotificationOpenedApp((remoteMessage: any) => {
        console.log('üî• [FCM] Notification opened app:', remoteMessage);
        this.handleNotificationTap(remoteMessage);
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ)
      getInitialNotification()
        .then((remoteMessage: any) => {
          if (remoteMessage) {
            console.log('üî• [FCM] Initial notification:', remoteMessage);
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            setTimeout(() => {
              this.handleNotificationTap(remoteMessage);
            }, 2000);
          }
        });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      onTokenRefresh(async (token: string) => {
        console.log('üî• [FCM] Token refreshed:', token.substring(0, 20) + '...');
        await AsyncStorage.setItem('fcmToken', token);
        await this.saveTokenToServer(token);
      });

      console.log('üî• [FCM] Firebase listeners configured');

    } catch (error) {
      console.error('üî• [Firebase] Error setting up Firebase listeners:', error);
      this.setupExpoListeners();
    }
  }

  // Fallback Expo —Å–ª—É—à–∞—Ç–µ–ª–∏
  private setupExpoListeners(): void {
    try {
      const Notifications = require('expo-notifications');

      Notifications.setNotificationHandler({
        handleNotification: async (notification) => {
          console.log('üì± [EXPO] Handling notification display:', notification.request.identifier);
          return {
            shouldShowList: true,
            shouldPlaySound: true,
            shouldSetBadge: true,
            shouldShowBanner: true,
          };
        },
      });

      // –°–ª—É—à–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      Notifications.addNotificationReceivedListener((notification: any) => {
        console.log('üì± [EXPO] Expo notification received:', notification);

        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        let notificationData = notification.request?.content?.data || {};

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ dataString, –ø–∞—Ä—Å–∏–º –∏—Ö
        if (typeof notificationData === 'string') {
          try {
            notificationData = JSON.parse(notificationData);
          } catch (parseError) {
            console.warn('üì± [EXPO] Failed to parse notification dataString:', parseError);
            notificationData = {};
          }
        }

        const messageData = {
          title: notification.request?.content?.title || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          body: notification.request?.content?.body || '',
          data: notificationData,
          isFirebase: false
        };

        this.messageHandlers.forEach(handler => {
          try {
            handler(messageData);
          } catch (error) {
            console.error('üì± [EXPO] Error in Expo message handler:', error);
          }
        });
      });

      // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      Notifications.addNotificationResponseReceivedListener((response: any) => {
        console.log('üì± [EXPO] Expo notification response:', response);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        let responseData = response.notification?.request?.content?.data || {};
        if (typeof responseData === 'string') {
          try {
            responseData = JSON.parse(responseData);
          } catch (parseError) {
            console.warn('üì± [EXPO] Failed to parse response dataString:', parseError);
            responseData = {};
          }
        }

        this.handleNotificationTap({ data: responseData });
      });

      console.log('üì± [EXPO] Expo listeners set up');
    } catch (error) {
      console.log('üîî [PUSH] No notification listeners available:', error);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
  async initialize(): Promise<{ success: boolean; token?: string | null; tokenType?: string; error?: any }> {
    try {
      console.log('üî• [Firebase] Initializing notification service...');

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const hasPermission = await this.requestPermissions();
      if (!hasPermission) {
        return { success: false, error: 'Permission denied' };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const token = await this.getToken();
      if (!token) {
        return { success: false, error: 'No token received' };
      }

      // –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      const isRealFirebaseToken = !token.startsWith('ExponentPushToken');
      const tokenType = isRealFirebaseToken ? 'Native Firebase FCM' : 'Expo (Firebase unavailable)';

      console.log(`üîî [TOKEN TYPE] ${tokenType}`);
      console.log(`üîî [TOKEN] ${token.substring(0, 30)}...`);

      if (!isRealFirebaseToken) {
        console.warn('‚ö†Ô∏è [WARNING] Using Expo token - Firebase FCM not available in this build');
        console.warn('‚ö†Ô∏è [WARNING] Background notifications will be limited');
      } else {
        console.log('üî• [FCM] ‚úÖ Native Firebase FCM token detected!');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const tokenSaved = await this.saveTokenToServer(token);
      if (!tokenSaved) {
        console.warn('üî• [Firebase] Token not saved to server, but continuing...');
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
      this.setupNotificationListeners();

      this.isInitialized = true;

      console.log(`üî• [Firebase] ‚úÖ Notifications initialized successfully with ${tokenType}`);

      return { success: true, token, tokenType: isRealFirebaseToken ? 'fcm' : 'expo' };

    } catch (error) {
      console.error('üî• [Firebase] Initialization error:', error);
      return { success: false, error };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  addMessageHandler(handler: (message: any) => void): void {
    this.messageHandlers.push(handler);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
  setNavigationRef(ref: any): void {
    this.navigationRef = ref;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –û–¢–ö–õ–Æ–ß–ï–ù–ê
  private handleNotificationTap(message: any) {
    try {
      const data = message.data || message;
      console.log('üî• [Firebase] ‚ö†Ô∏è Notification tap received but NAVIGATION DISABLED in Firebase service');
      console.log('üî• [Firebase] Data:', JSON.stringify(data));
      console.log('üî• [Firebase] Navigation will be handled by NotificationContext only');

      // –ùE –¥–µ–ª–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (data.type === 'message_notification' && data.chatId) {
        console.log('üî• [Firebase] Would navigate to chat:', data.chatId, 'but navigation is disabled here');
      }
    } catch (error) {
      console.error('üî• [Firebase] Error processing notification tap:', error);
    }
  }

  // –ü–æ–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private async showLocalNotification(messageData: any) {
    try {
      const Notifications = require('expo-notifications');

      await Notifications.scheduleNotificationAsync({
        content: {
          title: messageData.title,
          body: messageData.body,
          data: messageData.data,
          sound: 'default',
        },
        trigger: null,
      });
    } catch (error) {
      console.log('üî• [Firebase] Could not show local notification:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  private async checkPendingNavigation() {
    try {
      const pendingNavigation = await AsyncStorage.getItem('pendingNavigation');
      if (pendingNavigation) {
        const navData = JSON.parse(pendingNavigation);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
        if (Date.now() - navData.timestamp < 300000) {
          setTimeout(() => {
            if (this.navigationRef?.current) {
              this.navigationRef.current.navigate(navData.screen, navData.params);
              AsyncStorage.removeItem('pendingNavigation');
            }
          }, 1000);
        } else {
          AsyncStorage.removeItem('pendingNavigation');
        }
      }
    } catch (error) {
      console.log('üî• [Firebase] Error checking pending navigation:', error);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  removeMessageHandler(handler: (message: any) => void): void {
    const index = this.messageHandlers.indexOf(handler);
    if (index > -1) {
      this.messageHandlers.splice(index, 1);
      console.log('üî• [Firebase] Message handler removed, total:', this.messageHandlers.length);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  async getStatus(): Promise<{
    hasPermission: boolean;
    token: string | null;
    isEnabled: boolean;
    type: 'fcm' | 'expo' | null;
  }> {
    try {
      const fcmToken = await AsyncStorage.getItem('fcmToken');
      const expoToken = await AsyncStorage.getItem('pushToken');
      const tokenType = await AsyncStorage.getItem('pushTokenType') as 'fcm' | 'expo' | null;

      const token = fcmToken || expoToken;
      const hasPermission = !!token;

      return {
        hasPermission,
        token,
        isEnabled: hasPermission,
        type: tokenType
      };
    } catch (error) {
      return {
        hasPermission: false,
        token: null,
        isEnabled: false,
        type: null
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
  async refreshToken(): Promise<string | null> {
    console.log('üî• [Firebase] Manually refreshing token...');
    const token = await this.getToken();
    if (token) {
      await this.saveTokenToServer(token);
    }
    return token;
  }
}

export default FirebaseNotificationService;