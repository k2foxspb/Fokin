import React, {useState, useEffect, useRef} from 'react';

import {
    View,
    TextInput,
    StyleSheet,
    Text,
    Pressable,
    FlatList,
    KeyboardAvoidingView,
    Platform,
    Alert,
    ActivityIndicator,
    TouchableOpacity,
    SafeAreaView,
    Image,
    Modal,
    AppState,
    Linking,
} from 'react-native';
import {Stack, useLocalSearchParams, useRouter} from 'expo-router';
import {useWebSocket} from '../../hooks/useWebSocket';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {MaterialIcons} from '@expo/vector-icons';
import { useTheme } from '../../contexts/ThemeContext';
import { useNotifications } from '../../contexts/NotificationContext';
import CachedImage from '../../components/CachedImage';
import {API_CONFIG} from '../../config';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import * as ImagePicker from 'expo-image-picker';
import * as FileSystem from 'expo-file-system';
import { Video, ResizeMode, Audio, AVPlaybackStatus } from 'expo-av';
import * as DocumentPicker from 'expo-document-picker';
interface Message {
    id: number;
    message: string;
    timestamp: number | string;
    sender__username: string;
    sender_id?: number;
    mediaType?: 'image' | 'video' | 'file';
    mediaUri?: string;
    mediaBase64?: string;
    mediaHash?: string;
    mediaFileName?: string;
    mediaSize?: number;
    mimeType?: string;
    isUploading?: boolean;
    uploadProgress?: number;
    needsReload?: boolean;
    serverFileUrl?: string; // URL —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    uploadMethod?: 'websocket' | 'http' | 'chunk'; // –ú–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
}

interface User {
    id: number;
    username: string;
    avatar?: string;
    gender?: string;
    is_online?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
const formatTimestamp = (timestamp: number | string | undefined): string => {
    if (!timestamp) {
        return '--:--';
    }

    try {
        let date: Date;

        if (typeof timestamp === 'string') {
            if (timestamp.includes('.') && timestamp.includes(',')) {
                const cleanTimestamp = timestamp.replace(',', '');
                const parts = cleanTimestamp.split(' ');
                if (parts.length >= 2) {
                    const datePart = parts[0].split('.').reverse().join('-'); // DD.MM.YYYY -> YYYY-MM-DD
                    const timePart = parts[1];
                    date = new Date(`${datePart}T${timePart}`);
                } else {
                    date = new Date(timestamp);
                }
            } else if (timestamp.includes('-') && timestamp.includes('T')) {
                date = new Date(timestamp);
            } else {
                const numTimestamp = parseFloat(timestamp);
                if (!isNaN(numTimestamp)) {
                    date = new Date(numTimestamp < 1e10 ? numTimestamp * 1000 : numTimestamp);
                } else {
                    date = new Date(timestamp);
                }
            }
        } else if (typeof timestamp === 'number') {
            date = new Date(timestamp < 1e10 ? timestamp * 1000 : timestamp);
        } else {
            return '--:--';
        }

        if (isNaN(date.getTime())) {
            return '--:--';
        }

        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return '--:--';
    }
};

export default function ChatScreen() {
    const { theme } = useTheme();
    const { userStatuses } = useNotifications();
    const insets = useSafeAreaInsets();
    const {id: roomId} = useLocalSearchParams();
    const [messages, setMessages] = useState<Message[]>([]);
    const [messageText, setMessageText] = useState('');
    const [currentUsername, setCurrentUsername] = useState('');
    const [currentUserId, setCurrentUserId] = useState<number | null>(null);
    const [recipient, setRecipient] = useState<User | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isConnected, setIsConnected] = useState(false);
    const [isDataLoaded, setIsDataLoaded] = useState(false);
    const [page, setPage] = useState(1);
    const [hasMore, setHasMore] = useState(true);
    const [isLoadingMore, setIsLoadingMore] = useState(false);
    const [selectedImage, setSelectedImage] = useState<string | null>(null);
    const [isImageViewerVisible, setIsImageViewerVisible] = useState(false);
    const [selectedVideo, setSelectedVideo] = useState<string | null>(null);
    const [isVideoViewerVisible, setIsVideoViewerVisible] = useState(false);
    const [isVideoPlaying, setIsVideoPlaying] = useState(false);
    const [isVideoMuted, setIsVideoMuted] = useState(false); // –ò–∑–º–µ–Ω–µ–Ω–æ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–≤—É–∫ –≤–∫–ª—é—á–µ–Ω
    const [videoError, setVideoError] = useState<string | null>(null);
    const [appState, setAppState] = useState(AppState.currentState);
    const [audioSessionReady, setAudioSessionReady] = useState(false);
    const [reconnectAttempts, setReconnectAttempts] = useState(0);
    const [lastReconnectTime, setLastReconnectTime] = useState(0);
    const [inlineVideoStates, setInlineVideoStates] = useState<{[key: string]: {
        isPlaying: boolean,
        isMuted: boolean,
        isExpanded: boolean,
        duration: number,
        position: number,
        isLoaded: boolean
    }}>({});
    const [fullscreenVideoId, setFullscreenVideoId] = useState<string | null>(null);
    const flatListRef = useRef<FlatList>(null);
    const videoRef = useRef<any>(null);
    const inlineVideoRefs = useRef<{[key: string]: any}>({});
    const prevPendingCount = useRef(0);
    const router = useRouter();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const updateMessageSafely = (messageId: number | string, updates: Partial<Message>) => {
        console.log('üîí [SAFE-UPDATE] Updating message safely:', { messageId, updates: Object.keys(updates) });

        setMessages(prev =>
            prev.map(msg => {
                if (msg.id === messageId) {
                    const updatedMsg = { ...msg, ...updates };

                    console.log('üîí [SAFE-UPDATE] Message updated:', {
                        id: updatedMsg.id,
                        mediaType: updatedMsg.mediaType,
                        hasMediaUri: !!updatedMsg.mediaUri,
                        hasMediaBase64: !!updatedMsg.mediaBase64,
                        mediaHash: updatedMsg.mediaHash
                    });

                    return updatedMsg;
                }
                return msg;
            })
        );
    };

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ —Å —Ç–µ–º–æ–π
    const styles = createStyles(theme);


    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    useEffect(() => {
        const mediaMessages = messages.filter(msg => msg.mediaType);

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        const brokenMediaMessages = mediaMessages.filter(msg =>
            msg.mediaType &&
            msg.mediaHash &&
            !msg.mediaUri &&
            !msg.mediaBase64 &&
            !msg.isUploading &&
            !msg.needsReload
        );

        if (brokenMediaMessages.length > 0) {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–æ–º–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            brokenMediaMessages.forEach(async (msg) => {
                try {
                    if (msg.mediaHash) {
                        const cachedUri = await getMediaFromCache(msg.mediaHash, msg.mediaType!);
                        if (cachedUri) {
                            updateMessageSafely(msg.id, { mediaUri: cachedUri });
                        }
                    }
                } catch (restoreError) {
                    // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                }
            });
        }
    }, [messages]);

    // –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –±–µ–∑ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    useEffect(() => {
        if (!isConnected && wsIsConnected() && isDataLoaded && recipient && currentUserId) {
            console.log('üîÑ [AUTO-RESTORE] Fixing connection state');
            setIsConnected(true);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setReconnectAttempts(0);
            setLastReconnectTime(0);
        }
    }, [isConnected, isDataLoaded, recipient, currentUserId]);

    // WebSocket —Ö—É–∫
    const {connect, disconnect, sendMessage, isConnected: wsIsConnected, reconnect} = useWebSocket(
        `/${API_CONFIG.WS_PROTOCOL}/private/${roomId}/`,
        {
            onOpen: () => {
                setIsConnected(true);
                setReconnectAttempts(0);
                setLastReconnectTime(0);
            },
            onMessage: async (event: any) => {
                try {
                    const data = JSON.parse(event.data);

                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if (data.type === 'messages_by_sender_update') {
                        console.log('üí¨ [CHAT] Ignoring system message: messages_by_sender_update');
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç consumer
                    if (data.error) {
                        console.error('üí¨ [CHAT] Server error received:', data.error);
                        Alert.alert('–û—à–∏–±–∫–∞', data.error);
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–∏–ø–∞)
                    if (data.message && (!data.type || data.type === 'chat_message' || data.type === 'media_message')) {
                        const isMyMessage = (data.sender_id === currentUserId) || (data.sender__username === currentUsername);

                        const messageId = data.id || Date.now();

                        setMessages(prev => {
                            // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—â–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            if (isMyMessage) {
                                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º ID
                                const existingServerMessage = prev.find(msg => msg.id === messageId);
                                if (existingServerMessage) {
                                    console.log('üì∑ [MEDIA] ‚ö†Ô∏è Message with server ID already exists, skipping:', messageId);
                                    return prev;
                                }

                                // –ò—â–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ö—ç—à—É –º–µ–¥–∏–∞ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                                let optimisticIndex = -1;
                                const currentTime = Date.now();

                                if (data.mediaHash) {
                                    // –î–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π –∏—â–µ–º –ø–æ —Ö—ç—à—É –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
                                    optimisticIndex = prev.findIndex(msg => {
                                        const isMatchingHash = msg.mediaHash === data.mediaHash;
                                        const isMyMessage = msg.sender_id === currentUserId;
                                        const isOptimisticId = typeof msg.id === 'number' && msg.id > currentTime - 120000; // 2 –º–∏–Ω—É—Ç—ã
                                        const isNotServerMessage = msg.id !== messageId;
                                        const hasUploadingState = msg.isUploading === true;

                                        return isMatchingHash && isMyMessage && isOptimisticId && isNotServerMessage && hasUploadingState;
                                    });

                                    console.log('üì∑ [MEDIA] Searching for optimistic message:', {
                                        mediaHash: data.mediaHash.substring(0, 16) + '...',
                                        currentUserId: currentUserId,
                                        serverMessageId: messageId,
                                        currentTime: currentTime,
                                        totalMessages: prev.length,
                                        candidateMessages: prev.filter(msg =>
                                            msg.mediaHash === data.mediaHash &&
                                            msg.sender_id === currentUserId
                                        ).map(msg => ({
                                            id: msg.id,
                                            isOptimistic: typeof msg.id === 'number' && msg.id > currentTime - 120000,
                                            hasMediaUri: !!msg.mediaUri,
                                            isUploading: msg.isUploading,
                                            timestamp: msg.timestamp
                                        }))
                                    });
                                } else {
                                    // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ –≤—Ä–µ–º–µ–Ω–∏
                                    optimisticIndex = prev.findIndex(msg => {
                                        const isMatchingMessage = msg.message === data.message;
                                        const isMyMessage = msg.sender_id === currentUserId;
                                        const isRecentTimestamp = Math.abs(Number(msg.timestamp) - Number(data.timestamp)) < 60; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏–Ω—É—Ç—ã
                                        const isOptimisticId = typeof msg.id === 'number' && msg.id > currentTime - 120000;
                                        const isNotServerMessage = msg.id !== messageId;

                                        return isMatchingMessage && isMyMessage && isRecentTimestamp && isOptimisticId && isNotServerMessage;
                                    });
                                }

                                if (optimisticIndex !== -1) {
                                    console.log('üì∑ [MEDIA] ‚úÖ Found optimistic message to update:', {
                                        optimisticId: prev[optimisticIndex].id,
                                        serverMessageId: messageId,
                                        mediaHash: data.mediaHash?.substring(0, 16) + '...',
                                        optimisticHasUri: !!prev[optimisticIndex].mediaUri,
                                        optimisticIsUploading: prev[optimisticIndex].isUploading
                                    });

                                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
                                    const updatedMessages = [...prev];
                                    const originalMessage = updatedMessages[optimisticIndex];

                                        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞ URI
                                        const preservedMediaUri = originalMessage.mediaUri;
                                        const preservedMediaBase64 = originalMessage.mediaBase64;

                                        updatedMessages[optimisticIndex] = {
                                            ...originalMessage, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è
                                            id: messageId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π ID
                                            message: data.message || originalMessage.message,
                                            timestamp: data.timestamp || originalMessage.timestamp,
                                            sender__username: data.sender__username || originalMessage.sender__username,
                                            sender_id: data.sender_id || originalMessage.sender_id,
                                            isUploading: false, // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                                            uploadProgress: 100,
                                            // –ú–µ–¥–∏–∞ –ø–æ–ª—è - –ü–†–ò–û–†–ò–¢–ï–¢ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
                                            mediaType: originalMessage.mediaType || data.mediaType,
                                            mediaBase64: preservedMediaBase64 || data.mediaBase64,
                                            mediaHash: originalMessage.mediaHash || data.mediaHash,
                                            mediaFileName: originalMessage.mediaFileName || data.mediaFileName,
                                            mediaSize: originalMessage.mediaSize || data.mediaSize,
                                            mediaUri: preservedMediaUri, // –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URI
                                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                            _wasOptimistic: true,
                                            _serverConfirmed: true,
                                            _originalId: originalMessage.id
                                        };

                                        console.log('üì∑ [MEDIA] ‚úÖ Updated optimistic message with preserved media:', {
                                            oldId: originalMessage.id,
                                            newId: messageId,
                                            mediaType: updatedMessages[optimisticIndex].mediaType,
                                            hasMediaUri: !!updatedMessages[optimisticIndex].mediaUri,
                                            hasMediaBase64: !!updatedMessages[optimisticIndex].mediaBase64,
                                            mediaHash: updatedMessages[optimisticIndex].mediaHash?.substring(0, 16) + '...',
                                            preservedUri: preservedMediaUri ? preservedMediaUri.substring(preservedMediaUri.lastIndexOf('/') + 1) : 'none',
                                        uploadingState: 'completed'
                                    });

                                    return updatedMessages;
                                } else {
                                    console.log('üì∑ [MEDIA] ‚ö†Ô∏è No optimistic message found, will create new message:', {
                                        mediaHash: data.mediaHash?.substring(0, 16) + '...',
                                        messageId: messageId,
                                        searchedFor: 'optimistic with matching hash and uploading state'
                                    });
                                }
                            }

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–º ID –∏–ª–∏ —Ö—ç—à–µ–º
                            const existingById = prev.find(msg => msg.id === messageId);
                            const existingByHash = data.mediaHash ?
                                prev.find(msg => msg.mediaHash === data.mediaHash && msg.sender_id === data.sender_id && !msg.isUploading) :
                                null;

                            if (existingById || existingByHash) {
                                console.log('üì∑ [MEDIA] Message already exists, skipping:', {
                                    messageId: messageId,
                                    existsById: !!existingById,
                                    existsByHash: !!existingByHash,
                                    mediaHash: data.mediaHash?.substring(0, 16) + '...'
                                });
                                return prev;
                            } else {
                                console.log('üì∑ [MEDIA] Adding new message from other user:', {
                                    messageId: messageId,
                                    sender: data.sender__username,
                                    mediaType: data.mediaType,
                                    mediaHash: data.mediaHash?.substring(0, 16) + '...'
                                });

                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                                const isLargeFile = data.mediaSize ? (data.mediaSize / (1024 * 1024)) > 15 : false;

                                const newMessage: Message = {
                                    id: messageId,
                                    message: data.message,
                                    timestamp: data.timestamp || Math.floor(Date.now() / 1000),
                                    sender__username: data.sender__username,
                                    sender_id: data.sender_id,
                                    mediaType: data.mediaType,
                                    mediaUri: null,
                                    mediaBase64: data.mediaBase64,
                                    mediaHash: data.mediaHash,
                                    mediaFileName: data.mediaFileName,
                                    mediaSize: data.mediaSize,
                                    isUploading: false,
                                    uploadProgress: 100,
                                    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∑ base64 –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                                    needsReload: isLargeFile && !data.mediaBase64
                                };
                                return [newMessage, ...prev];
                            }
                        });

                        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª, —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫—ç—à–µ–º
                        if (data.mediaType && data.mediaHash) {
                            const isLargeFile = data.mediaSize ? (data.mediaSize / (1024 * 1024)) > 15 : false;

                            console.log('üì∑ [MEDIA] Processing media for message:', {
                                messageId: messageId,
                                mediaHash: data.mediaHash,
                                mediaType: data.mediaType,
                                hasBase64: !!data.mediaBase64,
                                base64Length: data.mediaBase64 ? data.mediaBase64.length : 0,
                                serverHashPreview: data.mediaHash.substring(0, 20) + '...',
                                isLargeFile: isLargeFile,
                                mediaSize: data.mediaSize
                            });

                            // –ï—Å–ª–∏ –Ω–µ—Ç base64 –¥–∞–Ω–Ω—ã—Ö (–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
                            if (!data.mediaBase64) {
                                console.log('üì∑ [MEDIA] Large file without base64 data, skipping cache save:', {
                                    messageId: messageId,
                                    sizeMB: data.mediaSize ? (data.mediaSize / (1024 * 1024)).toFixed(1) : 'unknown'
                                });
                                return;
                            }

                            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
                            const hashToUse = data.mediaHash;

                            console.log('üì• Media message received from server:', {
                                id: messageId,
                                type: data.mediaType,
                                size: data.mediaSize,
                                isMyMessage: isMyMessage
                            });

                            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                            getMediaFromCache(hashToUse, data.mediaType)
                                .then(async (cachedUri) => {
                                    if (cachedUri) {
                                        console.log('üì∑ [MEDIA] ‚úÖ Using cached media:', {
                                            uri: cachedUri,
                                            hash: hashToUse.substring(0, 20) + '...',
                                            messageId: messageId
                                        });
                                        setMessages(prev =>
                                            prev.map(msg => {
                                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID –∏–ª–∏ –ø–æ —Ö—ç—à—É (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ ID –ø–æ–º–µ–Ω—è–ª—Å—è)
                                                const shouldUpdate = msg.id === messageId ||
                                                    (msg.mediaHash === hashToUse && msg.sender_id === data.sender_id);

                                                if (shouldUpdate) {
                                                    console.log('üì∑ [MEDIA] Updating message with cached URI:', {
                                                        messageId: msg.id,
                                                        mediaHash: msg.mediaHash?.substring(0, 20) + '...',
                                                        cachedUri: cachedUri.substring(cachedUri.lastIndexOf('/') + 1),
                                                        preservingFields: {
                                                            mediaType: msg.mediaType,
                                                            mediaBase64: !!msg.mediaBase64
                                                        }
                                                    });

                                                    // –ë–ï–ó–û–ü–ê–°–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –ø–æ–ª—è
                                                    return {
                                                        ...msg,
                                                        mediaUri: cachedUri,
                                                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                                                        mediaType: msg.mediaType || data.mediaType,
                                                        mediaHash: msg.mediaHash || hashToUse,
                                                        mediaFileName: msg.mediaFileName || data.mediaFileName,
                                                        mediaSize: msg.mediaSize || data.mediaSize
                                                    };
                                                }
                                                return msg;
                                            })
                                        );
                                    } else if (data.mediaBase64) {
                                        console.log('üì∑ [MEDIA] Saving new media to cache with hash:', hashToUse.substring(0, 20) + '...');
                                        try {
                                            const savedUri = await saveMediaToDevice(data.mediaBase64, data.mediaType, hashToUse);

                                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                                            await saveMediaMetadata(hashToUse, {
                                                fileName: data.mediaFileName,
                                                type: data.mediaType,
                                                size: data.mediaSize,
                                                timestamp: data.timestamp,
                                                savedAt: Date.now()
                                            });

                                            // –î–ª—è –≤–∏–¥–µ–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                                            if (data.mediaType === 'video') {
                                                try {
                                                    const videoFileInfo = await FileSystem.getInfoAsync(savedUri);
                                                    console.log('üì∑ [MEDIA] Video file saved and verified:', {
                                                        uri: savedUri.substring(savedUri.lastIndexOf('/') + 1),
                                                        size: videoFileInfo.size,
                                                        exists: videoFileInfo.exists,
                                                        originalDataSize: data.mediaBase64.length
                                                    });

                                                    if (!videoFileInfo.exists || videoFileInfo.size === 0) {
                                                        console.error('üì∑ [MEDIA] ‚ùå Video file save failed or corrupted');
                                                        throw new Error('Video file save verification failed');
                                                    }
                                                } catch (verificationError) {
                                                    console.error('üì∑ [MEDIA] ‚ùå Video save verification failed:', verificationError);
                                                    // –ù–µ –ø–∞–¥–∞–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                                                }
                                            }

                                            console.log('üì∑ [MEDIA] ‚úÖ Media saved, updating message with URI:', {
                                                savedUri: savedUri.substring(savedUri.lastIndexOf('/') + 1),
                                                hash: hashToUse.substring(0, 20) + '...',
                                                messageId: messageId
                                            });
                                            setMessages(prev =>
                                                prev.map(msg => {
                                                    if (msg.id === messageId ||
                                                        (msg.mediaHash === hashToUse && msg.sender_id === data.sender_id)) {
                                                        console.log('üì∑ [MEDIA] Updating message with saved URI:', {
                                                            messageId: msg.id,
                                                            oldMediaUri: msg.mediaUri ? msg.mediaUri.substring(msg.mediaUri.lastIndexOf('/') + 1) : 'none',
                                                            newMediaUri: savedUri.substring(savedUri.lastIndexOf('/') + 1),
                                                            mediaType: msg.mediaType
                                                        });
                                                        return {
                                                            ...msg,
                                                            mediaUri: savedUri,
                                                            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–µ–¥–∏–∞-–ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
                                                            mediaType: msg.mediaType || data.mediaType,
                                                            mediaHash: msg.mediaHash || hashToUse,
                                                            mediaFileName: msg.mediaFileName || data.mediaFileName,
                                                            mediaSize: msg.mediaSize || data.mediaSize
                                                        };
                                                    }
                                                    return msg;
                                                })
                                            );
                                        } catch (error) {
                                            console.error('üì∑ [MEDIA] ‚ùå Error saving media:', error);
                                        }
                                    } else {
                                        console.log('üì∑ [MEDIA] ‚ö†Ô∏è Media not in cache and no base64 data');
                                    }
                                });
                        }

                        setTimeout(() => {
                            if (flatListRef.current) {
                                flatListRef.current.scrollToIndex({
                                    index: 0,
                                    animated: true
                                });
                            }
                        }, 100);
                    }
                } catch (error) {
                    // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            },
            onClose: () => {
                console.log('üåê [WEBSOCKET] Connection closed');
                setIsConnected(false);

                const now = Date.now();
                const timeSinceLastReconnect = now - lastReconnectTime;

                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if (timeSinceLastReconnect < 5000) { // –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    setReconnectAttempts(prev => prev + 1);

                    // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥
                    if (reconnectAttempts >= 3) {
                        console.warn('üö´ [WEBSOCKET] Too many reconnection attempts, stopping auto-reconnect');
                        return;
                    }
                }

                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                if (isDataLoaded && recipient && currentUserId) {
                    const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 10000); // –û—Ç 1 –¥–æ 10 —Å–µ–∫—É–Ω–¥

                    setTimeout(() => {
                        if (!wsIsConnected()) {
                            console.log(`üîÑ [WEBSOCKET] Reconnecting (attempt ${reconnectAttempts + 1}) after ${delay}ms...`);
                            setLastReconnectTime(Date.now());
                            reconnect();
                        }
                    }, delay);
                }
            },
            onError: (error: any) => {
                console.error('üåê [WEBSOCKET] Connection error:', error);
                setIsConnected(false);

                // –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                setTimeout(() => {
                    if (!wsIsConnected() && isDataLoaded && recipient && currentUserId) {
                        console.log('üîÑ [WEBSOCKET] Reconnecting after error...');
                        reconnect();
                    }
                }, 2000);
            }
        }
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const getToken = async () => {
        try {
            const token = await AsyncStorage.getItem('userToken');
            if (!token) {
                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
                router.replace('/login');
                return null;
            }
            return token;
        } catch (error) {
            return null;
        }
    };

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞–±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    const requestPermissions = async () => {
        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
        if (status !== 'granted') {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º');
            return false;
        }
        return true;
    };

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è URI –≤ base64 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    const convertToBase64 = async (uri: string): Promise<string> => {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            const fileInfo = await FileSystem.getInfoAsync(uri);
            if (!fileInfo.exists) {
                throw new Error('–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            const fileSizeInMB = fileInfo.size / (1024 * 1024);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è base64 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (30MB –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è OOM)
            const maxSizeForBase64 = 30 * 1024 * 1024; // 30MB
            if (fileInfo.size > maxSizeForBase64) {
                throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è base64 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${fileSizeInMB.toFixed(1)}MB > 30MB. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É.`);
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è Android
            if (Platform.OS === 'android' && fileInfo.size > 20 * 1024 * 1024) {
                console.warn('üì± [CONVERT] Large file for Android, checking memory...');
                // –î–ª—è Android —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 20MB –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                if (fileSizeInMB > 25) {
                    throw new Error(`–§–∞–π–ª ${fileSizeInMB.toFixed(1)}MB —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è base64 –Ω–∞ Android. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É.`);
                }
            }

            const base64 = await FileSystem.readAsStringAsync(uri, {
                encoding: FileSystem.EncodingType.Base64,
            });

            return base64;
        } catch (error) {
            console.error('üì± [CONVERT] ‚ùå Base64 conversion error:', error);
            throw error;
        }
    };


    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HTTP multipart/form-data –≤ Yandex Storage
    const uploadFileMultipart = async (
        fileUri: string,
        mediaType: 'image' | 'video',
        messageId: number,
        onProgress?: (progress: number) => void
    ): Promise<string> => {
        try {
            const token = await getToken();
            if (!token) {
                throw new Error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è multipart –∑–∞–≥—Ä—É–∑–∫–∏
            const formData = new FormData();

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            formData.append('file', {
                uri: fileUri,
                type: mediaType === 'image' ? 'image/jpeg' : 'video/mp4',
                name: `media_${messageId}.${mediaType === 'image' ? 'jpg' : 'mp4'}`
            } as any);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —á–∞—Ç–æ–≤
            formData.append('is_public', 'true');

            if (onProgress) {
                onProgress(10);
            }

            const endpoint = mediaType === 'image'
                ? `${API_CONFIG.BASE_URL}/media-api/upload/image/`
                : `${API_CONFIG.BASE_URL}/media-api/upload/video/`;

            const response = await axios.post(
                endpoint,
                formData,
                {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'multipart/form-data',
                    },
                    timeout: 600000, // 10 –º–∏–Ω—É—Ç
                    onUploadProgress: (progressEvent) => {
                        if (progressEvent.total) {
                            const progress = Math.round((progressEvent.loaded / progressEvent.total) * 90) + 10;
                            if (onProgress) {
                                onProgress(progress);
                            }
                        }
                    }
                }
            );

            if (onProgress) {
                onProgress(100);
            }

            if (!response.data.success) {
                throw new Error(response.data.message || '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
            }

            return response.data.file.file_url;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    };


    // –ü—Ä–æ—Å—Ç–∞—è, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è React Native
    const simpleHash = (data: string): string => {
        let hash = 0;
        let hash2 = 0;

        if (data.length === 0) return '0';

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –±–æ–ª—å—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        for (let i = 0; i < data.length; i++) {
            const char = data.charCodeAt(i);
            // –ü–µ—Ä–≤—ã–π —Ö—ç—à
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ

            // –í—Ç–æ—Ä–æ–π —Ö—ç—à —Å –¥—Ä—É–≥–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            hash2 = hash2 ^ ((hash2 << 5) + (hash2 >> 2) + char);
        }

        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±–∞ —Ö—ç—à–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex
        const combined = Math.abs(hash) + Math.abs(hash2);
        return combined.toString(16).padStart(16, '0');
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ö—ç—à–∞ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    const generateMediaHash = (base64Data: string, additionalData?: any): string => {
        const timestamp = additionalData?.timestamp || Date.now();
        const randomSuffix = Math.random().toString(36).substring(2, 15);
        const userId = additionalData?.senderId || currentUserId || 0;
        const messageId = additionalData?.messageId || Date.now();
        const fromServer = additionalData?.fromServer || false;
        const fileSize = base64Data.length;

        const chunkSize = Math.max(50, Math.min(200, Math.floor(fileSize / 20)));
        const chunks = [];

        for (let i = 0; i < 10; i++) {
            const position = Math.floor((fileSize * i) / 10);
            const chunk = base64Data.substring(position, position + chunkSize);
            chunks.push(chunk);
        }

        const start = base64Data.substring(0, Math.min(100, fileSize));
        const end = base64Data.substring(Math.max(0, fileSize - 100));
        chunks.push(start, end);

        let hashInput;
        if (fromServer) {
            hashInput = `${chunks.join('|')}|${userId}|${fileSize}|${messageId}|${timestamp}`;
        } else {
            hashInput = `${chunks.join('|')}|${timestamp}|${randomSuffix}|${userId}|${fileSize}|${messageId}`;
        }

        const hash = simpleHash(hashInput);
        const contentHash = simpleHash(base64Data.substring(0, Math.min(1000, fileSize)));
        const finalHash = simpleHash(hash + contentHash + timestamp.toString());
        const uniqueHash = btoa(finalHash + randomSuffix + fileSize).replace(/[^a-zA-Z0-9]/g, '').substring(0, 32);

        return uniqueHash;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º —Ö—ç—à–µ–º
    const checkHashExists = async (hash: string, mediaType: 'image' | 'video'): Promise<boolean> => {
        try {
            const documentsDir = FileSystem.documentDirectory;
            const fileName = `${hash}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
            const fileUri = `${documentsDir}chat_media/${fileName}`;

            const fileInfo = await FileSystem.getInfoAsync(fileUri);
            const exists = fileInfo.exists && fileInfo.size > 0;

            if (mediaType === 'video' && exists) {
                // –î–ª—è –≤–∏–¥–µ–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–≤–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º)
                const minVideoSize = 1000; // –ú–∏–Ω–∏–º—É–º 1KB –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
                if (fileInfo.size < minVideoSize) {
                    console.log('üì∑ [CACHE] Video file too small, considering as corrupted:', {
                        fileName: fileName,
                        size: fileInfo.size,
                        minRequired: minVideoSize
                    });
                    return false;
                }
            }

            return exists;
        } catch (error) {
            console.error('üì∑ [CACHE] Error checking file existence:', error);
            return false;
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å —Ö—ç—à–µ–º
    const saveMediaToDevice = async (base64Data: string, mediaType: 'image' | 'video', mediaHash?: string): Promise<string> => {
        try {
            const documentsDir = FileSystem.documentDirectory;
            let hash = mediaHash;

            if (!hash) {
                hash = generateMediaHash(base64Data);
            }

            const fileSizeInMB = (base64Data.length * 0.75) / (1024 * 1024);

            const dirUri = `${documentsDir}chat_media/`;
            const dirInfo = await FileSystem.getInfoAsync(dirUri);
            if (!dirInfo.exists) {
                await FileSystem.makeDirectoryAsync(dirUri, { intermediates: true });
            }

            let fileName = `${hash}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
            let fileUri = `${documentsDir}chat_media/${fileName}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Ö—ç—à–µ–π
            let attempt = 0;
            while (await checkHashExists(hash, mediaType) && attempt < 10) {
                try {
                    const existingData = await FileSystem.readAsStringAsync(fileUri, {
                        encoding: FileSystem.EncodingType.Base64,
                    });

                    if (existingData === base64Data) {
                        return fileUri; // –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    }

                    // –ö–æ–ª–ª–∏–∑–∏—è —Ö—ç—à–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                    hash = generateMediaHash(base64Data, {
                        collision: attempt,
                        timestamp: Date.now(),
                        additionalEntropy: Math.random().toString(36)
                    });
                    fileName = `${hash}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
                    fileUri = `${documentsDir}chat_media/${fileName}`;
                    attempt++;
                } catch (readError) {
                    console.error('Error reading existing file:', readError);
                    break;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if (fileSizeInMB > 100) {
                try {
                    const diskInfo = await FileSystem.getFreeDiskStorageAsync();
                    const requiredSpace = base64Data.length * 1.5;

                    if (diskInfo < requiredSpace) {
                        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${(requiredSpace / (1024 * 1024)).toFixed(1)}MB`);
                    }
                } catch (diskError) {
                    console.warn('Could not check disk space:', diskError);
                }
            }

            await FileSystem.writeAsStringAsync(fileUri, base64Data, {
                encoding: FileSystem.EncodingType.Base64,
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if (fileSizeInMB > 50) {
                const savedFileInfo = await FileSystem.getInfoAsync(fileUri);
                if (!savedFileInfo.exists || savedFileInfo.size === 0) {
                    throw new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                }
            }

            return fileUri;
        } catch (error) {
            console.error('Error saving file:', error);
            throw error;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞ –ø–æ —Ö—ç—à—É
    const getMediaFromCache = async (mediaHash: string, mediaType: 'image' | 'video'): Promise<string | null> => {
        try {
            const documentsDir = FileSystem.documentDirectory;
            const fileName = `${mediaHash}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
            const fileUri = `${documentsDir}chat_media/${fileName}`;

            const fileInfo = await FileSystem.getInfoAsync(fileUri);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if (fileInfo.exists && fileInfo.size > 0) {
                // –î–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                const minSize = mediaType === 'video' ? 1000 : 100; // 1KB –¥–ª—è –≤–∏–¥–µ–æ, 100B –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

                if (fileInfo.size >= minSize) {
                    console.log('üì± [CACHE] Found valid cached media:', {
                        fileName: fileName,
                        size: (fileInfo.size / (1024 * 1024)).toFixed(2) + 'MB',
                        hash: mediaHash.substring(0, 16) + '...'
                    });
                    return fileUri;
                } else {
                    console.log('üì± [CACHE] File too small, considering corrupted:', {
                        fileName: fileName,
                        size: fileInfo.size,
                        minSize: minSize
                    });
                }
            }

            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if (fileInfo.exists && fileInfo.size === 0) {
                console.log('üì± [CACHE] Found empty cached file, removing:', fileName);
                try {
                    await FileSystem.deleteAsync(fileUri);
                } catch (deleteError) {
                    console.error('üì± [CACHE] Error deleting empty file:', deleteError);
                }
            }

            // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try {
                const mediaDir = `${documentsDir}chat_media/`;
                const dirInfo = await FileSystem.getInfoAsync(mediaDir);

                if (dirInfo.exists) {
                    const files = await FileSystem.readDirectoryAsync(mediaDir);
                    const extension = mediaType === 'image' ? '.jpg' : '.mp4';

                    console.log('üì± [CACHE] Starting comprehensive search:', {
                        searchHash: mediaHash.substring(0, 16) + '...',
                        totalFiles: files.length,
                        targetType: mediaType
                    });

                    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É —Ö—ç—à–∞ (—Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã)
                    const prefixLengths = [32, 24, 16, 12, 8]; // –†–∞–∑–Ω—ã–µ –¥–ª–∏–Ω—ã –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤

                    for (const prefixLength of prefixLengths) {
                        const hashPrefix = mediaHash.substring(0, Math.min(prefixLength, mediaHash.length));
                        const matchingFiles = files.filter(file =>
                            file.startsWith(hashPrefix) && file.endsWith(extension)
                        );

                        for (const matchingFile of matchingFiles) {
                            const matchingFileUri = `${mediaDir}${matchingFile}`;
                            const matchingFileInfo = await FileSystem.getInfoAsync(matchingFileUri);

                            if (matchingFileInfo.exists && matchingFileInfo.size > 0) {
                                const minSize = mediaType === 'video' ? 1000 : 100;

                                if (matchingFileInfo.size >= minSize) {
                                    console.log('üì± [CACHE] ‚úÖ Found by prefix match:', {
                                        originalHash: mediaHash.substring(0, 16) + '...',
                                        foundFile: matchingFile,
                                        prefixLength: prefixLength,
                                        size: (matchingFileInfo.size / (1024 * 1024)).toFixed(2) + 'MB'
                                    });
                                    return matchingFileUri;
                                }
                            }
                        }
                    }

                    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ —Ö—ç—à–∞ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    const coreHash = mediaHash.substring(8, 24); // –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Ö—ç—à–∞
                    const containsHashFiles = files.filter(file =>
                        file.includes(coreHash) && file.endsWith(extension)
                    );

                    for (const matchingFile of containsHashFiles) {
                        const matchingFileUri = `${mediaDir}${matchingFile}`;
                        const matchingFileInfo = await FileSystem.getInfoAsync(matchingFileUri);

                        if (matchingFileInfo.exists && matchingFileInfo.size > 0) {
                            const minSize = mediaType === 'video' ? 1000 : 100;

                            if (matchingFileInfo.size >= minSize) {
                                console.log('üì± [CACHE] ‚úÖ Found by core hash match:', {
                                    originalHash: mediaHash.substring(0, 16) + '...',
                                    foundFile: matchingFile,
                                    coreHash: coreHash,
                                    size: (matchingFileInfo.size / (1024 * 1024)).toFixed(2) + 'MB'
                                });
                                return matchingFileUri;
                            }
                        }
                    }

                    // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –∏ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
                    const typeFiles = files.filter(file => file.endsWith(extension));
                    const now = Date.now();

                    for (const typeFile of typeFiles) {
                        const typeFileUri = `${mediaDir}${typeFile}`;
                        const typeFileInfo = await FileSystem.getInfoAsync(typeFileUri);

                        if (typeFileInfo.exists && typeFileInfo.size > 0) {
                            const minSize = mediaType === 'video' ? 1000 : 100;
                            const fileAge = now - typeFileInfo.modificationTime;
                            const isRecent = fileAge < 2 * 60 * 60 * 1000; // –ú–µ–Ω–µ–µ 2 —á–∞—Å–æ–≤

                            if (typeFileInfo.size >= minSize && isRecent) {
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º –¥–ª—è –≤–∏–¥–µ–æ
                                const isLikelyMatch = mediaType === 'image' ||
                                    (mediaType === 'video' && typeFileInfo.size > 100000); // >100KB –¥–ª—è –≤–∏–¥–µ–æ

                                if (isLikelyMatch) {
                                    console.log('üì± [CACHE] ‚úÖ Found by type and recency:', {
                                        originalHash: mediaHash.substring(0, 16) + '...',
                                        foundFile: typeFile,
                                        size: (typeFileInfo.size / (1024 * 1024)).toFixed(2) + 'MB',
                                        ageMinutes: Math.round(fileAge / (1000 * 60))
                                    });
                                    return typeFileUri;
                                }
                            }
                        }
                    }
                }
            } catch (dirError) {
                console.error('üì± [CACHE] Error in comprehensive search:', dirError);
            }

            console.log('üì± [CACHE] Media not found in cache (tried all methods):', {
                fileName: fileName,
                hash: mediaHash.substring(0, 16) + '...',
                type: mediaType
            });
            return null;
        } catch (error) {
            console.error('üì± [CACHE] Error getting file from cache:', error);
            return null;
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    const saveMediaMetadata = async (mediaHash: string, metadata: any) => {
        try {
            const metadataKey = `media_${mediaHash}`;
            await AsyncStorage.setItem(metadataKey, JSON.stringify(metadata));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    const getMediaMetadata = async (mediaHash: string) => {
        try {
            const metadataKey = `media_${mediaHash}`;
            const metadata = await AsyncStorage.getItem(metadataKey);
            return metadata ? JSON.parse(metadata) : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    };

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    const diagnoseLargeFilesCache = async () => {
        try {
            console.log('üîç [DIAGNOSIS] === DIAGNOSING LARGE FILES CACHE ===');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            const largeFilesList = await AsyncStorage.getItem('large_files_list');
            if (largeFilesList) {
                const files = JSON.parse(largeFilesList);
                console.log('üîç [DIAGNOSIS] Large files in tracking list:', files.length);

                for (let i = 0; i < Math.min(files.length, 5); i++) {
                    const file = files[i];
                    console.log(`üîç [DIAGNOSIS] File ${i+1}:`, {
                        messageId: file.messageId,
                        sizeMB: file.fileSizeMB,
                        savedAt: new Date(file.savedAt).toLocaleString(),
                        hash: file.mediaHash?.substring(0, 16) + '...'
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                    if (file.savedUri) {
                        try {
                            const fileInfo = await FileSystem.getInfoAsync(file.savedUri);
                            console.log(`üîç [DIAGNOSIS] File ${i+1} status:`, {
                                exists: fileInfo.exists,
                                size: fileInfo.exists ? (fileInfo.size / (1024*1024)).toFixed(1) + 'MB' : 'N/A'
                            });
                        } catch (checkError) {
                            console.log(`üîç [DIAGNOSIS] File ${i+1} check failed:`, checkError.message);
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º backup –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    const backupKey = `large_media_${file.messageId}`;
                    const backupData = await AsyncStorage.getItem(backupKey);
                    console.log(`üîç [DIAGNOSIS] File ${i+1} backup metadata:`, !!backupData);
                }
            } else {
                console.log('üîç [DIAGNOSIS] No large files tracking list found');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            const documentsDir = FileSystem.documentDirectory;
            const mediaDir = `${documentsDir}chat_media/`;

            try {
                const files = await FileSystem.readDirectoryAsync(mediaDir);
                console.log('üîç [DIAGNOSIS] Files in media directory:', files.length);

                let largeFilesCount = 0;
                for (const fileName of files) {
                    const filePath = `${mediaDir}${fileName}`;
                    const fileInfo = await FileSystem.getInfoAsync(filePath);
                    if (fileInfo.size > 15 * 1024 * 1024) { // >15MB
                        largeFilesCount++;
                    }
                }
                console.log('üîç [DIAGNOSIS] Large files (>15MB) in directory:', largeFilesCount);

            } catch (dirError) {
                console.log('üîç [DIAGNOSIS] Media directory check failed:', dirError.message);
            }

        } catch (error) {
            console.error('üîç [DIAGNOSIS] Diagnosis failed:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
    const cleanupOldMediaFiles = async () => {
        try {
            console.log('üßπ [CLEANUP] Starting media files cleanup');
            const documentsDir = FileSystem.documentDirectory;
            const mediaDir = `${documentsDir}chat_media/`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            const dirInfo = await FileSystem.getInfoAsync(mediaDir);
            if (!dirInfo.exists) {
                console.log('üßπ [CLEANUP] Media directory does not exist, nothing to cleanup');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–µ–¥–∏–∞
            const files = await FileSystem.readDirectoryAsync(mediaDir);
            console.log('üßπ [CLEANUP] Found media files:', files.length);

            let cleanedCount = 0;
            const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            const now = Date.now();

            for (const fileName of files) {
                try {
                    const filePath = `${mediaDir}${fileName}`;
                    const fileInfo = await FileSystem.getInfoAsync(filePath);

                    // –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π —É–¥–∞–ª—è–µ–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö)
                    const fileAge = now - fileInfo.modificationTime;
                    if (fileAge > maxAge) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                        const hash = fileName.split('.')[0];
                        const metadata = await getMediaMetadata(hash);

                        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (!metadata || (now - metadata.savedAt) > maxAge) {
                            await FileSystem.deleteAsync(filePath);
                            if (metadata) {
                                await AsyncStorage.removeItem(`media_${hash}`);
                            }
                            cleanedCount++;
                            console.log('üßπ [CLEANUP] Deleted old file:', fileName);
                        }
                    }
                } catch (fileError) {
                    console.error('üßπ [CLEANUP] Error processing file:', fileName, fileError);
                }
            }

            console.log('üßπ [CLEANUP] Cleanup completed:', {
                totalFiles: files.length,
                deletedFiles: cleanedCount
            });

        } catch (error) {
            console.error('üßπ [CLEANUP] Error during cleanup:', error);
        }
    };

    // –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const pickImage = async () => {
        console.log('üì∑ [PICKER] Starting image picker...');
        try {
            const hasPermission = await requestPermissions();
            if (!hasPermission) {
                console.log('üì∑ [PICKER] ‚ùå No permission for media library');
                return;
            }

            console.log('üì∑ [PICKER] Launching image library...');
            const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ['images'],
                allowsEditing: false,
                quality: 0.8,
                base64: true,
            });

            console.log('üì∑ [PICKER] Image picker result:', {
                canceled: result.canceled,
                assetsCount: result.assets?.length || 0
            });

            if (!result.canceled && result.assets[0]) {
                const asset = result.assets[0];
                console.log('üì∑ [PICKER] Asset details:', {
                    hasBase64: !!asset.base64,
                    base64Length: asset.base64?.length || 0,
                    uri: asset.uri,
                    width: asset.width,
                    height: asset.height,
                    fileSize: asset.fileSize,
                    fileName: asset.fileName
                });

                if (asset.base64) {
                    console.log('üì∑ [PICKER] Sending unique image with timestamp:', Date.now());
                    await sendMediaMessage(asset.base64, 'image');
                } else {
                    console.log('üì∑ [PICKER] ‚ùå No base64 data in asset, trying to convert from URI');

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
                    if (asset.fileSize) {
                        const fileSizeMB = asset.fileSize / (1024 * 1024);
                        console.log('üì∑ [PICKER] File size before conversion:', fileSizeMB.toFixed(1) + 'MB');

                        // –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö P2P
                        if (fileSizeMB > 100) {
                            console.log('üì∑ [PICKER] Large image detected - P2P size limit');
                            Alert.alert(
                                '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ',
                                `–†–∞–∑–º–µ—Ä: ${fileSizeMB.toFixed(1)}MB\n–ú–∞–∫—Å–∏–º—É–º –¥–ª—è P2P –ø–µ—Ä–µ–¥–∞—á–∏: 100MB\n\n–î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–ª–∞—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.`,
                                [{ text: '–ü–æ–Ω—è—Ç–Ω–æ' }]
                            );
                            return;
                        }
                    }

                    try {
                        console.log('üì∑ [PICKER] Starting URI to base64 conversion...');
                        const base64 = await convertToBase64(asset.uri);
                        console.log('üì∑ [PICKER] Successfully converted URI to base64, length:', base64.length);
                        await sendMediaMessage(base64, 'image');
                    } catch (convertError) {
                        console.error('üì∑ [PICKER] ‚ùå Failed to convert URI to base64:', convertError);

                        const errorMessage = convertError.toString();

                        if (errorMessage.includes('OutOfMemoryError') || errorMessage.includes('allocation') || errorMessage.includes('memory')) {
                            Alert.alert(
                                '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏',
                                `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø–∞–º—è—Ç–∏.\n\n–†–∞–∑–º–µ—Ä: ${asset.fileSize ? Math.round(asset.fileSize / (1024 * 1024)) + 'MB' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n‚Ä¢ –°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`,
                                [
                                    { text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' },
                                    {
                                        text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É',
                                        style: 'default',
                                        onPress: async () => {
                                            try {
                                                console.log('üì∑ [PICKER] Trying direct upload after memory error...');
                                                await sendMediaMessageDirect(asset.uri, 'image', asset.fileSize);
                                            } catch (directError) {
                                                console.error('üì∑ [PICKER] Direct upload also failed:', directError);
                                                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.');
                                            }
                                        }
                                    }
                                ]
                            );
                        } else if (errorMessage.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π') || errorMessage.includes('30MB')) {
                            Alert.alert(
                                '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
                                `–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.\n\n–†–∞–∑–º–µ—Ä: ${asset.fileSize ? Math.round(asset.fileSize / (1024 * 1024)) + 'MB' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n–õ–∏–º–∏—Ç: 30MB\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É?`,
                                [
                                    { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                                    {
                                        text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é',
                                        style: 'default',
                                        onPress: async () => {
                                            try {
                                                await sendMediaMessageDirect(asset.uri, 'image', asset.fileSize);
                                            } catch (directError) {
                                                console.error('üì∑ [PICKER] Direct upload failed:', directError);
                                                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä—è–º—ã–º —Å–ø–æ—Å–æ–±–æ–º.');
                                            }
                                        }
                                    }
                                ]
                            );
                        } else {
                            // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                            Alert.alert(
                                '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                                `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n–û—à–∏–±–∫–∞: ${convertError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ`
                            );
                        }
                    }
                }

            }
        } catch (error) {
            console.error('üì∑ [PICKER] ‚ùå Error picking image:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        }
    };

    // –í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const pickDocument = async () => {
        console.log('üìÑ [PICKER] Starting document picker...');
        try {
            const result = await DocumentPicker.getDocumentAsync({
                type: '*/*',
                copyToCacheDirectory: true,
                multiple: false,
            });

            console.log('üìÑ [PICKER] Document picker result:', {
                canceled: result.canceled,
                type: result.type
            });

            if (!result.canceled && result.assets && result.assets[0]) {
                const asset = result.assets[0];
                console.log('üìÑ [PICKER] Document details:', {
                    name: asset.name,
                    size: asset.size,
                    mimeType: asset.mimeType,
                    uri: asset.uri
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100MB –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
                const maxSize = 100 * 1024 * 1024; // 100MB
                if (asset.size && asset.size > maxSize) {
                    Alert.alert(
                        '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
                        `–†–∞–∑–º–µ—Ä: ${Math.round(asset.size / 1024 / 1024)}MB. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 100MB.`
                    );
                    return;
                }

                const fileSizeMB = asset.size ? asset.size / (1024 * 1024) : 0;

                try {
                    if (fileSizeMB > 10) {
                        // –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É
                        console.log('üìÑ [PICKER] Using direct upload for large document');
                        await sendDocumentDirect(asset.uri, asset.name || 'document', asset.mimeType || 'application/octet-stream', asset.size);
                    } else {
                        // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
                        console.log('üìÑ [PICKER] Converting document to base64...');
                        const base64 = await convertToBase64(asset.uri);
                        await sendDocumentMessage(base64, asset.name || 'document', asset.mimeType || 'application/octet-stream', asset.size);
                    }
                } catch (error) {
                    console.error('üìÑ [PICKER] ‚ùå Document processing failed:', error);
                    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.');
                }
            }
        } catch (error) {
            console.error('üìÑ [PICKER] ‚ùå Error picking document:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    };

    // –í—ã–±–æ—Ä –≤–∏–¥–µ–æ
    const pickVideo = async () => {
        console.log('üé• [PICKER] Starting video picker...');
        try {
            const hasPermission = await requestPermissions();
            if (!hasPermission) {
                console.log('üé• [PICKER] ‚ùå No permission for media library');
                return;
            }

            const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ['videos'],
                allowsEditing: true,
                quality: 0.3, // –°–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                videoMaxDuration: 60, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥
            });

            console.log('üé• [PICKER] Video picker result:', {
                canceled: result.canceled,
                assetsCount: result.assets?.length || 0
            });

            if (!result.canceled && result.assets[0]) {
                const asset = result.assets[0];
                console.log('üé• [PICKER] Video asset details:', {
                    uri: asset.uri,
                    duration: asset.duration,
                    width: asset.width,
                    height: asset.height,
                    fileSize: asset.fileSize,
                    fileName: asset.fileName,
                    uniqueId: Date.now() + Math.random()
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 300MB —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∞)
                const maxVideoSize = 300 * 1024 * 1024; // 300MB
                if (asset.fileSize && asset.fileSize > maxVideoSize) {
                    Alert.alert(
                        '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
                        `–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: ${Math.round(asset.fileSize / 1024 / 1024)}MB. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 300MB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ.`
                    );
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –º–∏–Ω—É—Ç)
                const maxDuration = 600000; // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                if (asset.duration && asset.duration > maxDuration) {
                    Alert.alert(
                        '–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ',
                        `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(asset.duration / 1000)}—Å–µ–∫. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç.`
                    );
                    return;
                }

                try {
                    const fileSizeMB = asset.fileSize ? asset.fileSize / (1024 * 1024) : 0;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
                    const videoInfo = {
                        uri: asset.uri,
                        fileName: asset.fileName,
                        mimeType: asset.mimeType,
                        duration: asset.duration,
                        width: asset.width,
                        height: asset.height
                    };

                    console.log('üé• [PICKER] Processing video file:', {
                        sizeMB: fileSizeMB.toFixed(1),
                        uri: asset.uri,
                        fileName: asset.fileName,
                        mimeType: asset.mimeType,
                        duration: asset.duration ? Math.round(asset.duration / 1000) + 's' : 'unknown',
                        resolution: `${asset.width}x${asset.height}`,
                        strategy: fileSizeMB > 30 ? 'direct_upload' : 'base64_conversion'
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
                    const supportedFormats = ['video/mp4', 'video/mov', 'video/avi', 'video/quicktime'];
                    const isUnsupportedFormat = asset.mimeType && !supportedFormats.some(format =>
                        asset.mimeType?.includes(format.split('/')[1])
                    );

                    if (isUnsupportedFormat) {
                        const shouldContinue = await new Promise<boolean>((resolve) => {
                            Alert.alert(
                                '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç',
                                `–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ "${asset.mimeType}" –º–æ–∂–µ—Ç –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, MOV\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É?`,
                                [
                                    { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel', onPress: () => resolve(false) },
                                    { text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', style: 'default', onPress: () => resolve(true) }
                                ]
                            );
                        });

                        if (!shouldContinue) return;
                    }

                    // –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 30MB –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É –±–µ–∑ base64
                    if (fileSizeMB > 30) {
                        console.log('üé• [PICKER] Using direct file upload for large video');
                        await sendMediaMessageDirect(asset.uri, 'video', asset.fileSize);
                    } else {
                        console.log('üé• [PICKER] Converting smaller video to base64...');

                        // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
                        const base64 = await convertToBase64(asset.uri);

                        console.log('üé• [PICKER] Video converted successfully:', {
                            originalFileSize: asset.fileSize,
                            base64Length: base64.length,
                            compressionRatio: asset.fileSize ? (base64.length / asset.fileSize * 100).toFixed(1) + '%' : 'unknown',
                            timestamp: Date.now()
                        });

                        await sendMediaMessage(base64, 'video');
                    }

                } catch (conversionError) {
                    console.error('üé• [PICKER] ‚ùå Video processing failed:', conversionError);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –ø–∞–º—è—Ç–∏
                    const errorMessage = conversionError.toString();
                    if (errorMessage.includes('OutOfMemoryError') || errorMessage.includes('allocation')) {
                        Alert.alert(
                            '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞–º—è—Ç–∏',
                            `–í–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º ${Math.round(asset.fileSize / (1024 * 1024))}MB —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø–∞–º—è—Ç–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n‚Ä¢ –°–∂–∞—Ç—å –≤–∏–¥–µ–æ –≤ –¥—Ä—É–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏`,
                            [
                                { text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' },
                                {
                                    text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É',
                                    style: 'default',
                                    onPress: async () => {
                                        try {
                                            console.log('üé• [PICKER] Trying direct upload after memory error...');
                                            await sendMediaMessageDirect(asset.uri, 'video', asset.fileSize);
                                        } catch (directError) {
                                            console.error('üé• [PICKER] Direct upload also failed:', directError);
                                            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø—Ä—è–º—ã–º —Å–ø–æ—Å–æ–±–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.');
                                        }
                                    }
                                }
                            ]
                        );
                    } else {
                        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.');
                    }
                }
            }
        } catch (error) {
            console.error('üé• [PICKER] ‚ùå Error picking video:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ');
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ base64
    const sendDocumentMessage = async (base64Data: string, fileName: string, mimeType: string, fileSize?: number) => {
        if (!isConnected || !isDataLoaded || !recipient?.id || !currentUserId) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
            return;
        }

        try {
            const timestamp = Math.floor(Date.now() / 1000);
            const messageId = Date.now();
            const mediaHash = generateMediaHash(base64Data, { timestamp, messageId, senderId: currentUserId });

            // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const optimisticMessage: Message = {
                id: messageId,
                message: `üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "${fileName}"...`,
                timestamp: timestamp,
                sender__username: currentUsername,
                sender_id: currentUserId,
                mediaType: 'file',
                mediaUri: null,
                mediaBase64: base64Data,
                mediaHash: mediaHash,
                mediaFileName: fileName,
                mediaSize: fileSize || base64Data.length,
                mimeType: mimeType,
                isUploading: true,
                uploadProgress: 0
            };

            setMessages(prev => [optimisticMessage, ...prev]);

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const fileExtension = fileName.split('.').pop() || 'bin';
            const tempUri = `${FileSystem.cacheDirectory}temp_${messageId}.${fileExtension}`;
            await FileSystem.writeAsStringAsync(tempUri, base64Data, {
                encoding: FileSystem.EncodingType.Base64
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const fileUrl = await uploadFileGeneric(
                tempUri,
                fileName,
                mimeType,
                messageId,
                (progress) => {
                    setMessages(prev =>
                        prev.map(msg => {
                            if (msg.id === messageId) {
                                return {
                                    ...msg,
                                    uploadProgress: progress,
                                    message: `üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ "${fileName}"... ${progress}%`
                                };
                            }
                            return msg;
                        })
                    );
                }
            );

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await FileSystem.deleteAsync(tempUri, { idempotent: true });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL —Å–µ—Ä–≤–µ—Ä–∞
            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return {
                            ...msg,
                            isUploading: false,
                            uploadProgress: 100,
                            message: `üìÑ ${fileName}`,
                            serverFileUrl: fileUrl
                        };
                    }
                    return msg;
                })
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            const messageData = {
                type: 'media_message',
                message: `üìÑ ${fileName}`,
                mediaType: 'file',
                mediaHash: mediaHash,
                fileUrl: fileUrl,
                fileName: fileName,
                mimeType: mimeType,
                timestamp: timestamp,
                user1: currentUserId,
                user2: recipient.id,
                id: messageId
            };

            sendMessage(messageData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ base64)
    const sendDocumentDirect = async (fileUri: string, fileName: string, mimeType: string, fileSize?: number) => {
        console.log('üì§ [DIRECT-DOC] ========== SENDING DOCUMENT DIRECT ==========');

        if (!isConnected || !isDataLoaded || !recipient?.id || !currentUserId) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
            return;
        }

        const fileInfo = await FileSystem.getInfoAsync(fileUri);
        if (!fileInfo.exists) {
            Alert.alert('–û—à–∏–±–∫–∞', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const actualFileSize = fileInfo.size;
        const fileSizeMB = actualFileSize / (1024 * 1024);

        try {
            const timestamp = Math.floor(Date.now() / 1000);
            const messageId = Date.now();
            const mediaHash = `doc_${messageId}_${actualFileSize}_${timestamp}`;

            // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const optimisticMessage: Message = {
                id: messageId,
                message: `üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "${fileName}"...`,
                timestamp: timestamp,
                sender__username: currentUsername,
                sender_id: currentUserId,
                mediaType: 'file',
                mediaUri: fileUri,
                mediaBase64: undefined,
                mediaHash: mediaHash,
                mediaFileName: fileName,
                mediaSize: actualFileSize,
                mimeType: mimeType,
                isUploading: true,
                uploadProgress: 0,
                uploadMethod: fileSizeMB > 50 ? 'chunk' : 'http'
            };

            setMessages(prev => [optimisticMessage, ...prev]);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const fileUrl = await uploadFileGeneric(
                fileUri,
                fileName,
                mimeType,
                messageId,
                (progress) => {
                    setMessages(prev =>
                        prev.map(msg => {
                            if (msg.id === messageId) {
                                return {
                                    ...msg,
                                    uploadProgress: progress,
                                    message: `üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ "${fileName}"... ${progress}%`
                                };
                            }
                            return msg;
                        })
                    );
                }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return {
                            ...msg,
                            isUploading: false,
                            uploadProgress: 100,
                            message: `üìÑ ${fileName}`,
                            serverFileUrl: fileUrl
                        };
                    }
                    return msg;
                })
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            const messageData = {
                type: 'media_message',
                message: `üìÑ ${fileName}`,
                mediaType: 'file',
                mediaHash: mediaHash,
                fileUrl: fileUrl,
                fileName: fileName,
                mimeType: mimeType,
                timestamp: timestamp,
                user1: currentUserId,
                user2: recipient.id,
                id: messageId
            };

            sendMessage(messageData);

        } catch (error) {
            console.error('üì§ [DIRECT-DOC] ‚ùå Error uploading document:', error);

            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return {
                            ...msg,
                            isUploading: false,
                            message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "${fileName}"`,
                            uploadProgress: 0
                        };
                    }
                    return msg;
                })
            );

            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    };

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    const uploadFileGeneric = async (
        fileUri: string,
        fileName: string,
        mimeType: string,
        messageId: number,
        onProgress?: (progress: number) => void
    ): Promise<string> => {
        try {
            const token = await getToken();
            if (!token) {
                throw new Error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
            const formData = new FormData();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint
            let endpoint = `${API_CONFIG.BASE_URL}/media-api/upload/file/`;

            if (mimeType.startsWith('image/')) {
                endpoint = `${API_CONFIG.BASE_URL}/media-api/upload/image/`;
            } else if (mimeType.startsWith('video/')) {
                endpoint = `${API_CONFIG.BASE_URL}/media-api/upload/video/`;
            }

            // –î–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —É–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º MIME —Ç–∏–ø–µ
            let finalMimeType = mimeType;
            if (mimeType.startsWith('video/') && !mimeType.includes('mp4') && !mimeType.includes('mov') && !mimeType.includes('avi')) {
                // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mp4
                finalMimeType = 'video/mp4';
                console.log('üé• [UPLOAD] Corrected MIME type from', mimeType, 'to', finalMimeType);
            }

            formData.append('file', {
                uri: fileUri,
                type: finalMimeType,
                name: fileName
            } as any);

            console.log('üì§ [UPLOAD] Upload details:', {
                fileName: fileName,
                originalMimeType: mimeType,
                finalMimeType: finalMimeType,
                endpoint: endpoint,
                fileUri: fileUri.substring(fileUri.lastIndexOf('/') + 1)
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —á–∞—Ç–æ–≤
            formData.append('is_public', 'true');

            if (onProgress) {
                onProgress(10);
            }

            const response = await axios.post(
                endpoint,
                formData,
                {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'multipart/form-data',
                    },
                    timeout: 600000, // 10 –º–∏–Ω—É—Ç
                    onUploadProgress: (progressEvent) => {
                        if (progressEvent.total) {
                            const progress = Math.round((progressEvent.loaded / progressEvent.total) * 90) + 10;
                            if (onProgress) {
                                onProgress(progress);
                            }
                        }
                    }
                }
            );

            if (onProgress) {
                onProgress(100);
            }

            if (!response.data.success) {
                throw new Error(response.data.message || '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
            }

            return response.data.file.file_url;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Ñ–∞–π–ª (–±–µ–∑ base64)
    const sendMediaMessageDirect = async (fileUri: string, mediaType: 'image' | 'video', fileSize?: number) => {
        console.log('üì§ [DIRECT] ========== SENDING MEDIA FILE DIRECT ==========');
        console.log('üì§ [DIRECT] File URI:', fileUri);
        console.log('üì§ [DIRECT] Media type:', mediaType);
        console.log('üì§ [DIRECT] File size:', fileSize);

        if (!isConnected || !isDataLoaded || !recipient?.id || !currentUserId) {
            console.log('üì§ [DIRECT] ‚ùå Cannot send - missing requirements');
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        const fileInfo = await FileSystem.getInfoAsync(fileUri);
        if (!fileInfo.exists) {
            Alert.alert('–û—à–∏–±–∫–∞', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const actualFileSize = fileInfo.size;
        const fileSizeMB = actualFileSize / (1024 * 1024);

        console.log('üì§ [DIRECT] File info:', {
            exists: fileInfo.exists,
            size: actualFileSize,
            sizeMB: fileSizeMB.toFixed(1)
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if (fileSizeMB > 2048) { // 2GB –ª–∏–º–∏—Ç
            Alert.alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π', `–†–∞–∑–º–µ—Ä: ${fileSizeMB.toFixed(1)}MB. –ú–∞–∫—Å–∏–º—É–º: 2048MB`);
            return;
        }

        try {
            const timestamp = Math.floor(Date.now() / 1000);
            const messageId = Date.now();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ (–±–µ–∑ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
            const mediaHash = `file_${messageId}_${actualFileSize}_${timestamp}`;
            const mediaFileName = `${mediaHash}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;

            console.log('üì§ [DIRECT] Generated metadata:', {
                messageId: messageId,
                mediaHash: mediaHash,
                mediaFileName: mediaFileName
            });

            // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const optimisticMessage: Message = {
                id: messageId,
                message: mediaType === 'image' ? 'üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...' : 'üé• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...',
                timestamp: timestamp,
                sender__username: currentUsername,
                sender_id: currentUserId,
                mediaType: mediaType,
                mediaUri: fileUri, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URI
                mediaBase64: undefined, // –ù–µ—Ç base64 –¥–∞–Ω–Ω—ã—Ö
                mediaHash: mediaHash,
                mediaFileName: mediaFileName,
                mediaSize: actualFileSize,
                isUploading: true,
                uploadProgress: 0,
                uploadMethod: fileSizeMB > 100 ? 'chunk' : 'http'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
            setMessages(prev => [optimisticMessage, ...prev]);

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            setTimeout(() => {
                if (flatListRef.current) {
                    flatListRef.current.scrollToIndex({ index: 0, animated: true });
                }
            }, 100);

            // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
            let uploadSuccess = false;
            let serverFileUrl = '';

            if (fileSizeMB > 100) {
                // Chunk upload –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                console.log('üì§ [DIRECT] Using chunk upload for large file');

                try {
                    serverFileUrl = await uploadLargeFileChunkedDirect(
                        fileUri,
                        mediaType,
                        messageId,
                        (progress) => {
                            setMessages(prev =>
                                prev.map(msg => {
                                    if (msg.id === messageId) {
                                        return {
                                            ...msg,
                                            uploadProgress: progress,
                                            message: `üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ ${mediaType === 'image' ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–≤–∏–¥–µ–æ'}... ${progress}%`
                                        };
                                    }
                                    return msg;
                                })
                            );
                        }
                    );
                    uploadSuccess = true;
                    console.log('üì§ [DIRECT] Chunk upload successful');
                } catch (chunkError) {
                    console.error('üì§ [DIRECT] Chunk upload failed:', chunkError);

                    // –ï—Å–ª–∏ chunk upload –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º multipart
                    const errorMessage = chunkError.message || chunkError.toString();
                    if (errorMessage.includes('CHUNK_NOT_SUPPORTED') ||
                        (axios.isAxiosError(chunkError) && chunkError.response?.status === 404)) {

                        console.log('üì§ [DIRECT] Chunk upload not supported, trying multipart...');

                        try {
                            const fileName = `media_${messageId}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
                            const mimeType = mediaType === 'image' ? 'image/jpeg' : 'video/mp4';

                            serverFileUrl = await uploadFileGeneric(
                                fileUri,
                                fileName,
                                mimeType,
                                messageId,
                                (progress) => {
                                    setMessages(prev =>
                                        prev.map(msg => {
                                            if (msg.id === messageId) {
                                                return {
                                                    ...msg,
                                                    uploadProgress: progress,
                                                    message: `üì§ –ó–∞–≥—Ä—É–∑–∫–∞ ${mediaType === 'image' ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–≤–∏–¥–µ–æ'}... ${progress}%`
                                                };
                                            }
                                            return msg;
                                        })
                                    );
                                }
                            );
                            uploadSuccess = true;
                            console.log('üì§ [DIRECT] Fallback generic upload successful');
                        } catch (genericError) {
                            console.error('üì§ [DIRECT] Fallback generic also failed:', genericError);
                        }
                    }
                }
            } else {
                // HTTP multipart upload –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
                console.log('üì§ [DIRECT] Using HTTP multipart upload');

                try {
                    const fileName = `media_${messageId}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
                    const mimeType = mediaType === 'image' ? 'image/jpeg' : 'video/mp4';

                    serverFileUrl = await uploadFileGeneric(
                        fileUri,
                        fileName,
                        mimeType,
                        messageId,
                        (progress) => {
                            setMessages(prev =>
                                prev.map(msg => {
                                    if (msg.id === messageId) {
                                        return {
                                            ...msg,
                                            uploadProgress: progress,
                                            message: `üì§ –ó–∞–≥—Ä—É–∑–∫–∞ ${mediaType === 'image' ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–≤–∏–¥–µ–æ'}... ${progress}%`
                                        };
                                    }
                                    return msg;
                                })
                            );
                        }
                    );
                    uploadSuccess = true;
                    console.log('üì§ [DIRECT] HTTP upload successful');
                } catch (httpError) {
                    console.error('üì§ [DIRECT] HTTP upload failed:', httpError);

                    // –ï—Å–ª–∏ multipart –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ base64
                    const errorMessage = httpError.message || httpError.toString();
                    if (errorMessage.includes('MULTIPART_NOT_SUPPORTED') ||
                        (axios.isAxiosError(httpError) && httpError.response?.status === 404)) {

                        console.log('üì§ [DIRECT] Multipart not supported, trying base64 conversion...');

                        if (fileSizeMB <= 30) { // –¢–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤ <= 30MB
                            try {
                                setMessages(prev =>
                                    prev.map(msg => {
                                        if (msg.id === messageId) {
                                            return {
                                                ...msg,
                                                message: `üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64...`,
                                                uploadProgress: 20
                                            };
                                        }
                                        return msg;
                                    })
                                );

                                const base64 = await convertToBase64(fileUri);
                                await sendMediaMessage(base64, mediaType);

                                // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ sendMediaMessage —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ
                                setMessages(prev => prev.filter(msg => msg.id !== messageId));

                                console.log('üì§ [DIRECT] ‚úÖ Base64 fallback successful');
                                return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                            } catch (base64Error) {
                                console.error('üì§ [DIRECT] Base64 fallback failed:', base64Error);
                            }
                        } else {
                            console.log('üì§ [DIRECT] File too large for base64 fallback:', fileSizeMB + 'MB');
                        }
                    }
                }
            }

            if (uploadSuccess && serverFileUrl) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                setMessages(prev =>
                    prev.map(msg => {
                        if (msg.id === messageId) {
                            return {
                                ...msg,
                                isUploading: false,
                                uploadProgress: 100,
                                message: mediaType === 'image' ? 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'üé• –í–∏–¥–µ–æ',
                                serverFileUrl: serverFileUrl
                            };
                        }
                        return msg;
                    })
                );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                const messageData = {
                    type: 'media_message',
                    message: mediaType === 'image' ? 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'üé• –í–∏–¥–µ–æ',
                    mediaType: mediaType,
                    mediaHash: mediaHash,
                    fileUrl: serverFileUrl,
                    timestamp: timestamp,
                    user1: currentUserId,
                    user2: recipient.id,
                    id: messageId
                };

                sendMessage(messageData);

            } else {
                // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                setMessages(prev =>
                    prev.map(msg => {
                        if (msg.id === messageId) {
                            return {
                                ...msg,
                                isUploading: false,
                                message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${mediaType === 'image' ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–≤–∏–¥–µ–æ'}`,
                                uploadProgress: 0
                            };
                        }
                        return msg;
                    })
                );

                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª');
            }

        } catch (error) {
            console.error('üì§ [DIRECT] ‚ùå Error uploading file:', error);

            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return {
                            ...msg,
                            isUploading: false,
                            message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${mediaType === 'image' ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–≤–∏–¥–µ–æ'}`,
                            uploadProgress: 0
                        };
                    }
                    return msg;
                })
            );

            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª');
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP multipart –∑–∞–≥—Ä—É–∑–∫—É
    const sendMediaMessage = async (base64Data: string, mediaType: 'image' | 'video') => {
        if (!isConnected || !isDataLoaded || !recipient?.id || !currentUserId) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª');
            return;
        }

        const dataSizeInMB = (base64Data.length * 0.75) / (1024 * 1024);

        if (dataSizeInMB > 800) { // –õ–∏–º–∏—Ç 800MB
            Alert.alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π', `–†–∞–∑–º–µ—Ä: ${dataSizeInMB.toFixed(1)}MB. –ú–∞–∫—Å–∏–º—É–º: 800MB`);
            return;
        }

        try {
            const timestamp = Math.floor(Date.now() / 1000);
            const messageId = Date.now();
            const mediaHash = generateMediaHash(base64Data, { timestamp, messageId, senderId: currentUserId });

            // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const optimisticMessage: Message = {
                id: messageId,
                message: mediaType === 'image' ? 'üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...' : 'üé• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...',
                timestamp: timestamp,
                sender__username: currentUsername,
                sender_id: currentUserId,
                mediaType: mediaType,
                mediaUri: null,
                mediaBase64: base64Data,
                mediaHash: mediaHash,
                mediaFileName: `${mediaHash}.${mediaType === 'image' ? 'jpg' : 'mp4'}`,
                mediaSize: base64Data.length,
                isUploading: true,
                uploadProgress: 0
            };

            setMessages(prev => [optimisticMessage, ...prev]);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            const savedUri = await saveMediaToDevice(base64Data, mediaType, mediaHash);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º URI
            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return { ...msg, mediaUri: savedUri };
                    }
                    return msg;
                })
            );

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const tempUri = `${FileSystem.cacheDirectory}temp_${messageId}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
            await FileSystem.writeAsStringAsync(tempUri, base64Data, {
                encoding: FileSystem.EncodingType.Base64
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const fileName = `media_${messageId}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
            const mimeType = mediaType === 'image' ? 'image/jpeg' : 'video/mp4';

            const fileUrl = await uploadFileGeneric(
                tempUri,
                fileName,
                mimeType,
                messageId,
                (progress) => {
                    setMessages(prev =>
                        prev.map(msg => {
                            if (msg.id === messageId) {
                                return {
                                    ...msg,
                                    uploadProgress: progress,
                                    message: `${mediaType === 'image' ? 'üì∑' : 'üé•'} –ó–∞–≥—Ä—É–∑–∫–∞... ${progress}%`
                                };
                            }
                            return msg;
                        })
                    );
                }
            );

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await FileSystem.deleteAsync(tempUri, { idempotent: true });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL —Å–µ—Ä–≤–µ—Ä–∞
            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return {
                            ...msg,
                            isUploading: false,
                            uploadProgress: 100,
                            message: mediaType === 'image' ? 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'üé• –í–∏–¥–µ–æ',
                            serverFileUrl: fileUrl
                        };
                    }
                    return msg;
                })
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            const messageData = {
                type: 'media_message',
                message: mediaType === 'image' ? 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'üé• –í–∏–¥–µ–æ',
                mediaType: mediaType,
                mediaHash: mediaHash,
                fileUrl: fileUrl,
                timestamp: timestamp,
                user1: currentUserId,
                user2: recipient.id,
                id: messageId
            };

            sendMessage(messageData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞:', error);

            setMessages(prev =>
                prev.map(msg => {
                    if (msg.id === messageId) {
                        return {
                            ...msg,
                            isUploading: false,
                            message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${mediaType === 'image' ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : '–≤–∏–¥–µ–æ'}`,
                            uploadProgress: 0
                        };
                    }
                    return msg;
                })
            );

            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª');
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const fetchCurrentUser = async () => {
        try {
            const token = await getToken();
            if (!token) return null;

            const response = await axios.get(
                `${API_CONFIG.BASE_URL}/profile/api/profile/me/`,
                {
                    headers: {'Authorization': `Token ${token}`}
                }
            );

            const userData = {
                id: response.data.id,
                username: response.data.username
            };

            setCurrentUsername(userData.username);
            setCurrentUserId(userData.id);

            return userData;
        } catch (error) {
            if (axios.isAxiosError(error) && error.response?.status === 401) {
                Alert.alert('–û—à–∏–±–∫–∞', '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
                router.replace('/(auth)/login');
            }
            return null;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    const fetchRecipientInfo = async () => {
        try {
            const token = await getToken();
            if (!token) return null;

            const response = await axios.get(
                `${API_CONFIG.BASE_URL}/chat/api/room/${roomId}/info/`,
                {
                    headers: {'Authorization': `Token ${token}`}
                }
            );

            const recipientData = {
                id: response.data.other_user.id,
                username: response.data.other_user.username,
                avatar: response.data.other_user.avatar,
                is_online: response.data.other_user.is_online
            };

            setRecipient(recipientData);

            return recipientData;
        } catch (error) {
            if (axios.isAxiosError(error) && error.response?.status === 401) {
                Alert.alert('–û—à–∏–±–∫–∞', '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
                router.replace('/(auth)/login');
            }
            return null;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const fetchChatHistory = async (pageNum: number = 1, limit: number = 15) => {
        try {
            const token = await getToken();
            if (!token) return;

            console.log('üìú [HISTORY] Loading chat history...', { pageNum, limit, roomId });

            const response = await axios.get(
                `${API_CONFIG.BASE_URL}/profile/api/chat_history/${roomId}/`,
                {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'application/json',
                    },
                    params: {
                        page: pageNum,
                        limit: limit
                    }
                }
            );

            console.log('üìú [HISTORY] Server response:', {
                hasData: !!response.data,
                hasMessages: !!(response.data && response.data.messages),
                messagesCount: response.data?.messages?.length || 0
            });

            if (response.data?.messages?.length > 0) {
                console.log('üìú [HISTORY] Sample message from server:', response.data.messages[0]);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è
                const mediaMessages = response.data.messages.filter(msg =>
                    msg.mediaType || msg.media_type ||
                    msg.mediaHash || msg.media_hash
                );

                if (mediaMessages.length > 0) {
                    console.log('üìú [HISTORY] Media messages in history:', {
                        count: mediaMessages.length,
                        sample: mediaMessages[0]
                    });
                }
            }

            if (response.data && response.data.messages) {
                const processedMessages = await Promise.all(
                    response.data.messages.map(async (msg: any, index: number) => {
                        console.log(`üìú [HISTORY] Processing message ${index + 1}:`, {
                            id: msg.id,
                            sender: msg.sender__username,
                            hasMediaType: !!(msg.mediaType || msg.media_type),
                            hasMediaHash: !!(msg.mediaHash || msg.media_hash),
                            hasMediaBase64: !!(msg.mediaBase64 || msg.media_base64),
                            mediaSize: msg.mediaSize || msg.media_size,
                            message: msg.message?.substring(0, 50)
                        });

                        const processedMsg = {
                            ...msg,
                            timestamp: msg.timestamp,
                            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
                            mediaType: msg.mediaType || msg.media_type || null,
                            mediaHash: msg.mediaHash || msg.media_hash || null,
                            mediaFileName: msg.mediaFileName || msg.media_filename || null,
                            mediaSize: msg.mediaSize || msg.media_size || null,
                            mediaBase64: null, // –í –∏—Å—Ç–æ—Ä–∏–∏ base64 –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
                            mediaUri: null // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞
                        };

                        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫—ç—à–∞
                        if (processedMsg.mediaType && processedMsg.mediaHash) {
                            const fileSizeInMB = processedMsg.mediaSize ? processedMsg.mediaSize / (1024 * 1024) : 0;
                            const isLargeFile = fileSizeInMB > 15;

                            console.log('üì∑ [HISTORY] ==> RESTORING MEDIA FROM CACHE <==');
                            console.log('üì∑ [HISTORY] Media details:', {
                                hash: processedMsg.mediaHash.substring(0, 16) + '...',
                                type: processedMsg.mediaType,
                                messageId: processedMsg.id,
                                sizeMB: fileSizeInMB.toFixed(1),
                                isLargeFile: isLargeFile,
                                fileName: `${processedMsg.mediaHash}.${processedMsg.mediaType === 'image' ? 'jpg' : 'mp4'}`
                            });

                            try {
                                let cachedUri = await getMediaFromCache(processedMsg.mediaHash, processedMsg.mediaType);

                                // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∫—ç—à–µ, –∏—â–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                                if (!cachedUri) {
                                    console.log('üì∑ [HISTORY] Not found in standard cache, trying alternative methods...');

                                    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ backup –∑–∞–ø–∏—Å—è–º (–¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –Ω–µ —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏—Ö)
                                    try {
                                        const backupKey = `large_media_${processedMsg.id}`;
                                        const backupData = await AsyncStorage.getItem(backupKey);

                                        if (backupData) {
                                            const backup = JSON.parse(backupData);
                                            console.log('üì∑ [HISTORY] Found backup record:', {
                                                messageId: processedMsg.id,
                                                backupUri: backup.mediaUri,
                                                backupHash: backup.mediaHash?.substring(0, 16) + '...'
                                            });

                                            if (backup.mediaUri && backup.mediaHash === processedMsg.mediaHash) {
                                                const backupFileInfo = await FileSystem.getInfoAsync(backup.mediaUri);
                                                if (backupFileInfo.exists && backupFileInfo.size > 0) {
                                                    cachedUri = backup.mediaUri;
                                                    console.log('üì∑ [HISTORY] ‚úÖ Restored from backup record!');
                                                }
                                            }
                                        }
                                    } catch (backupError) {
                                        console.error('üì∑ [HISTORY] Backup search error:', backupError);
                                    }

                                    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
                                    if (!cachedUri) {
                                        try {
                                            const largeFilesList = await AsyncStorage.getItem('large_files_list');
                                            if (largeFilesList) {
                                                const files = JSON.parse(largeFilesList);

                                                // –ò—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                                                let matchingFile = files.find(f => f.mediaHash === processedMsg.mediaHash);

                                                if (!matchingFile) {
                                                    matchingFile = files.find(f => f.messageId === processedMsg.id);
                                                }

                                                // –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –∏ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
                                                if (!matchingFile && processedMsg.mediaSize) {
                                                    const targetSizeMB = processedMsg.mediaSize / (1024 * 1024);
                                                    matchingFile = files.find(f =>
                                                        f.mediaType === processedMsg.mediaType &&
                                                        Math.abs(f.fileSizeMB - targetSizeMB) < 0.5 // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 0.5MB
                                                    );
                                                }

                                                // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ö—ç—à–∞
                                                if (!matchingFile && processedMsg.mediaHash) {
                                                    const hashPrefix = processedMsg.mediaHash.substring(0, 16);
                                                    matchingFile = files.find(f =>
                                                        f.mediaHash &&
                                                        f.mediaHash.startsWith(hashPrefix) &&
                                                        f.mediaType === processedMsg.mediaType
                                                    );
                                                }

                                                if (matchingFile && matchingFile.savedUri) {
                                                    const fileInfo = await FileSystem.getInfoAsync(matchingFile.savedUri);
                                                    if (fileInfo.exists && fileInfo.size > 0) {
                                                        cachedUri = matchingFile.savedUri;
                                                        console.log('üì∑ [HISTORY] ‚úÖ Found in large files list:', {
                                                            method: matchingFile.mediaHash === processedMsg.mediaHash ? 'exact_hash' :
                                                                   matchingFile.messageId === processedMsg.id ? 'message_id' :
                                                                   'fuzzy_match',
                                                            file: matchingFile.fileName || 'unknown',
                                                            size: (fileInfo.size / (1024 * 1024)).toFixed(1) + 'MB'
                                                        });
                                                    }
                                                }
                                            }
                                        } catch (listError) {
                                            console.error('üì∑ [HISTORY] Large files list search error:', listError);
                                        }
                                    }

                                    // –ú–µ—Ç–æ–¥ 3: –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å)
                                    if (!cachedUri) {
                                        try {
                                            const documentsDir = FileSystem.documentDirectory;
                                            const mediaDir = `${documentsDir}chat_media/`;
                                            const dirInfo = await FileSystem.getInfoAsync(mediaDir);

                                            if (dirInfo.exists) {
                                                const files = await FileSystem.readDirectoryAsync(mediaDir);
                                                const extension = processedMsg.mediaType === 'image' ? '.jpg' : '.mp4';
                                                const relevantFiles = files.filter(fileName => fileName.endsWith(extension));

                                                console.log('üì∑ [HISTORY] Smart directory search:', {
                                                    totalFiles: files.length,
                                                    relevantFiles: relevantFiles.length,
                                                    targetType: processedMsg.mediaType,
                                                    targetSize: processedMsg.mediaSize,
                                                    searchHash: processedMsg.mediaHash?.substring(0, 16) + '...'
                                                });

                                                // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Ö—ç—à—É (—Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
                                                if (processedMsg.mediaHash) {
                                                    const hashParts = [
                                                        processedMsg.mediaHash.substring(0, 16),
                                                        processedMsg.mediaHash.substring(8, 24),
                                                        processedMsg.mediaHash.substring(16, 32)
                                                    ];

                                                    for (const hashPart of hashParts) {
                                                        const matchingFiles = relevantFiles.filter(fileName =>
                                                            fileName.includes(hashPart)
                                                        );

                                                        for (const fileName of matchingFiles) {
                                                            const filePath = `${mediaDir}${fileName}`;
                                                            const fileInfo = await FileSystem.getInfoAsync(filePath);

                                                            if (fileInfo.exists && fileInfo.size > 0) {
                                                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                                                                let sizeMatch = true;
                                                                if (processedMsg.mediaSize) {
                                                                    const sizeDiff = Math.abs(fileInfo.size - processedMsg.mediaSize);
                                                                    const sizeRatio = sizeDiff / processedMsg.mediaSize;
                                                                    sizeMatch = sizeRatio < 0.1; // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 10%
                                                                }

                                                                if (sizeMatch) {
                                                                    cachedUri = filePath;
                                                                    console.log('üì∑ [HISTORY] ‚úÖ Found by smart search:', {
                                                                        fileName: fileName,
                                                                        matchedHashPart: hashPart,
                                                                        size: (fileInfo.size / (1024 * 1024)).toFixed(1) + 'MB',
                                                                        sizeMatch: sizeMatch
                                                                    });
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        if (cachedUri) break;
                                                    }
                                                }

                                                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ç–∏–ø—É (–¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
                                                if (!cachedUri && processedMsg.mediaSize) {
                                                    const now = Date.now();
                                                    const targetSize = processedMsg.mediaSize;

                                                    for (const fileName of relevantFiles) {
                                                        const filePath = `${mediaDir}${fileName}`;
                                                        const fileInfo = await FileSystem.getInfoAsync(filePath);

                                                        if (fileInfo.exists && fileInfo.size > 0) {
                                                            const sizeDiff = Math.abs(fileInfo.size - targetSize);
                                                            const sizeRatio = sizeDiff / targetSize;
                                                            const fileAge = now - fileInfo.modificationTime;
                                                            const isRecent = fileAge < 24 * 60 * 60 * 1000; // –ú–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤

                                                            if (sizeRatio < 0.05 && isRecent) { // –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–π —Ä–∞–∑–º–µ—Ä –∏ –Ω–µ–¥–∞–≤–Ω–∏–π
                                                                cachedUri = filePath;
                                                                console.log('üì∑ [HISTORY] ‚úÖ Found by size+time heuristic:', {
                                                                    fileName: fileName,
                                                                    sizeMatch: (sizeRatio * 100).toFixed(1) + '%',
                                                                    ageHours: Math.round(fileAge / (1000 * 60 * 60))
                                                                });
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } catch (dirError) {
                                            console.error('üì∑ [HISTORY] Smart directory search error:', dirError);
                                        }
                                    }
                                }

                                if (cachedUri) {
                                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                                    const fileInfo = await FileSystem.getInfoAsync(cachedUri);
                                    const isValidFile = fileInfo.exists && fileInfo.size > 0;

                                    // –î–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                    const isValidVideo = processedMsg.mediaType !== 'video' || fileInfo.size > 1000;

                                    if (isValidFile && isValidVideo) {
                                        processedMsg.mediaUri = cachedUri;

                                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º backup –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                        processedMsg._cacheRestored = true;
                                        processedMsg._cacheTimestamp = Date.now();

                                        console.log('üì∑ [HISTORY] ‚úÖ Successfully restored media from cache:', {
                                            type: processedMsg.mediaType,
                                            fileName: cachedUri.substring(cachedUri.lastIndexOf('/') + 1),
                                            messageId: processedMsg.id,
                                            fileSize: (fileInfo.size / (1024 * 1024)).toFixed(1) + 'MB',
                                            method: 'comprehensive_search'
                                        });

                                        // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é backup –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                                        try {
                                            const backupKey = `history_media_${processedMsg.id}`;
                                            const backupData = {
                                                messageId: processedMsg.id,
                                                mediaType: processedMsg.mediaType,
                                                mediaHash: processedMsg.mediaHash,
                                                mediaUri: cachedUri,
                                                restoredAt: Date.now(),
                                                fileSize: fileInfo.size,
                                                isHistory: true
                                            };
                                            await AsyncStorage.setItem(backupKey, JSON.stringify(backupData));
                                            console.log('üì∑ [HISTORY] Created history backup record');
                                        } catch (backupError) {
                                            console.error('üì∑ [HISTORY] Failed to create backup record:', backupError);
                                        }
                                    } else {
                                        console.log('üì∑ [HISTORY] ‚ùå Found file is invalid:', {
                                            exists: fileInfo.exists,
                                            size: fileInfo.size,
                                            isVideo: processedMsg.mediaType === 'video',
                                            minSizeOk: isValidVideo
                                        });
                                        cachedUri = null;
                                    }
                                }

                                // –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω
                                if (!cachedUri) {
                                    console.log('üì∑ [HISTORY] ‚ùå Media NOT found in any cache location:', {
                                        hash: processedMsg.mediaHash.substring(0, 16) + '...',
                                        type: processedMsg.mediaType,
                                        sizeMB: fileSizeInMB.toFixed(1),
                                        messageId: processedMsg.id
                                    });

                                    // –¢–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>15MB) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                                    if (fileSizeInMB > 15) {
                                        processedMsg.needsReload = true;
                                        processedMsg.message = processedMsg.mediaType === 'image'
                                            ? `üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${fileSizeInMB.toFixed(1)}MB (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ)`
                                            : `üé• –í–∏–¥–µ–æ ${fileSizeInMB.toFixed(1)}MB (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ)`;
                                        console.log('üì∑ [HISTORY] ‚ùå Large file marked for reload:', {
                                            size: fileSizeInMB.toFixed(1) + 'MB',
                                            type: processedMsg.mediaType,
                                            messageId: processedMsg.id
                                        });
                                    } else {
                                        // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 15MB –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞
                                        processedMsg.message = processedMsg.mediaType === 'image'
                                            ? `üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${fileSizeInMB.toFixed(1)}MB`
                                            : `üé• –í–∏–¥–µ–æ ${fileSizeInMB.toFixed(1)}MB`;
                                        console.log('üì∑ [HISTORY] Small file will show as text message:', {
                                            size: fileSizeInMB.toFixed(1) + 'MB',
                                            type: processedMsg.mediaType,
                                            messageId: processedMsg.id
                                        });
                                    }
                                }
                            } catch (error) {
                                console.error('üì∑ [HISTORY] ‚ùå Error restoring media:', error);
                                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞
                                processedMsg.message = processedMsg.mediaType === 'image'
                                    ? `üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)`
                                    : `üé• –í–∏–¥–µ–æ (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)`;
                            }
                        } else {
                            console.log('üìú [HISTORY] Text message (no media):', processedMsg.id);
                        }

                        console.log('üìú [HISTORY] Final processed message:', {
                            id: processedMsg.id,
                            mediaType: processedMsg.mediaType,
                            mediaHash: processedMsg.mediaHash,
                            hasMediaUri: !!processedMsg.mediaUri,
                            hasMediaBase64: !!processedMsg.mediaBase64,
                            mediaSize: processedMsg.mediaSize,
                            needsReload: processedMsg.needsReload,
                            mediaUri: processedMsg.mediaUri ? processedMsg.mediaUri.substring(processedMsg.mediaUri.lastIndexOf('/') + 1) : 'none'
                        });

                        return processedMsg;
                    })
                );

                if (pageNum === 1) {
                    // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ù–ï –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –º–µ—Ä–∂–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
                    setMessages(prev => {
                        // –ù–µ —Ä–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º - —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
                        const historyMessages = processedMessages;

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
                        const existingNewMessages = prev.filter(existingMsg => {
                            return !historyMessages.some(historyMsg => historyMsg.id === existingMsg.id);
                        });

                        console.log('üìú [HISTORY] Merging messages:', {
                            historyCount: historyMessages.length,
                            existingNewCount: existingNewMessages.length,
                            historyMediaCount: historyMessages.filter(msg => msg.mediaType).length,
                            existingMediaCount: existingNewMessages.filter(msg => msg.mediaType).length
                        });

                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π - –Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞
                        const mergedMessages = [...existingNewMessages, ...historyMessages];

                        console.log('üìú [HISTORY] Final merged messages media count:',
                            mergedMessages.filter(msg => msg.mediaType).length
                        );

                        return mergedMessages;
                    });
                    setPage(1);

                    // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ URI
                    setTimeout(async () => {
                        console.log('üìú [HISTORY] Post-load media recovery started');

                        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                        setTimeout(() => {
                            console.log('üìú [HISTORY] Current messages state before recovery:');
                            const currentMessages = messages;
                            const mediaMessages = currentMessages.filter(msg => msg.mediaType);
                            console.log('üìú [HISTORY] Total media messages:', mediaMessages.length);

                            mediaMessages.forEach((msg, idx) => {
                                const sizeMB = msg.mediaSize ? (msg.mediaSize / (1024 * 1024)).toFixed(1) : '?';
                                console.log(`üìú [HISTORY] Media msg ${idx + 1}:`, {
                                    id: msg.id,
                                    type: msg.mediaType,
                                    sizeMB: sizeMB + 'MB',
                                    hasUri: !!msg.mediaUri,
                                    hasBase64: !!msg.mediaBase64,
                                    hasHash: !!msg.mediaHash,
                                    hash: msg.mediaHash?.substring(0, 16) + '...',
                                    needsReload: msg.needsReload
                                });
                            });
                        }, 100);

                        await retryMediaRecovery();
                    }, 500);
                } else {
                    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü (—Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
                    setMessages(prev => [...prev, ...processedMessages]);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                setHasMore(processedMessages.length === limit);

                if (pageNum === 1) {
                    // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                    setTimeout(() => {
                        if (flatListRef.current && processedMessages.length > 0) {
                            flatListRef.current.scrollToIndex({
                                index: 0,
                                animated: false
                            });
                        }
                    }, 100);
                }
            }
        } catch (error) {
            if (axios.isAxiosError(error) && error.response?.status === 401) {
                Alert.alert('–û—à–∏–±–∫–∞', '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
                router.replace('/(auth)/login');
            }
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const loadMoreMessages = async () => {
        if (!hasMore || isLoadingMore) return;

        setIsLoadingMore(true);
        const nextPage = page + 1;

        try {
            await fetchChatHistory(nextPage, 15);
            setPage(nextPage);
        } finally {
            setIsLoadingMore(false);
        }
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const setupAudioSession = async () => {
            try {
                await Audio.setAudioModeAsync({
                    allowsRecordingIOS: false,
                    staysActiveInBackground: true, // –ò–∑–º–µ–Ω–µ–Ω–æ: –ø–æ–∑–≤–æ–ª—è–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ
                    interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,
                    playsInSilentModeIOS: true,
                    shouldDuckAndroid: true,
                    interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,
                    playThroughEarpieceAndroid: false
                });
                setAudioSessionReady(true);
                console.log('üé• [AUDIO] Audio session configured successfully on component mount');
            } catch (audioError) {
                console.warn('üé• [AUDIO] Failed to configure audio session:', audioError);
                setAudioSessionReady(false);
            }
        };

        setupAudioSession();
    }, []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    useEffect(() => {
        const subscription = AppState.addEventListener('change', nextAppState => {
            console.log('üé• [APP-STATE] App state changed:', appState, '->', nextAppState);
            setAppState(nextAppState);
        });

        return () => {
            subscription?.remove();
        };
    }, [appState]);

    // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    useEffect(() => {
        if (isVideoViewerVisible && selectedVideo && !isVideoPlaying && appState === 'active') {
            const timer = setTimeout(() => {
                forcePlayVideo();
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

            return () => clearTimeout(timer);
        }
    }, [isVideoViewerVisible, selectedVideo, appState]);

    useEffect(() => {
        if (!roomId) {
            router.back();
            return;
        }

        const initializeChat = async () => {
            setIsLoading(true);
            try {
                const currentUser = await fetchCurrentUser();
                const recipientInfo = await fetchRecipientInfo();
                await fetchChatHistory();

                if (currentUser && recipientInfo) {
                    setIsDataLoaded(true);

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫—ç—à–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    diagnoseLargeFilesCache().catch(error => {
                        console.error('üîç [DIAGNOSIS] Background diagnosis failed:', error);
                    });

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ–Ω–µ
                    cleanupOldMediaFiles().catch(error => {
                        console.error('üßπ [CLEANUP] Background cleanup failed:', error);
                    });

                    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
                    setTimeout(() => {
                        connect();
                    }, 100);
                } else {
                    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
                }

            } catch (error) {
                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç');
            } finally {
                setIsLoading(false);
            }
        };

        initializeChat();

        return () => {
            disconnect();
        };
    }, [roomId]);

    // –¢–µ—Å—Ç-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    const testServerConnection = () => {
        console.log('üß™ [CHAT-TEST] Testing server connection...');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥
        const pingMessage = {
            type: 'ping',
            timestamp: Date.now()
        };

        try {
            sendMessage(pingMessage);
            console.log('üß™ [CHAT-TEST] Ping sent, waiting for pong...');

            setTimeout(() => {
                console.log('üß™ [CHAT-TEST] 3 seconds passed - did server respond?');
            }, 3000);
        } catch (error) {
            // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping —Å–æ–æ–±—â–µ–Ω–∏—è
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleSend = () => {
        console.log('üí¨ [CHAT] ========== SENDING MESSAGE ==========');
        console.log('üí¨ [CHAT] Send conditions check:', {
            hasText: !!messageText.trim(),
            isConnected: isConnected,
            isDataLoaded: isDataLoaded,
            hasRecipient: !!recipient?.id,
            hasCurrentUser: !!currentUserId,
            messageLength: messageText.trim().length
        });

        if (!messageText.trim() || !isConnected || !isDataLoaded || !recipient?.id || !currentUserId) {
            console.log('üí¨ [CHAT] ‚ùå Cannot send - missing requirements');
            return;
        }

        // –¢–ï–°–¢: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if (messageText.trim() === '/test') {
            testServerConnection();
            setMessageText('');
            return;
        }

        const timestamp = Math.floor(Date.now() / 1000);

        const messageData = {
            type: 'chat_message', // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ type
            message: messageText.trim(),
            timestamp: timestamp,
            user1: currentUserId,
            user2: recipient.id
        };

        console.log('üí¨ [CHAT] Message will be sent to room:', roomId);

        try {
            sendMessage(messageData);
            console.log('üí¨ [CHAT] ‚úÖ sendMessage called successfully');
            setMessageText('');

            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            setTimeout(() => {
                console.log('üí¨ [CHAT] üïê 5 seconds passed after sending - checking if message appeared...');
            }, 5000);

        } catch (error) {
            console.error('üí¨ [CHAT] ‚ùå Error in sendMessage:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const navigateToProfile = () => {
        if (recipient?.username) {
            router.push(`/user/${recipient.username}`);
        }
    };

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const ChatHeader = () => {
        const isOnline = recipient?.id ? userStatuses.get(recipient.id) === 'online' : false;
        const userStatus = recipient?.id && userStatuses.has(recipient.id)
            ? isOnline
            : recipient?.is_online === 'online';

        return (
            <TouchableOpacity
                style={styles.headerUserInfo}
                onPress={navigateToProfile}
                activeOpacity={0.7}
            >
                <View style={styles.userInfo}>
                    <Text style={[styles.username, { color: theme.text }]}>{recipient?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</Text>
                    <Text style={[
                        styles.onlineStatus,
                        {color: userStatus ? theme.online : theme.offline}
                    ]}>
                        {userStatus ? '–≤ —Å–µ—Ç–∏' : '–Ω–µ –≤ —Å–µ—Ç–∏'}
                    </Text>
                </View>
                {/* –û–Ω–ª–∞–π–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä—è–¥–æ–º —Å —Ç–µ–∫—Å—Ç–æ–º */}
                <View style={[
                    styles.headerOnlineIndicator,
                    {backgroundColor: userStatus ? theme.online : theme.offline}
                ]}/>
            </TouchableOpacity>
        );
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ –∫—ç—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π backup –∑–∞–ø–∏—Å–µ–π
    const retryMediaRecovery = async () => {
        console.log('üîÑ [RECOVERY] Starting enhanced media recovery for history messages');

        const messagesToUpdate: {id: any, mediaUri: string}[] = [];

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        setMessages(currentMessages => {
            console.log('üîÑ [RECOVERY] Current messages count:', currentMessages.length);

            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞, –Ω–æ –±–µ–∑ URI
            const mediaMessagesWithoutUri = currentMessages.filter(msg =>
                msg.mediaType &&
                msg.mediaHash &&
                !msg.mediaUri
            );

            console.log('üîÑ [RECOVERY] Messages needing recovery:', {
                total: mediaMessagesWithoutUri.length,
                details: mediaMessagesWithoutUri.map(msg => ({
                    id: msg.id,
                    type: msg.mediaType,
                    sizeMB: msg.mediaSize ? (msg.mediaSize / (1024 * 1024)).toFixed(1) : '?',
                    hash: msg.mediaHash?.substring(0, 16) + '...',
                    hasUri: !!msg.mediaUri,
                    hasBase64: !!msg.mediaBase64
                }))
            });

            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            (async () => {
                for (const msg of mediaMessagesWithoutUri) {
                    let cachedUri: string | null = null;

                    try {
                        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        cachedUri = await getMediaFromCache(msg.mediaHash!, msg.mediaType!);

                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º backup –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                        if (!cachedUri) {
                            try {
                                const backupKey = `large_media_${msg.id}`;
                                const backupData = await AsyncStorage.getItem(backupKey);
                                if (backupData) {
                                    const backup = JSON.parse(backupData);
                                    console.log('üîÑ [RECOVERY] Found backup data for message:', {
                                        messageId: msg.id,
                                        hash: backup.mediaHash?.substring(0, 16) + '...',
                                        savedUri: backup.mediaUri
                                    });

                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ backup URI
                                    if (backup.mediaUri) {
                                        const fileInfo = await FileSystem.getInfoAsync(backup.mediaUri);
                                        if (fileInfo.exists && fileInfo.size > 0) {
                                            cachedUri = backup.mediaUri;
                                            console.log('üîÑ [RECOVERY] ‚úÖ Restored from backup:', backup.mediaUri);
                                        } else {
                                            console.log('üîÑ [RECOVERY] ‚ùå Backup file missing or corrupted');
                                        }
                                    }
                                }
                            } catch (backupError) {
                                console.error('üîÑ [RECOVERY] Error checking backup:', backupError);
                            }
                        }

                        if (cachedUri) {
                            // –î–ª—è –≤–∏–¥–µ–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                            if (msg.mediaType === 'video') {
                                try {
                                    const fileInfo = await FileSystem.getInfoAsync(cachedUri);
                                    if (fileInfo.exists && fileInfo.size > 1000) { // –ú–∏–Ω–∏–º—É–º 1KB –¥–ª—è –≤–∏–¥–µ–æ
                                        messagesToUpdate.push({ id: msg.id, mediaUri: cachedUri });
                                        console.log('üîÑ [RECOVERY] ‚úÖ Found and verified cached video:', {
                                            messageId: msg.id,
                                            hash: msg.mediaHash?.substring(0, 16) + '...',
                                            uri: cachedUri.substring(cachedUri.lastIndexOf('/') + 1),
                                            size: fileInfo.size
                                        });
                                    } else {
                                        console.log('üîÑ [RECOVERY] ‚ùå Video file corrupted or too small:', {
                                            messageId: msg.id,
                                            size: fileInfo.size,
                                            exists: fileInfo.exists
                                        });
                                    }
                                } catch (fileCheckError) {
                                    console.error('üîÑ [RECOVERY] Error checking video file:', fileCheckError);
                                }
                            } else {
                                // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                                messagesToUpdate.push({ id: msg.id, mediaUri: cachedUri });
                                console.log('üîÑ [RECOVERY] ‚úÖ Found cached image:', {
                                    messageId: msg.id,
                                    hash: msg.mediaHash?.substring(0, 16) + '...',
                                    uri: cachedUri.substring(cachedUri.lastIndexOf('/') + 1)
                                });
                            }
                        } else {
                            console.log('üîÑ [RECOVERY] ‚ùå No cached media found (tried both cache and backup):', {
                                messageId: msg.id,
                                hash: msg.mediaHash?.substring(0, 16) + '...',
                                type: msg.mediaType
                            });
                        }
                    } catch (error) {
                        console.error('üîÑ [RECOVERY] Error recovering media for message:', {
                            messageId: msg.id,
                            error: error
                        });
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º batch-–æ–º
                if (messagesToUpdate.length > 0) {
                    console.log('üîÑ [RECOVERY] Updating messages with recovered media:', {
                        count: messagesToUpdate.length,
                        updates: messagesToUpdate.map(u => ({
                            id: u.id,
                            fileName: u.mediaUri.substring(u.mediaUri.lastIndexOf('/') + 1)
                        }))
                    });

                    setMessages(prevMessages =>
                        prevMessages.map(msg => {
                            const update = messagesToUpdate.find(u => u.id === msg.id);
                            if (update) {
                                return { ...msg, mediaUri: update.mediaUri };
                            }
                            return msg;
                        })
                    );
                } else {
                    console.log('üîÑ [RECOVERY] No media files were recovered from cache or backup');
                }
            })();

            return currentMessages; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        });

        console.log('üîÑ [RECOVERY] Found messages needing recovery:', {
            total: mediaMessagesWithoutUri.length,
            hashes: mediaMessagesWithoutUri.map(msg => ({
                id: msg.id,
                hash: msg.mediaHash?.substring(0, 16) + '...'
            }))
        });

        for (const msg of mediaMessagesWithoutUri) {
            let cachedUri: string | null = null;

            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                cachedUri = await getMediaFromCache(msg.mediaHash!, msg.mediaType!);

                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º backup –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if (!cachedUri) {
                    try {
                        const backupKey = `large_media_${msg.id}`;
                        const backupData = await AsyncStorage.getItem(backupKey);
                        if (backupData) {
                            const backup = JSON.parse(backupData);
                            console.log('üîÑ [RECOVERY] Found backup data for message:', {
                                messageId: msg.id,
                                hash: backup.mediaHash?.substring(0, 16) + '...',
                                savedUri: backup.mediaUri
                            });

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ backup URI
                            if (backup.mediaUri) {
                                const fileInfo = await FileSystem.getInfoAsync(backup.mediaUri);
                                if (fileInfo.exists && fileInfo.size > 0) {
                                    cachedUri = backup.mediaUri;
                                    console.log('üîÑ [RECOVERY] ‚úÖ Restored from backup:', backup.mediaUri);
                                } else {
                                    console.log('üîÑ [RECOVERY] ‚ùå Backup file missing or corrupted');
                                }
                            }
                        }
                    } catch (backupError) {
                        console.error('üîÑ [RECOVERY] Error checking backup:', backupError);
                    }
                }

                if (cachedUri) {
                    // –î–ª—è –≤–∏–¥–µ–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                    if (msg.mediaType === 'video') {
                        try {
                            const fileInfo = await FileSystem.getInfoAsync(cachedUri);
                            if (fileInfo.exists && fileInfo.size > 1000) { // –ú–∏–Ω–∏–º—É–º 1KB –¥–ª—è –≤–∏–¥–µ–æ
                                messagesToUpdate.push({ id: msg.id, mediaUri: cachedUri });
                                console.log('üîÑ [RECOVERY] ‚úÖ Found and verified cached video:', {
                                    messageId: msg.id,
                                    hash: msg.mediaHash?.substring(0, 16) + '...',
                                    uri: cachedUri.substring(cachedUri.lastIndexOf('/') + 1),
                                    size: fileInfo.size
                                });
                            } else {
                                console.log('üîÑ [RECOVERY] ‚ùå Video file corrupted or too small:', {
                                    messageId: msg.id,
                                    size: fileInfo.size,
                                    exists: fileInfo.exists
                                });
                            }
                        } catch (fileCheckError) {
                            console.error('üîÑ [RECOVERY] Error checking video file:', fileCheckError);
                        }
                    } else {
                        // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                        messagesToUpdate.push({ id: msg.id, mediaUri: cachedUri });
                        console.log('üîÑ [RECOVERY] ‚úÖ Found cached image:', {
                            messageId: msg.id,
                            hash: msg.mediaHash?.substring(0, 16) + '...',
                            uri: cachedUri.substring(cachedUri.lastIndexOf('/') + 1)
                        });
                    }
                } else {
                    console.log('üîÑ [RECOVERY] ‚ùå No cached media found (tried both cache and backup):', {
                        messageId: msg.id,
                        hash: msg.mediaHash?.substring(0, 16) + '...',
                        type: msg.mediaType
                    });
                }
            } catch (error) {
                console.error('üîÑ [RECOVERY] Error recovering media for message:', {
                    messageId: msg.id,
                    error: error
                });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º batch-–æ–º
        if (messagesToUpdate.length > 0) {
            console.log('üîÑ [RECOVERY] Updating messages with recovered media:', {
                count: messagesToUpdate.length,
                updates: messagesToUpdate.map(u => ({
                    id: u.id,
                    fileName: u.mediaUri.substring(u.mediaUri.lastIndexOf('/') + 1)
                }))
            });

            setMessages(prev =>
                prev.map(msg => {
                    const update = messagesToUpdate.find(u => u.id === msg.id);
                    if (update) {
                        return { ...msg, mediaUri: update.mediaUri };
                    }
                    return msg;
                })
            );
        } else {
            console.log('üîÑ [RECOVERY] No media files were recovered from cache or backup');
        }
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const openImageViewer = (imageUri: string) => {
        setSelectedImage(imageUri);
        setIsImageViewerVisible(true);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ
    const openInSystemPlayer = async (videoUri: string) => {
        try {
            if (videoUri.startsWith('http')) {
                await Linking.openURL(videoUri);
            } else {
                Alert.alert('–û—à–∏–±–∫–∞', '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–ª–µ–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ URL-–∞–¥—Ä–µ—Å–∞');
            }
        } catch (error) {
            console.error('üé• [SYSTEM] Failed to open in system player:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ');
        }
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞
    const openVideoViewer = async (videoUri: string) => {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setVideoError(null);
        setIsVideoPlaying(false);
        setAudioSessionReady(false);

        console.log('üé• [VIEWER] Opening video viewer');

        setSelectedVideo(videoUri);
        setIsVideoViewerVisible(true);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(async () => {
            try {
                if (appState === 'active') {
                    await Audio.setAudioModeAsync({
                        allowsRecordingIOS: false,
                        staysActiveInBackground: true,
                        interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,
                        playsInSilentModeIOS: true,
                        shouldDuckAndroid: true,
                        interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,
                        playThroughEarpieceAndroid: false
                    });
                    setAudioSessionReady(true);
                    console.log('üé• [AUDIO] Audio session configured successfully');
                }
            } catch (audioError) {
                console.warn('üé• [AUDIO] Failed to configure audio session:', audioError);
                setAudioSessionReady(false);
            }
        }, 1500); // –î–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –±–µ–∑–∑–≤—É—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    const forcePlayVideo = async () => {
        try {
            if (videoRef.current) {
                console.log('üé• [FORCE-PLAY] Attempting to play muted video...');

                // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                await videoRef.current.setIsMutedAsync(true);

                // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                await videoRef.current.playAsync();
                setIsVideoPlaying(true);
                setVideoError(null);

                console.log('üé• [FORCE-PLAY] ‚úÖ Muted video started successfully');
            }
        } catch (playError: any) {
            console.error('üé• [FORCE-PLAY] ‚ùå Failed to play muted video:', playError);
            setVideoError(playError.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ');
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤–∏–¥–µ–æ
    const toggleInlineVideo = async (messageId: string | number, videoUri: string) => {
        const currentState = inlineVideoStates[messageId] || {
            isPlaying: false, isMuted: false, isExpanded: false, duration: 0, position: 0, isLoaded: false
        };
        const newPlayingState = !currentState.isPlaying;

        try {
            const videoRef = inlineVideoRefs.current[messageId];
            if (videoRef) {
                if (newPlayingState) {
                    await videoRef.playAsync();
                } else {
                    await videoRef.pauseAsync();
                }

                setInlineVideoStates(prev => ({
                    ...prev,
                    [messageId]: { ...currentState, isPlaying: newPlayingState }
                }));
            }
        } catch (error) {
            console.error('üé• [INLINE] Error toggling video:', error);
        }
    };

    const toggleInlineVideoSound = async (messageId: string | number) => {
        const currentState = inlineVideoStates[messageId] || {
            isPlaying: false, isMuted: false, isExpanded: false, duration: 0, position: 0, isLoaded: false
        };
        const newMutedState = !currentState.isMuted;

        try {
            const videoRef = inlineVideoRefs.current[messageId];
            if (videoRef) {
                await videoRef.setIsMutedAsync(newMutedState);
                setInlineVideoStates(prev => ({
                    ...prev,
                    [messageId]: { ...currentState, isMuted: newMutedState }
                }));
            }
        } catch (error) {
            console.error('üé• [INLINE] Error toggling sound:', error);
        }
    };

    const expandInlineVideo = (messageId: string | number, videoUri: string) => {
        const currentState = inlineVideoStates[messageId] || {
            isPlaying: false, isMuted: false, isExpanded: false, duration: 0, position: 0, isLoaded: false
        };

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        const newExpandedState = !currentState.isExpanded;

        setInlineVideoStates(prev => ({
            ...prev,
            [messageId]: { ...currentState, isExpanded: newExpandedState }
        }));

        if (newExpandedState) {
            setFullscreenVideoId(String(messageId));
        } else {
            setFullscreenVideoId(null);
        }
    };

    const seekInlineVideo = async (messageId: string | number, position: number) => {
        try {
            const videoRef = inlineVideoRefs.current[messageId];
            if (videoRef) {
                await videoRef.setPositionAsync(position);
            }
        } catch (error) {
            console.error('üé• [INLINE] Error seeking video:', error);
        }
    };

    const resetVideoToBeginning = async (messageId: string | number) => {
        try {
            const videoRef = inlineVideoRefs.current[messageId];
            if (videoRef) {
                await videoRef.setPositionAsync(0);
                const currentState = inlineVideoStates[messageId];
                if (currentState) {
                    setInlineVideoStates(prev => ({
                        ...prev,
                        [messageId]: { ...currentState, position: 0, isPlaying: false }
                    }));
                }
            }
        } catch (error) {
            console.error('üé• [INLINE] Error resetting video:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
    const toggleVideoSound = async () => {
        try {
            if (videoRef.current && appState === 'active') {
                const newMutedState = !isVideoMuted;

                if (!newMutedState && !audioSessionReady) {
                    // –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫, –Ω–æ –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞
                    Alert.alert(
                        '–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–≤—É–∫–æ–º',
                        '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞—É–¥–∏–æ. –û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ?',
                        [
                            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                            {
                                text: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–ª–µ–µ—Ä',
                                onPress: () => {
                                    if (selectedVideo) {
                                        openInSystemPlayer(selectedVideo);
                                    }
                                }
                            }
                        ]
                    );
                    return;
                }

                await videoRef.current.setIsMutedAsync(newMutedState);
                setIsVideoMuted(newMutedState);
                console.log('üé• [SOUND] Video sound toggled:', newMutedState ? 'muted' : 'unmuted');
            }
        } catch (soundError: any) {
            console.error('üé• [SOUND] Failed to toggle sound:', soundError);

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            Alert.alert(
                '–û—à–∏–±–∫–∞ –∑–≤—É–∫–∞',
                '–ù–µ —É–¥–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–≤—É–∫–æ–º –≤–∏–¥–µ–æ. –û—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ?',
                [
                    { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                    {
                        text: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–ª–µ–µ—Ä',
                        onPress: () => {
                            if (selectedVideo) {
                                openInSystemPlayer(selectedVideo);
                            }
                        }
                    }
                ]
            );
        }
    };

    // –†–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    const renderMessage = ({item}: { item: Message }) => {
        let isMyMessage = false;

        if (item.sender_id !== undefined && currentUserId !== null) {
            isMyMessage = item.sender_id === currentUserId;
        } else if (item.sender__username && currentUsername) {
            isMyMessage = item.sender__username === currentUsername;
        }

        const renderMediaContent = () => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            if (item.isUploading) {
                return (
                    <View style={styles.uploadingContainer}>
                        <View style={styles.uploadingContent}>
                            <ActivityIndicator size="small" color={theme.primary} />
                            <Text style={[styles.uploadingText, { color: theme.textSecondary }]}>
                                {item.mediaType === 'image' ? '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...'}
                            </Text>
                            {item.uploadProgress !== undefined && item.uploadProgress > 0 && (
                                <View style={styles.progressContainer}>
                                    <View style={[styles.progressBar, { backgroundColor: theme.border }]}>
                                        <View
                                            style={[
                                                styles.progressFill,
                                                {
                                                    backgroundColor: theme.primary,
                                                    width: `${item.uploadProgress}%`
                                                }
                                            ]}
                                        />
                                    </View>
                                    <Text style={[styles.progressText, { color: theme.textSecondary }]}>
                                        {item.uploadProgress}%
                                    </Text>
                                </View>
                            )}
                        </View>
                    </View>
                );
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if (item.needsReload) {
                const fileSizeMB = item.mediaSize ? Math.round(item.mediaSize / (1024 * 1024)) : 0;

                return (
                    <TouchableOpacity
                        style={styles.reloadContainer}
                        onPress={() => {
                            Alert.alert(
                                '–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ',
                                `–§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º ${fileSizeMB}MB –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞. –§–∞–π–ª—ã –±–æ–ª—å—à–µ 15MB –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –≥–∞–ª–µ—Ä–µ—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è`,
                                [
                                    { text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' },
                                    {
                                        text: '–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å',
                                        style: 'default',
                                        onPress: () => {
                                            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                                            console.log('User wants to request file resend');
                                        }
                                    }
                                ]
                            );
                        }}
                    >
                        <View style={styles.reloadContent}>
                            <MaterialIcons
                                name="cloud-off"
                                size={24}
                                color={theme.textSecondary}
                            />
                            <Text style={[styles.reloadText, { color: theme.textSecondary }]}>
                                {item.mediaType === 'image'
                                    ? `üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${fileSizeMB}MB`
                                    : `üé• –í–∏–¥–µ–æ ${fileSizeMB}MB`
                                }
                            </Text>
                            <Text style={[styles.reloadSubtext, { color: theme.placeholder }]}>
                                –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞
                            </Text>
                            <Text style={[styles.reloadHint, { color: theme.primary }]}>
                                –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
                            </Text>
                        </View>
                    </TouchableOpacity>
                );
            }

            if (item.mediaType === 'image') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const hasImageData = item.mediaUri || item.mediaBase64;

                if (!hasImageData && !item.serverFileUrl) {
                    return (
                        <View style={styles.missingMediaContainer}>
                            <MaterialIcons name="image" size={48} color={theme.textSecondary} />
                            <Text style={[styles.missingMediaText, { color: theme.textSecondary }]}>
                                –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {item.mediaSize ? Math.round(item.mediaSize / (1024 * 1024)) + 'MB' : ''}
                            </Text>
                            <Text style={[styles.missingMediaSubtext, { color: theme.placeholder }]}>
                                –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                            </Text>
                        </View>
                    );
                }

                const imageUri = item.serverFileUrl || item.mediaUri || `data:image/jpeg;base64,${item.mediaBase64}`;
                return (
                    <TouchableOpacity
                        onPress={() => openImageViewer(imageUri)}
                        style={styles.mediaContainer}
                    >
                        <Image
                            source={{ uri: imageUri }}
                            style={styles.messageImage}
                            resizeMode="cover"
                            onError={(error) => {
                                console.error('‚ùå Image load error:', error);
                            }}
                        />
                    </TouchableOpacity>
                );
            } else if (item.mediaType === 'video') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const hasVideoData = item.mediaUri || item.mediaBase64;

                if (!hasVideoData && !item.serverFileUrl) {
                    return (
                        <View style={styles.missingMediaContainer}>
                            <MaterialIcons name="videocam" size={48} color={theme.textSecondary} />
                            <Text style={[styles.missingMediaText, { color: theme.textSecondary }]}>
                                –í–∏–¥–µ–æ {item.mediaSize ? Math.round(item.mediaSize / (1024 * 1024)) + 'MB' : ''}
                            </Text>
                            <Text style={[styles.missingMediaSubtext, { color: theme.placeholder }]}>
                                –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                            </Text>
                        </View>
                    );
                }

                const videoUri = item.serverFileUrl || item.mediaUri || `data:video/mp4;base64,${item.mediaBase64}`;
                const messageId = String(item.id);
                const videoState = inlineVideoStates[messageId] || {
                    isPlaying: false, isMuted: false, isExpanded: false, duration: 0, position: 0, isLoaded: false
                };

                console.log('üé• [VIDEO-RENDER] Video details:', {
                    messageId: item.id,
                    hasServerUrl: !!item.serverFileUrl,
                    hasMediaUri: !!item.mediaUri,
                    hasBase64: !!item.mediaBase64,
                    videoUri: videoUri?.substring(0, 100) + '...',
                    mediaSize: item.mediaSize,
                    fileName: item.mediaFileName
                });

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                const containerStyle = videoState.isExpanded
                    ? styles.fullscreenVideoContainer
                    : styles.inlineVideoContainer;
                const videoStyle = videoState.isExpanded
                    ? styles.fullscreenVideo
                    : styles.inlineVideo;

                return (
                    <View style={containerStyle}>
                        <Video
                            ref={(ref) => {
                                if (ref) {
                                    inlineVideoRefs.current[messageId] = ref;
                                }
                            }}
                            source={{ uri: videoUri }}
                            style={videoStyle}
                            resizeMode={videoState.isExpanded ? ResizeMode.CONTAIN : ResizeMode.COVER}
                            useNativeControls={false}
                            shouldPlay={videoState.isPlaying}
                            isMuted={videoState.isMuted}
                            isLooping={false}
                            onLoad={(data) => {
                                console.log('üé• [INLINE-VIDEO] Video loaded successfully:', {
                                    messageId: item.id,
                                    duration: data.durationMillis,
                                    naturalSize: data.naturalSize,
                                    uri: videoUri?.substring(videoUri.lastIndexOf('/') + 1)
                                });

                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–æ
                                setInlineVideoStates(prev => ({
                                    ...prev,
                                    [messageId]: {
                                        ...videoState,
                                        duration: data.durationMillis || 0,
                                        isLoaded: true
                                    }
                                }));
                            }}
                            onError={(error) => {
                                console.error('üé• [INLINE-VIDEO] ‚ùå Video load error:', {
                                    messageId: item.id,
                                    error: error,
                                    uri: videoUri?.substring(videoUri.lastIndexOf('/') + 1),
                                    uriType: videoUri?.startsWith('data:') ? 'base64' :
                                             videoUri?.startsWith('http') ? 'url' : 'file'
                                });
                            }}
                            onPlaybackStatusUpdate={(status: AVPlaybackStatus) => {
                                if ('error' in status) {
                                    console.error('üé• [INLINE-VIDEO] Playback error:', status.error);
                                } else if ('durationMillis' in status && status.isLoaded) {
                                    const currentState = inlineVideoStates[messageId] || {
                                        isPlaying: false, isMuted: false, isExpanded: false, duration: 0, position: 0, isLoaded: false
                                    };

                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ –≤–∏–¥–µ–æ
                                    const isFinished = status.positionMillis >= status.durationMillis - 100; // 100ms –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å

                                    if (isFinished && currentState.isPlaying) {
                                        // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                                        resetVideoToBeginning(messageId);
                                        return;
                                    }

                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                                    const needsUpdate =
                                        status.isPlaying !== currentState.isPlaying ||
                                        Math.abs(status.positionMillis - currentState.position) > 1000 || // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                                        status.durationMillis !== currentState.duration;

                                    if (needsUpdate) {
                                        setInlineVideoStates(prev => ({
                                            ...prev,
                                            [messageId]: {
                                                ...currentState,
                                                isPlaying: status.isPlaying,
                                                position: status.positionMillis,
                                                duration: status.durationMillis,
                                                isLoaded: true
                                            }
                                        }));
                                    }
                                }
                            }}
                        />

                        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
                        {videoState.isLoaded && videoState.duration > 0 && (
                            <View style={styles.videoProgressContainer}>
                                <View style={styles.videoProgressBar}>
                                    <View
                                        style={[
                                            styles.videoProgressFill,
                                            { width: `${(videoState.position / videoState.duration) * 100}%` }
                                        ]}
                                    />
                                </View>
                                <TouchableOpacity
                                    style={styles.videoProgressTouch}
                                    onPress={(event) => {
                                        if (videoState.duration > 0) {
                                            const { locationX } = event.nativeEvent;
                                            const progressWidth = 180; // —à–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                                            const percentage = Math.min(Math.max(locationX / progressWidth, 0), 1);
                                            const newPosition = percentage * videoState.duration;
                                            seekInlineVideo(messageId, newPosition);
                                        }
                                    }}
                                />
                            </View>
                        )}

                        {/* –í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
                        {videoState.isLoaded && videoState.duration > 0 && (
                            <View style={styles.videoTimeContainer}>
                                <Text style={styles.videoTimeText}>
                                    {Math.floor(videoState.position / 1000)}s / {Math.floor(videoState.duration / 1000)}s
                                </Text>
                            </View>
                        )}

                        {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã –≤–∏–¥–µ–æ */}
                        <View style={videoState.isExpanded ? styles.fullscreenVideoControls : styles.inlineVideoControls}>
                            {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã */}
                            <TouchableOpacity
                                style={styles.inlineVideoButton}
                                onPress={() => toggleInlineVideo(messageId, videoUri)}
                            >
                                <MaterialIcons
                                    name={videoState.isPlaying ? "pause" : "play-arrow"}
                                    size={videoState.isExpanded ? 32 : 24}
                                    color="white"
                                />
                            </TouchableOpacity>

                            {/* –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞ */}
                            <TouchableOpacity
                                style={styles.inlineVideoButton}
                                onPress={() => toggleInlineVideoSound(messageId)}
                            >
                                <MaterialIcons
                                    name={videoState.isMuted ? "volume-off" : "volume-up"}
                                    size={videoState.isExpanded ? 28 : 20}
                                    color={audioSessionReady ? "white" : "rgba(255, 255, 255, 0.5)"}
                                />
                            </TouchableOpacity>

                            {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è/—Å–∂–∞—Ç–∏—è */}

                        </View>

                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç */}
                        {!videoState.isPlaying && !videoState.isExpanded && (
                            <TouchableOpacity
                                style={styles.videoPlayOverlay}
                                onPress={() => toggleInlineVideo(messageId, videoUri)}
                            >
                                <MaterialIcons
                                    name="play-circle-filled"
                                    size={48}
                                    color="rgba(255, 255, 255, 0.8)"
                                />
                            </TouchableOpacity>
                        )}

                        {/* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
                        {!videoState.isPlaying && videoState.isExpanded && (
                            <TouchableOpacity
                                style={styles.fullscreenPlayOverlay}
                                onPress={() => toggleInlineVideo(messageId, videoUri)}
                            >
                                <MaterialIcons
                                    name="play-circle-filled"
                                    size={80}
                                    color="rgba(255, 255, 255, 0.8)"
                                />
                            </TouchableOpacity>
                        )}
                    </View>
                );
            } else if (item.mediaType === 'file') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
                const hasFileData = item.mediaUri || item.serverFileUrl;

                if (!hasFileData) {
                    return (
                        <View style={styles.missingMediaContainer}>
                            <MaterialIcons name="description" size={48} color={theme.textSecondary} />
                            <Text style={[styles.missingMediaText, { color: theme.textSecondary }]}>
                                {item.mediaFileName || '–î–æ–∫—É–º–µ–Ω—Ç'} {item.mediaSize ? Math.round(item.mediaSize / (1024 * 1024)) + 'MB' : ''}
                            </Text>
                            <Text style={[styles.missingMediaSubtext, { color: theme.placeholder }]}>
                                –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                            </Text>
                        </View>
                    );
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                const getFileIcon = (fileName?: string, mimeType?: string) => {
                    if (mimeType?.includes('pdf') || fileName?.toLowerCase().endsWith('.pdf')) {
                        return 'picture-as-pdf';
                    } else if (mimeType?.includes('word') || fileName?.toLowerCase().match(/\.(doc|docx)$/)) {
                        return 'description';
                    } else if (mimeType?.includes('excel') || fileName?.toLowerCase().match(/\.(xls|xlsx)$/)) {
                        return 'grid-on';
                    } else if (mimeType?.includes('powerpoint') || fileName?.toLowerCase().match(/\.(ppt|pptx)$/)) {
                        return 'slideshow';
                    } else if (mimeType?.includes('text') || fileName?.toLowerCase().endsWith('.txt')) {
                        return 'text-snippet';
                    } else if (mimeType?.includes('zip') || fileName?.toLowerCase().match(/\.(zip|rar|7z)$/)) {
                        return 'archive';
                    }
                    return 'description';
                };

                const fileIcon = getFileIcon(item.mediaFileName, item.mimeType);
                const fileUrl = item.serverFileUrl || item.mediaUri;

                return (
                    <TouchableOpacity
                        style={styles.fileContainer}
                        onPress={() => {
                            if (fileUrl) {
                                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –≤–Ω–µ—à–Ω–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                                Alert.alert(
                                    '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª',
                                    `–û—Ç–∫—Ä—ã—Ç—å "${item.mediaFileName || '—Ñ–∞–π–ª'}" –≤–æ –≤–Ω–µ—à–Ω–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?`,
                                    [
                                        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                                        {
                                            text: '–û—Ç–∫—Ä—ã—Ç—å',
                                            onPress: async () => {
                                                try {
                                                    const { WebBrowser } = await import('expo-web-browser');
                                                    await WebBrowser.openBrowserAsync(fileUrl);
                                                } catch (error) {
                                                    console.error('Error opening file:', error);
                                                    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª');
                                                }
                                            }
                                        }
                                    ]
                                );
                            }
                        }}
                        activeOpacity={0.7}
                    >
                        <View style={styles.fileIconContainer}>
                            <MaterialIcons
                                name={fileIcon as any}
                                size={32}
                                color={theme.primary}
                            />
                        </View>
                        <View style={styles.fileInfo}>
                            <Text style={[styles.fileName, { color: theme.text }]} numberOfLines={2}>
                                {item.mediaFileName || '–î–æ–∫—É–º–µ–Ω—Ç'}
                            </Text>
                            <Text style={[styles.fileSize, { color: theme.textSecondary }]}>
                                {item.mediaSize ? `${Math.round(item.mediaSize / 1024)} –ö–ë` : '–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
                            </Text>
                            {item.mimeType && (
                                <Text style={[styles.fileMimeType, { color: theme.placeholder }]}>
                                    {item.mimeType}
                                </Text>
                            )}
                        </View>
                        <MaterialIcons
                            name="download"
                            size={20}
                            color={theme.textSecondary}
                        />
                    </TouchableOpacity>
                );
            }

            return null;
        };

        return (
            <View style={[
                styles.messageContainer,
                isMyMessage ? styles.myMessage : styles.otherMessage,
                item.mediaType ? styles.mediaMessage : null
            ]}>
                {!isMyMessage && (
                    <Text style={[styles.senderName, { color: theme.textSecondary }]}>{item.sender__username}</Text>
                )}

                {renderMediaContent()}

                <Text style={[
                    styles.messageText,
                    isMyMessage ? styles.myMessageText : styles.otherMessageText,
                    item.mediaType ? styles.mediaMessageText : null
                ]}>
                    {item.message}
                </Text>

                <Text style={[
                    styles.timestamp,
                    isMyMessage ? styles.myTimestamp : styles.otherTimestamp
                ]}>
                    {formatTimestamp(item.timestamp)}
                </Text>
            </View>
        );
    };

    if (isLoading) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color={theme.primary}/>
                <Text style={[styles.loadingText, { color: theme.textSecondary }]}>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</Text>
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <KeyboardAvoidingView
                style={styles.keyboardView}
                behavior={Platform.OS === 'ios' ? 'padding' : undefined}
                keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
            >
                {/* Header Section */}
                <View style={styles.header}>
                    <TouchableOpacity
                        style={styles.backButton}
                        onPress={() => router.back()}
                    >
                        <MaterialIcons name="arrow-back" size={24} color={theme.primary} />
                    </TouchableOpacity>

                    {/* –ú–∏–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ */}
                    <View style={styles.miniAvatarContainer}>
                        <CachedImage
                            uri={
                                recipient?.avatar
                                    ? recipient.avatar.startsWith('http')
                                      ? recipient.avatar
                                      : `${API_CONFIG.BASE_URL}${recipient.avatar}`
                                    : ''
                            }
                            style={styles.miniAvatar}
                        />
                    </View>

                    <ChatHeader/>
                </View>

                <FlatList
                    ref={flatListRef}
                    data={messages}
                    style={styles.chatbox}
                    contentContainerStyle={styles.chatboxContent}
                    keyExtractor={(item, index) => `message-${item.id}-${index}`}
                    renderItem={renderMessage}
                    inverted
                    onEndReached={loadMoreMessages}
                    onEndReachedThreshold={0.1}
                    ListFooterComponent={
                        isLoadingMore ? (
                            <View style={styles.loadingMoreContainer}>
                                <ActivityIndicator size="small" color={theme.primary} />
                                <Text style={[styles.loadingMoreText, { color: theme.textSecondary }]}>
                                    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...
                                </Text>
                            </View>
                        ) : null
                    }
                    ListEmptyComponent={
                        <View style={styles.emptyContainer}>
                            <Text style={[styles.emptyText, { color: theme.textSecondary }]}>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</Text>
                        </View>
                    }
                    showsVerticalScrollIndicator={false}
                    maintainVisibleContentPosition={{
                        minIndexForVisible: 0,
                        autoscrollToTopThreshold: 10
                    }}
                />

                <View style={styles.inputContainer}>
                    <View style={styles.mediaButtonsContainer}>
                        <TouchableOpacity
                            style={[styles.mediaButton, { backgroundColor: theme.surface }]}
                            onPress={pickImage}
                            disabled={!isConnected || !isDataLoaded || !recipient || !currentUserId}
                        >
                            <MaterialIcons
                                name="photo"
                                size={24}
                                color={(isConnected && isDataLoaded && recipient && currentUserId) ? theme.primary : theme.placeholder}
                            />
                        </TouchableOpacity>
                        <TouchableOpacity
                            style={[styles.mediaButton, { backgroundColor: theme.surface }]}
                            onPress={pickVideo}
                            disabled={!isConnected || !isDataLoaded || !recipient || !currentUserId}
                        >
                            <MaterialIcons
                                name="videocam"
                                size={24}
                                color={(isConnected && isDataLoaded && recipient && currentUserId) ? theme.primary : theme.placeholder}
                            />
                        </TouchableOpacity>
                        <TouchableOpacity
                            style={[styles.mediaButton, { backgroundColor: theme.surface }]}
                            onPress={pickDocument}
                            disabled={!isConnected || !isDataLoaded || !recipient || !currentUserId}
                        >
                            <MaterialIcons
                                name="attach-file"
                                size={24}
                                color={(isConnected && isDataLoaded && recipient && currentUserId) ? theme.primary : theme.placeholder}
                            />
                        </TouchableOpacity>

                        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                        {(!isConnected || reconnectAttempts >= 3) && (
                            <TouchableOpacity
                                style={[styles.mediaButton, { backgroundColor: '#ff9800' }]}
                                onPress={() => {
                                    setReconnectAttempts(0);
                                    setLastReconnectTime(0);
                                    reconnect();
                                }}
                            >
                                <MaterialIcons
                                    name="wifi"
                                    size={24}
                                    color="white"
                                />
                            </TouchableOpacity>
                        )}
                    </View>
                    <TextInput
                        style={[styles.input, { backgroundColor: theme.surface, color: theme.text }]}
                        value={messageText}
                        onChangeText={setMessageText}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                        placeholderTextColor={theme.placeholder}
                        multiline
                        maxLength={1000}
                    />
                    <Pressable
                        style={[
                            styles.sendButton,
                            {
                                backgroundColor: messageText.trim() && isConnected && isDataLoaded ? theme.primary : theme.placeholder,
                                opacity: messageText.trim() && isConnected && isDataLoaded ? 1 : 0.5
                            }
                        ]}
                        onPress={handleSend}
                        disabled={!messageText.trim() || !isConnected || !isDataLoaded}
                    >
                        <MaterialIcons
                            name="send"
                            size={20}
                            color={messageText.trim() && isConnected && isDataLoaded ? "#fff" : theme.textSecondary}
                        />
                    </Pressable>
                </View>

                {/* –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
                <Modal
                    visible={isImageViewerVisible}
                    transparent={true}
                    animationType="fade"
                    onRequestClose={() => setIsImageViewerVisible(false)}
                >
                    <View style={styles.imageViewerContainer}>
                        <TouchableOpacity
                            style={styles.imageViewerCloseButton}
                            onPress={() => setIsImageViewerVisible(false)}
                        >
                            <MaterialIcons name="close" size={30} color="white" />
                        </TouchableOpacity>
                        {selectedImage && (
                            <Image
                                source={{ uri: selectedImage }}
                                style={styles.fullScreenImage}
                                resizeMode="contain"
                            />
                        )}
                    </View>
                </Modal>

                {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä */}
                <Modal
                    visible={isVideoViewerVisible}
                    transparent={false}
                    animationType="slide"
                    onRequestClose={() => setIsVideoViewerVisible(false)}
                >
                    <View style={styles.videoViewerContainer}>
                        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
                        {!isVideoPlaying && !videoError && (
                            <TouchableOpacity
                                style={styles.forcePlayButton}
                                onPress={forcePlayVideo}
                            >
                                <MaterialIcons name="play-circle-filled" size={64} color="rgba(255, 255, 255, 0.9)" />
                                <Text style={styles.forcePlayText}>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</Text>
                                <Text style={styles.forcePlaySubtext}>(–±–µ–∑ –∑–≤—É–∫–∞)</Text>
                            </TouchableOpacity>
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º */}
                        {isVideoPlaying && (
                            <TouchableOpacity
                                style={styles.soundButton}
                                onPress={toggleVideoSound}
                            >
                                <MaterialIcons
                                    name={isVideoMuted ? "volume-off" : "volume-up"}
                                    size={24}
                                    color={audioSessionReady ? "rgba(255, 255, 255, 0.9)" : "rgba(255, 255, 255, 0.5)"}
                                />
                                {!audioSessionReady && (
                                    <View style={styles.audioWarningDot} />
                                )}
                            </TouchableOpacity>
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞ */}
                        {selectedVideo?.startsWith('http') && (
                            <TouchableOpacity
                                style={styles.systemPlayerButton}
                                onPress={() => openInSystemPlayer(selectedVideo)}
                            >
                                <MaterialIcons name="open-in-new" size={24} color="rgba(255, 255, 255, 0.9)" />
                            </TouchableOpacity>
                        )}

                        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
                        {videoError && (
                            <View style={styles.videoErrorContainer}>
                                <MaterialIcons name="error" size={48} color="red" />
                                <Text style={styles.videoErrorText}>–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:</Text>
                                <Text style={styles.videoErrorDetails}>{videoError}</Text>
                                <TouchableOpacity
                                    style={styles.retryButton}
                                    onPress={forcePlayVideo}
                                >
                                    <Text style={styles.retryButtonText}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</Text>
                                </TouchableOpacity>
                                {selectedVideo?.startsWith('http') && (
                                    <TouchableOpacity
                                        style={[styles.retryButton, { backgroundColor: 'rgba(0, 123, 255, 0.3)' }]}
                                        onPress={() => openInSystemPlayer(selectedVideo)}
                                    >
                                        <Text style={styles.retryButtonText}>–û—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ</Text>
                                    </TouchableOpacity>
                                )}
                            </View>
                        )}

                        <TouchableOpacity
                            style={styles.videoViewerCloseButton}
                            onPress={async () => {
                                try {
                                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                                    if (videoRef.current) {
                                        await videoRef.current.pauseAsync();
                                        await videoRef.current.unloadAsync();
                                    }

                                    console.log('üé• [CLEANUP] Video stopped and unloaded');
                                } catch (cleanupError) {
                                    console.warn('üé• [CLEANUP] Error during video cleanup:', cleanupError);
                                }

                                setIsVideoViewerVisible(false);
                                setSelectedVideo(null);
                                setIsVideoPlaying(false);
                                setIsVideoMuted(true);
                                setVideoError(null);
                            }}
                        >
                            <MaterialIcons name="close" size={30} color="white" />
                        </TouchableOpacity>
                        {selectedVideo && (
                            <Video
                                ref={videoRef}
                                source={{ uri: selectedVideo }}
                                style={styles.fullScreenVideo}
                                resizeMode={ResizeMode.CONTAIN}
                                useNativeControls={false}
                                shouldPlay={false}
                                isLooping={false}
                                isMuted={isVideoMuted}
                                onLoad={(data) => {
                                    console.log('üé• [FULLSCREEN] Video loaded:', {
                                        duration: data.durationMillis,
                                        naturalSize: data.naturalSize,
                                        uri: selectedVideo?.substring(selectedVideo.lastIndexOf('/') + 1)
                                    });

                                    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–∂–º–µ—Ç play
                                    console.log('üé• [FULLSCREEN] Video ready for manual playback');
                                }}
                                onError={(error) => {
                                    console.error('üé• [FULLSCREEN] ‚ùå Video error:', {
                                        error: error,
                                        uri: selectedVideo?.substring(selectedVideo.lastIndexOf('/') + 1),
                                        uriType: selectedVideo?.startsWith('data:') ? 'base64' :
                                                 selectedVideo?.startsWith('http') ? 'url' : 'file',
                                        fullUri: selectedVideo
                                    });

                                    Alert.alert(
                                        '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
                                        `–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ.\n\n–¢–∏–ø: ${selectedVideo?.startsWith('data:') ? 'Base64' : selectedVideo?.startsWith('http') ? 'URL' : '–§–∞–π–ª'}\n\n–û—à–∏–±–∫–∞: ${JSON.stringify(error)}`,
                                        [
                                            { text: '–ó–∞–∫—Ä—ã—Ç—å', onPress: () => setIsVideoViewerVisible(false) },
                                            {
                                                text: '–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ',
                                                onPress: async () => {
                                                    try {
                                                        if (selectedVideo?.startsWith('http')) {
                                                            const { WebBrowser } = await import('expo-web-browser');
                                                            await WebBrowser.openBrowserAsync(selectedVideo);
                                                        } else {
                                                            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ - —ç—Ç–æ –Ω–µ URL');
                                                        }
                                                    } catch (browserError) {
                                                        console.error('Browser open error:', browserError);
                                                        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
                                                    }
                                                    setIsVideoViewerVisible(false);
                                                }
                                            }
                                        ]
                                    );
                                }}
                                onPlaybackStatusUpdate={(status) => {
                                    if ('error' in status) {
                                        console.error('üé• [FULLSCREEN] Playback error:', status.error);
                                        setVideoError(status.error || '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                                        setIsVideoPlaying(false);
                                    } else if ('durationMillis' in status && status.isLoaded) {
                                        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                                        if (status.isPlaying !== isVideoPlaying) {
                                            setIsVideoPlaying(status.isPlaying);
                                        }

                                        // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                        if (status.isPlaying || status.positionMillis > 0) {
                                            console.log('üé• [FULLSCREEN] Playback status:', {
                                                duration: Math.round(status.durationMillis / 1000) + 's',
                                                position: Math.round(status.positionMillis / 1000) + 's',
                                                isPlaying: status.isPlaying,
                                                rate: status.rate
                                            });
                                        }
                                    }
                                }}
                                onReadyForDisplay={(data) => {
                                    console.log('üé• [FULLSCREEN] Ready for display:', {
                                        naturalSize: data.naturalSize
                                    });
                                }}
                            />
                        )}
                    </View>
                </Modal>
            </KeyboardAvoidingView>
        </View>
    );
}

const createStyles = (theme: any) => StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: theme.background,
    },
    keyboardView: {
        flex: 1,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: theme.background,
    },
    loadingText: {
        marginTop: 16,
        fontSize: 16,
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingTop: 70,
        paddingBottom: 20,
        backgroundColor: theme.headerBackground,
        borderBottomWidth: 1,
        borderBottomColor: theme.border,
    },
    backButton: {
        padding: 8,
        marginRight: 8,
    },
    miniAvatarContainer: {
        marginRight: 12,
    },
    miniAvatar: {
        width: 32,
        height: 32,
        borderRadius: 16,
        borderWidth: 2,
        borderColor: theme.primary,
        backgroundColor: '#f0f0f0', // –§–æ–Ω –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≥—Ä—É–∑–∫–∏
    },
    headerUserInfo: {
        flexDirection: 'row',
        alignItems: 'center',
        flex: 1,
    },
    userInfo: {
        flex: 1,
    },
    headerOnlineIndicator: {
        width: 8,
        height: 8,
        borderRadius: 4,
        marginLeft: 8,
    },
    avatarContainer: {
        position: 'relative',
        marginRight: 12,
    },
    avatar: {
        width: 40,
        height: 40,
        borderRadius: 20,
    },
    onlineIndicator: {
        position: 'absolute',
        bottom: 0,
        right: 0,
        width: 12,
        height: 12,
        borderRadius: 6,
        borderWidth: 2,
        borderColor: theme.surface,
    },
    username: {
        fontSize: 16,
        fontWeight: 'bold',
        marginBottom: 2,
    },
    onlineStatus: {
        fontSize: 12,
        fontWeight: '500',
    },
    chatbox: {
        flex: 1,
        backgroundColor: theme.chatBackground,
    },
    chatboxContent: {
        padding: 16,
        paddingBottom: 20,
    },
    messageContainer: {
        maxWidth: '80%',
        marginVertical: 4,
        padding: 12,
        borderRadius: 16,
        elevation: 1,
        shadowColor: theme.text,
        shadowOffset: {width: 0, height: 1},
        shadowOpacity: 0.1,
        shadowRadius: 1,
    },
    myMessage: {
        alignSelf: 'flex-end',
        backgroundColor: theme.primary,
        marginLeft: '20%',
        borderBottomRightRadius: 4,
    },
    otherMessage: {
        alignSelf: 'flex-start',
        backgroundColor: theme.surface,
        marginRight: '20%',
        borderBottomLeftRadius: 4,
        borderWidth: 1,
        borderColor: theme.border,
    },
    senderName: {
        fontSize: 12,
        marginBottom: 4,
        fontWeight: '600',
    },
    messageText: {
        fontSize: 16,
        lineHeight: 22,
    },
    myMessageText: {
        color: 'white',
    },
    otherMessageText: {
        color: theme.text,
    },
    timestamp: {
        fontSize: 11,
        marginTop: 4,
        alignSelf: 'flex-end',
    },
    myTimestamp: {
        color: 'rgba(255, 255, 255, 0.8)',
    },
    otherTimestamp: {
        color: theme.textSecondary,
    },
    emptyContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingTop: 100,
    },
    emptyText: {
        fontSize: 16,
    },
    inputContainer: {
        flexDirection: 'row',
        padding: 16,
        borderTopWidth: 1,
        borderTopColor: theme.border,
        backgroundColor: theme.surface,
        alignItems: 'flex-end',
    },
    input: {
        flex: 1,
        borderRadius: 20,
        paddingHorizontal: 16,
        paddingVertical: 12,
        marginRight: 12,
        fontSize: 16,
        maxHeight: 100,
        minHeight: 44,
        textAlignVertical: 'top',
        borderWidth: 1,
        borderColor: theme.border,
    },
    sendButton: {
        justifyContent: 'center',
        alignItems: 'center',
        width: 44,
        height: 44,
        borderRadius: 22,
    },
    loadingMoreContainer: {
        paddingVertical: 16,
        alignItems: 'center',
        flexDirection: 'row',
        justifyContent: 'center',
    },
    loadingMoreText: {
        marginLeft: 8,
        fontSize: 14,
    },
    mediaButtonsContainer: {
        flexDirection: 'row',
        marginRight: 8,
    },
    mediaButton: {
        justifyContent: 'center',
        alignItems: 'center',
        width: 40,
        height: 40,
        borderRadius: 20,
        marginRight: 4,
        borderWidth: 1,
        borderColor: theme.border,
    },
    mediaContainer: {
        marginBottom: 8,
        borderRadius: 12,
        overflow: 'hidden',
    },
    messageImage: {
        width: 200,
        minHeight: 100,
        maxHeight: 300,
        borderRadius: 12,
    },
    messageVideo: {
        width: 200,
        height: 150,
        borderRadius: 12,
    },
    mediaMessage: {
        maxWidth: '85%',
    },
    mediaMessageText: {
        fontSize: 14,
        fontStyle: 'italic',
    },
    imageViewerContainer: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.9)',
        justifyContent: 'center',
        alignItems: 'center',
    },
    imageViewerCloseButton: {
        position: 'absolute',
        top: 50,
        right: 20,
        zIndex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        borderRadius: 20,
        padding: 5,
    },
    fullScreenImage: {
        width: '90%',
        height: '80%',
    },
    videoPlayOverlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.3)',
        borderRadius: 12,
    },
    videoViewerContainer: {
        flex: 1,
        backgroundColor: 'black',
        justifyContent: 'center',
        alignItems: 'center',
    },
    videoViewerCloseButton: {
        position: 'absolute',
        top: 50,
        right: 20,
        zIndex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        borderRadius: 20,
        padding: 8,
    },
    fullScreenVideo: {
        width: '100%',
        height: '100%',
    },
    uploadingContainer: {
        marginBottom: 8,
        padding: 12,
        borderRadius: 12,
        backgroundColor: theme.surface,
        borderWidth: 1,
        borderColor: theme.border,
        minHeight: 80,
        justifyContent: 'center',
    },
    uploadingContent: {
        alignItems: 'center',
        justifyContent: 'center',
    },
    uploadingText: {
        marginTop: 8,
        fontSize: 14,
        fontStyle: 'italic',
    },
    progressContainer: {
        marginTop: 8,
        width: '100%',
        alignItems: 'center',
    },
    progressBar: {
        width: '80%',
        height: 4,
        borderRadius: 2,
        overflow: 'hidden',
    },
    progressFill: {
        height: '100%',
        borderRadius: 2,
    },
    progressText: {
        marginTop: 4,
        fontSize: 12,
    },
    reloadContainer: {
        marginBottom: 8,
        padding: 16,
        borderRadius: 12,
        backgroundColor: theme.surface,
        borderWidth: 1,
        borderColor: theme.border,
        borderStyle: 'dashed',
        minHeight: 80,
        justifyContent: 'center',
        alignItems: 'center',
    },
    reloadContent: {
        alignItems: 'center',
        justifyContent: 'center',
    },
    reloadText: {
        marginTop: 8,
        fontSize: 14,
        fontStyle: 'italic',
        textAlign: 'center',
    },
    reloadSubtext: {
        marginTop: 4,
        fontSize: 12,
        textAlign: 'center',
    },
    reloadHint: {
        marginTop: 6,
        fontSize: 11,
        textAlign: 'center',
        fontStyle: 'italic',
    },
    missingMediaContainer: {
        marginBottom: 8,
        padding: 20,
        borderRadius: 12,
        backgroundColor: 'rgba(128, 128, 128, 0.1)',
        borderWidth: 1,
        borderColor: 'rgba(128, 128, 128, 0.3)',
        borderStyle: 'dashed',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: 100,
    },
    missingMediaText: {
        marginTop: 8,
        fontSize: 14,
        fontWeight: '500',
        textAlign: 'center',
    },
    missingMediaSubtext: {
        marginTop: 4,
        fontSize: 12,
        textAlign: 'center',
        fontStyle: 'italic',
    },
    fileContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 8,
        padding: 12,
        borderRadius: 12,
        backgroundColor: 'rgba(0, 0, 0, 0.05)',
        borderWidth: 1,
        borderColor: 'rgba(0, 0, 0, 0.1)',
        minHeight: 60,
    },
    fileIconContainer: {
        marginRight: 12,
        alignItems: 'center',
        justifyContent: 'center',
        width: 40,
        height: 40,
        borderRadius: 8,
        backgroundColor: 'rgba(0, 0, 0, 0.05)',
    },
    fileInfo: {
        flex: 1,
        marginRight: 8,
    },
    fileName: {
        fontSize: 14,
        fontWeight: '500',
        marginBottom: 2,
    },
    fileSize: {
        fontSize: 12,
        marginBottom: 1,
    },
    fileMimeType: {
        fontSize: 10,
        fontStyle: 'italic',
    },
    forcePlayButton: {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: [{ translateX: -32 }, { translateY: -50 }],
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 2,
    },
    forcePlayText: {
        color: 'white',
        fontSize: 16,
        marginTop: 8,
        textAlign: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        paddingHorizontal: 12,
        paddingVertical: 4,
        borderRadius: 8,
    },
    forcePlaySubtext: {
        color: 'rgba(255, 255, 255, 0.7)',
        fontSize: 12,
        marginTop: 4,
        textAlign: 'center',
        fontStyle: 'italic',
    },
    soundButton: {
        position: 'absolute',
        bottom: 100,
        right: 20,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        padding: 12,
        borderRadius: 25,
        zIndex: 2,
    },
    videoErrorContainer: {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: [{ translateX: -100 }, { translateY: -100 }],
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        padding: 20,
        borderRadius: 12,
        width: 200,
        zIndex: 2,
    },
    videoErrorText: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
        marginTop: 8,
        textAlign: 'center',
    },
    videoErrorDetails: {
        color: 'white',
        fontSize: 12,
        marginTop: 8,
        textAlign: 'center',
        opacity: 0.8,
    },
    retryButton: {
        backgroundColor: 'rgba(255, 255, 255, 0.2)',
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderRadius: 8,
        marginTop: 12,
    },
    retryButtonText: {
        color: 'white',
        fontSize: 14,
        fontWeight: 'bold',
    },
    audioWarningDot: {
        position: 'absolute',
        top: 2,
        right: 2,
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: 'orange',
    },
    systemPlayerButton: {
        position: 'absolute',
        bottom: 100,
        left: 20,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        padding: 12,
        borderRadius: 25,
        zIndex: 2,
    },
    // –°—Ç–∏–ª–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞
    inlineVideoContainer: {
        position: 'relative',
        marginBottom: 8,
        borderRadius: 12,
        overflow: 'hidden',
        width: 280,
        height: 200,
    },
    inlineVideo: {
        width: '100%',
        height: '100%',
        borderRadius: 12,
    },
    fullscreenVideoContainer: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 1000,
        backgroundColor: 'black',
        marginBottom: 0,
        borderRadius: 0,
    },
    fullscreenVideo: {
        width: '100%',
        height: '100%',
        borderRadius: 0,
    },
    inlineVideoControls: {
        position: 'absolute',
        bottom: 8,
        right: 8,
        flexDirection: 'row',
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        borderRadius: 20,
        padding: 4,
        zIndex: 1,
    },
    fullscreenVideoControls: {
        position: 'absolute',
        bottom: 60,
        right: 20,
        flexDirection: 'row',
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        borderRadius: 25,
        padding: 8,
        zIndex: 1,
    },
    inlineVideoButton: {
        padding: 6,
        marginHorizontal: 2,
        borderRadius: 15,
        backgroundColor: 'rgba(255, 255, 255, 0.2)',
        alignItems: 'center',
        justifyContent: 'center',
        minWidth: 30,
        minHeight: 30,
    },
    videoProgressContainer: {
        position: 'absolute',
        bottom: 40,
        left: 8,
        right: 8,
        zIndex: 1,
    },
    videoProgressBar: {
        height: 4,
        backgroundColor: 'rgba(255, 255, 255, 0.3)',
        borderRadius: 2,
        overflow: 'hidden',
    },
    videoProgressFill: {
        height: '100%',
        backgroundColor: '#007AFF',
        borderRadius: 2,
    },
    videoProgressTouch: {
        position: 'absolute',
        top: -10,
        bottom: -10,
        left: 0,
        right: 0,
    },
    videoTimeContainer: {
        position: 'absolute',
        bottom: 50,
        left: 8,
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        paddingHorizontal: 8,
        paddingVertical: 2,
        borderRadius: 4,
        zIndex: 1,
    },
    videoTimeText: {
        color: 'white',
        fontSize: 12,
        fontFamily: 'monospace',
    },
    fullscreenPlayOverlay: {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: [{ translateX: -40 }, { translateY: -40 }],
        zIndex: 2,
    },
});